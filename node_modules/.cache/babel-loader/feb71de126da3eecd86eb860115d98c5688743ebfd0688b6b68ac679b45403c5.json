{"ast":null,"code":"import { _registerComponent, registerVersion, _getProvider, getApp, _removeServiceInstance, SDK_VERSION } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { FirebaseError, getDefaultEmulatorHostnameAndPort, createMockUserToken, getModularInstance, deepEqual } from '@firebase/util';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass User {\n  constructor(t) {\n    this.uid = t;\n  }\n  isAuthenticated() {\n    return null != this.uid;\n  }\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n  toKey() {\n    return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n  }\n  isEqual(t) {\n    return t.uid === this.uid;\n  }\n}\n\n/** A user with a null UID. */\nUser.UNAUTHENTICATED = new User(null),\n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nUser.GOOGLE_CREDENTIALS = new User(\"google-credentials-uid\"), User.FIRST_PARTY = new User(\"first-party-uid\"), User.MOCK_USER = new User(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet d = \"10.12.1\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst f = new Logger(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */\nfunction setLogLevel(t) {\n  f.setLogLevel(t);\n}\nfunction __PRIVATE_logDebug(t, ...e) {\n  if (f.logLevel <= LogLevel.DEBUG) {\n    const r = e.map(__PRIVATE_argToString);\n    f.debug(`Firestore (${d}): ${t}`, ...r);\n  }\n}\nfunction __PRIVATE_logError(t, ...e) {\n  if (f.logLevel <= LogLevel.ERROR) {\n    const r = e.map(__PRIVATE_argToString);\n    f.error(`Firestore (${d}): ${t}`, ...r);\n  }\n}\n\n/**\n * @internal\n */\nfunction __PRIVATE_logWarn(t, ...e) {\n  if (f.logLevel <= LogLevel.WARN) {\n    const r = e.map(__PRIVATE_argToString);\n    f.warn(`Firestore (${d}): ${t}`, ...r);\n  }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */\nfunction __PRIVATE_argToString(t) {\n  if (\"string\" == typeof t) return t;\n  try {\n    /**\n    * @license\n    * Copyright 2020 Google LLC\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *   http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /** Formats an object as a JSON string, suitable for logging. */\n    return function __PRIVATE_formatJSON(t) {\n      return JSON.stringify(t);\n    }(t);\n  } catch (e) {\n    // Converting to JSON failed, just log the object directly\n    return t;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\nfunction fail(t = \"Unexpected state\") {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const e = `FIRESTORE (${d}) INTERNAL ASSERTION FAILED: ` + t;\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw __PRIVATE_logError(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\nfunction __PRIVATE_hardAssert(t, e) {\n  t || fail();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\nfunction __PRIVATE_debugCast(t,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n  return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst E = \"ok\",\n  m = \"cancelled\",\n  A = \"unknown\",\n  T = \"invalid-argument\",\n  R = \"deadline-exceeded\",\n  P = \"not-found\",\n  I = \"already-exists\",\n  V = \"permission-denied\",\n  p = \"unauthenticated\",\n  y = \"resource-exhausted\",\n  w = \"failed-precondition\",\n  g = \"aborted\",\n  F = \"out-of-range\",\n  v = \"unimplemented\",\n  D = \"internal\",\n  b = \"unavailable\",\n  C = \"data-loss\";\n\n/** An error returned by a Firestore operation. */\nclass FirestoreError extends FirebaseError {\n  /** @hideconstructor */\n  constructor(\n  /**\n   * The backend error code associated with this error.\n   */\n  t,\n  /**\n   * A custom error description.\n   */\n  e) {\n    super(t, e), this.code = t, this.message = e,\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass __PRIVATE_Deferred {\n  constructor() {\n    this.promise = new Promise((t, e) => {\n      this.resolve = t, this.reject = e;\n    });\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass __PRIVATE_OAuthToken {\n  constructor(t, e) {\n    this.user = e, this.type = \"OAuth\", this.headers = new Map(), this.headers.set(\"Authorization\", `Bearer ${t}`);\n  }\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */\nclass __PRIVATE_EmptyAuthCredentialsProvider {\n  getToken() {\n    return Promise.resolve(null);\n  }\n  invalidateToken() {}\n  start(t, e) {\n    // Fire with initial user.\n    t.enqueueRetryable(() => e(User.UNAUTHENTICATED));\n  }\n  shutdown() {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */\nclass __PRIVATE_EmulatorAuthCredentialsProvider {\n  constructor(t) {\n    this.token = t,\n    /**\n     * Stores the listener registered with setChangeListener()\n     * This isn't actually necessary since the UID never changes, but we use this\n     * to verify the listen contract is adhered to in tests.\n     */\n    this.changeListener = null;\n  }\n  getToken() {\n    return Promise.resolve(this.token);\n  }\n  invalidateToken() {}\n  start(t, e) {\n    this.changeListener = e,\n    // Fire with initial user.\n    t.enqueueRetryable(() => e(this.token.user));\n  }\n  shutdown() {\n    this.changeListener = null;\n  }\n}\n\n/** Credential provider for the Lite SDK. */\nclass __PRIVATE_LiteAuthCredentialsProvider {\n  constructor(t) {\n    this.auth = null, t.onInit(t => {\n      this.auth = t;\n    });\n  }\n  getToken() {\n    return this.auth ? this.auth.getToken().then(t => t ? (__PRIVATE_hardAssert(\"string\" == typeof t.accessToken), new __PRIVATE_OAuthToken(t.accessToken, new User(this.auth.getUid()))) : null) : Promise.resolve(null);\n  }\n  invalidateToken() {}\n  start(t, e) {}\n  shutdown() {}\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\nclass __PRIVATE_FirstPartyToken {\n  constructor(t, e, r) {\n    this.t = t, this.i = e, this.o = r, this.type = \"FirstParty\", this.user = User.FIRST_PARTY, this.u = new Map();\n  }\n  /**\n   * Gets an authorization token, using a provided factory function, or return\n   * null.\n   */\n  l() {\n    return this.o ? this.o() : null;\n  }\n  get headers() {\n    this.u.set(\"X-Goog-AuthUser\", this.t);\n    // Use array notation to prevent minification\n    const t = this.l();\n    return t && this.u.set(\"Authorization\", t), this.i && this.u.set(\"X-Goog-Iam-Authorization-Token\", this.i), this.u;\n  }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\nclass __PRIVATE_FirstPartyAuthCredentialsProvider {\n  constructor(t, e, r) {\n    this.t = t, this.i = e, this.o = r;\n  }\n  getToken() {\n    return Promise.resolve(new __PRIVATE_FirstPartyToken(this.t, this.i, this.o));\n  }\n  start(t, e) {\n    // Fire with initial uid.\n    t.enqueueRetryable(() => e(User.FIRST_PARTY));\n  }\n  shutdown() {}\n  invalidateToken() {}\n}\nclass AppCheckToken {\n  constructor(t) {\n    this.value = t, this.type = \"AppCheck\", this.headers = new Map(), t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n  }\n}\n\n/** AppCheck token provider for the Lite SDK. */\nclass __PRIVATE_LiteAppCheckTokenProvider {\n  constructor(t) {\n    this.h = t, this.appCheck = null, t.onInit(t => {\n      this.appCheck = t;\n    });\n  }\n  getToken() {\n    return this.appCheck ? this.appCheck.getToken().then(t => t ? (__PRIVATE_hardAssert(\"string\" == typeof t.token), new AppCheckToken(t.token)) : null) : Promise.resolve(null);\n  }\n  invalidateToken() {}\n  start(t, e) {}\n  shutdown() {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass DatabaseInfo {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId - The database to use.\n   * @param appId - The Firebase App Id.\n   * @param persistenceKey - A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host - The Firestore backend host to connect to.\n   * @param ssl - Whether to use SSL when connecting.\n   * @param forceLongPolling - Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n   * option when using WebChannel as the network transport.\n   * @param longPollingOptions Options that configure long-polling.\n   * @param useFetchStreams Whether to use the Fetch API instead of\n   * XMLHTTPRequest\n   */\n  constructor(t, e, r, n, i, s, o, a, u) {\n    this.databaseId = t, this.appId = e, this.persistenceKey = r, this.host = n, this.ssl = i, this.forceLongPolling = s, this.autoDetectLongPolling = o, this.longPollingOptions = a, this.useFetchStreams = u;\n  }\n}\n\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass DatabaseId {\n  constructor(t, e) {\n    this.projectId = t, this.database = e || \"(default)\";\n  }\n  static empty() {\n    return new DatabaseId(\"\", \"\");\n  }\n  get isDefaultDatabase() {\n    return \"(default)\" === this.database;\n  }\n  isEqual(t) {\n    return t instanceof DatabaseId && t.projectId === this.projectId && t.database === this.database;\n  }\n}\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass BasePath {\n  constructor(t, e, r) {\n    void 0 === e ? e = 0 : e > t.length && fail(), void 0 === r ? r = t.length - e : r > t.length - e && fail(), this.segments = t, this.offset = e, this.len = r;\n  }\n  get length() {\n    return this.len;\n  }\n  isEqual(t) {\n    return 0 === BasePath.comparator(this, t);\n  }\n  child(t) {\n    const e = this.segments.slice(this.offset, this.limit());\n    return t instanceof BasePath ? t.forEach(t => {\n      e.push(t);\n    }) : e.push(t), this.construct(e);\n  }\n  /** The index of one past the last segment of the path. */\n  limit() {\n    return this.offset + this.length;\n  }\n  popFirst(t) {\n    return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n  }\n  popLast() {\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n  firstSegment() {\n    return this.segments[this.offset];\n  }\n  lastSegment() {\n    return this.get(this.length - 1);\n  }\n  get(t) {\n    return this.segments[this.offset + t];\n  }\n  isEmpty() {\n    return 0 === this.length;\n  }\n  isPrefixOf(t) {\n    if (t.length < this.length) return !1;\n    for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n    return !0;\n  }\n  isImmediateParentOf(t) {\n    if (this.length + 1 !== t.length) return !1;\n    for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n    return !0;\n  }\n  forEach(t) {\n    for (let e = this.offset, r = this.limit(); e < r; e++) t(this.segments[e]);\n  }\n  toArray() {\n    return this.segments.slice(this.offset, this.limit());\n  }\n  static comparator(t, e) {\n    const r = Math.min(t.length, e.length);\n    for (let n = 0; n < r; n++) {\n      const r = t.get(n),\n        i = e.get(n);\n      if (r < i) return -1;\n      if (r > i) return 1;\n    }\n    return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n  }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */\nclass ResourcePath extends BasePath {\n  construct(t, e, r) {\n    return new ResourcePath(t, e, r);\n  }\n  canonicalString() {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    return this.toArray().join(\"/\");\n  }\n  toString() {\n    return this.canonicalString();\n  }\n  /**\n   * Returns a string representation of this path\n   * where each path segment has been encoded with\n   * `encodeURIComponent`.\n   */\n  toUriEncodedString() {\n    return this.toArray().map(encodeURIComponent).join(\"/\");\n  }\n  /**\n   * Creates a resource path from the given slash-delimited string. If multiple\n   * arguments are provided, all components are combined. Leading and trailing\n   * slashes from all components are ignored.\n   */\n  static fromString(...t) {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    const e = [];\n    for (const r of t) {\n      if (r.indexOf(\"//\") >= 0) throw new FirestoreError(T, `Invalid segment (${r}). Paths must not contain // in them.`);\n      // Strip leading and traling slashed.\n      e.push(...r.split(\"/\").filter(t => t.length > 0));\n    }\n    return new ResourcePath(e);\n  }\n  static emptyPath() {\n    return new ResourcePath([]);\n  }\n}\nconst S = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */\nclass FieldPath$1 extends BasePath {\n  construct(t, e, r) {\n    return new FieldPath$1(t, e, r);\n  }\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n  static isValidIdentifier(t) {\n    return S.test(t);\n  }\n  canonicalString() {\n    return this.toArray().map(t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), FieldPath$1.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t)).join(\".\");\n  }\n  toString() {\n    return this.canonicalString();\n  }\n  /**\n   * Returns true if this field references the key of a document.\n   */\n  isKeyField() {\n    return 1 === this.length && \"__name__\" === this.get(0);\n  }\n  /**\n   * The field designating the key of a document.\n   */\n  static keyField() {\n    return new FieldPath$1([\"__name__\"]);\n  }\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n  static fromServerFormat(t) {\n    const e = [];\n    let r = \"\",\n      n = 0;\n    const __PRIVATE_addCurrentSegment = () => {\n      if (0 === r.length) throw new FirestoreError(T, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n      e.push(r), r = \"\";\n    };\n    let i = !1;\n    for (; n < t.length;) {\n      const e = t[n];\n      if (\"\\\\\" === e) {\n        if (n + 1 === t.length) throw new FirestoreError(T, \"Path has trailing escape character: \" + t);\n        const e = t[n + 1];\n        if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new FirestoreError(T, \"Path has invalid escape sequence: \" + t);\n        r += e, n += 2;\n      } else \"`\" === e ? (i = !i, n++) : \".\" !== e || i ? (r += e, n++) : (__PRIVATE_addCurrentSegment(), n++);\n    }\n    if (__PRIVATE_addCurrentSegment(), i) throw new FirestoreError(T, \"Unterminated ` in path: \" + t);\n    return new FieldPath$1(e);\n  }\n  static emptyPath() {\n    return new FieldPath$1([]);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nclass DocumentKey {\n  constructor(t) {\n    this.path = t;\n  }\n  static fromPath(t) {\n    return new DocumentKey(ResourcePath.fromString(t));\n  }\n  static fromName(t) {\n    return new DocumentKey(ResourcePath.fromString(t).popFirst(5));\n  }\n  static empty() {\n    return new DocumentKey(ResourcePath.emptyPath());\n  }\n  get collectionGroup() {\n    return this.path.popLast().lastSegment();\n  }\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(t) {\n    return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n  }\n  /** Returns the collection group (i.e. the name of the parent collection) for this key. */\n  getCollectionGroup() {\n    return this.path.get(this.path.length - 2);\n  }\n  /** Returns the fully qualified path to the parent collection. */\n  getCollectionPath() {\n    return this.path.popLast();\n  }\n  isEqual(t) {\n    return null !== t && 0 === ResourcePath.comparator(this.path, t.path);\n  }\n  toString() {\n    return this.path.toString();\n  }\n  static comparator(t, e) {\n    return ResourcePath.comparator(t.path, e.path);\n  }\n  static isDocumentKey(t) {\n    return t.length % 2 == 0;\n  }\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments - The segments of the path to the document\n   * @returns A new instance of DocumentKey\n   */\n  static fromSegments(t) {\n    return new DocumentKey(new ResourcePath(t.slice()));\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __PRIVATE_validateNonEmptyArgument(t, e, r) {\n  if (!r) throw new FirestoreError(T, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction __PRIVATE_validateDocumentPath(t) {\n  if (!DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\nfunction __PRIVATE_validateCollectionPath(t) {\n  if (DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction __PRIVATE_valueDescription(t) {\n  if (void 0 === t) return \"undefined\";\n  if (null === t) return \"null\";\n  if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), JSON.stringify(t);\n  if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n  if (\"object\" == typeof t) {\n    if (t instanceof Array) return \"an array\";\n    {\n      const e = /** try to get the constructor name for an object. */\n      function __PRIVATE_tryGetCustomObjectType(t) {\n        if (t.constructor) return t.constructor.name;\n        return null;\n      }\n      /**\n      * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n      * underlying instance. Throws if  `obj` is not an instance of `T`.\n      *\n      * This cast is used in the Lite and Full SDK to verify instance types for\n      * arguments passed to the public API.\n      * @internal\n      */(t);\n      return e ? `a custom ${e} object` : \"an object\";\n    }\n  }\n  return \"function\" == typeof t ? \"a function\" : fail();\n}\nfunction __PRIVATE_cast(t,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n  if (\"_delegate\" in t && (\n  // Unwrap Compat types\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  t = t._delegate), !(t instanceof e)) {\n    if (e.name === t.constructor.name) throw new FirestoreError(T, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n    {\n      const r = __PRIVATE_valueDescription(t);\n      throw new FirestoreError(T, `Expected type '${e.name}', but it was: ${r}`);\n    }\n  }\n  return t;\n}\nfunction __PRIVATE_validatePositiveNumber(t, e) {\n  if (e <= 0) throw new FirestoreError(T, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\n */\n/**\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\n * option values as the given instance.\n */\nfunction __PRIVATE_cloneLongPollingOptions(t) {\n  const e = {};\n  return void 0 !== t.timeoutSeconds && (e.timeoutSeconds = t.timeoutSeconds), e;\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The value returned from the most recent invocation of\n * `generateUniqueDebugId()`, or null if it has never been invoked.\n */\nlet N = null;\n\n/**\n * Generates and returns an initial value for `lastUniqueDebugId`.\n *\n * The returned value is randomly selected from a range of integers that are\n * represented as 8 hexadecimal digits. This means that (within reason) any\n * numbers generated by incrementing the returned number by 1 will also be\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\n * length when converted to a hexadecimal string, making reading logs containing\n * these IDs easier to follow. And since the return value is randomly selected\n * it will help to differentiate between logs from different executions.\n */\n/**\n * Generates and returns a unique ID as a hexadecimal string.\n *\n * The returned ID is intended to be used in debug logging messages to help\n * correlate log messages that may be spatially separated in the logs, but\n * logically related. For example, a network connection could include the same\n * \"debug ID\" string in all of its log messages to help trace a specific\n * connection over time.\n *\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\n */\nfunction __PRIVATE_generateUniqueDebugId() {\n  return null === N ? N = function __PRIVATE_generateInitialUniqueDebugId() {\n    return 268435456 + Math.round(2147483648 * Math.random());\n  }() : N++, \"0x\" + N.toString(16);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */\nfunction __PRIVATE_isNullOrUndefined(t) {\n  return null == t;\n}\n\n/** Returns whether the value represents -0. */\nfunction __PRIVATE_isNegativeZero(t) {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst O = {\n  BatchGetDocuments: \"batchGet\",\n  Commit: \"commit\",\n  RunQuery: \"runQuery\",\n  RunAggregationQuery: \"runAggregationQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar q, B;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction __PRIVATE_mapCodeFromHttpStatus(t) {\n  if (void 0 === t) return __PRIVATE_logError(\"RPC_ERROR\", \"HTTP error has no status\"), A;\n  // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n  switch (t) {\n    case 200:\n      // OK\n      return E;\n    case 400:\n      // Bad Request\n      return w;\n\n    // Other possibilities based on the forward mapping\n    // return Code.INVALID_ARGUMENT;\n    // return Code.OUT_OF_RANGE;\n    case 401:\n      // Unauthorized\n      return p;\n    case 403:\n      // Forbidden\n      return V;\n    case 404:\n      // Not Found\n      return P;\n    case 409:\n      // Conflict\n      return g;\n\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n    case 416:\n      // Range Not Satisfiable\n      return F;\n    case 429:\n      // Too Many Requests\n      return y;\n    case 499:\n      // Client Closed Request\n      return m;\n    case 500:\n      // Internal Server Error\n      return A;\n\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n    case 501:\n      // Unimplemented\n      return v;\n    case 503:\n      // Service Unavailable\n      return b;\n    case 504:\n      // Gateway Timeout\n      return R;\n    default:\n      return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? w : t >= 500 && t < 600 ? D : A;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */\n(B = q || (q = {}))[B.OK = 0] = \"OK\", B[B.CANCELLED = 1] = \"CANCELLED\", B[B.UNKNOWN = 2] = \"UNKNOWN\", B[B.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", B[B.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", B[B.NOT_FOUND = 5] = \"NOT_FOUND\", B[B.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", B[B.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", B[B.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", B[B.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", B[B.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", B[B.ABORTED = 10] = \"ABORTED\", B[B.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", B[B.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", B[B.INTERNAL = 13] = \"INTERNAL\", B[B.UNAVAILABLE = 14] = \"UNAVAILABLE\", B[B.DATA_LOSS = 15] = \"DATA_LOSS\";\nclass __PRIVATE_FetchConnection extends\n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass __PRIVATE_RestConnection {\n  constructor(t) {\n    this.databaseInfo = t, this.databaseId = t.databaseId;\n    const e = t.ssl ? \"https\" : \"http\",\n      r = encodeURIComponent(this.databaseId.projectId),\n      n = encodeURIComponent(this.databaseId.database);\n    this.m = e + \"://\" + t.host, this.A = `projects/${r}/databases/${n}`, this.T = \"(default)\" === this.databaseId.database ? `project_id=${r}` : `project_id=${r}&database_id=${n}`;\n  }\n  get R() {\n    // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n    // where to run the query, and expect the `request` to NOT specify the \"path\".\n    return !1;\n  }\n  P(t, e, r, n, i) {\n    const s = __PRIVATE_generateUniqueDebugId(),\n      o = this.I(t, e.toUriEncodedString());\n    __PRIVATE_logDebug(\"RestConnection\", `Sending RPC '${t}' ${s}:`, o, r);\n    const a = {\n      \"google-cloud-resource-prefix\": this.A,\n      \"x-goog-request-params\": this.T\n    };\n    return this.V(a, n, i), this.p(t, o, a, r).then(e => (__PRIVATE_logDebug(\"RestConnection\", `Received RPC '${t}' ${s}: `, e), e), e => {\n      throw __PRIVATE_logWarn(\"RestConnection\", `RPC '${t}' ${s} failed with error: `, e, \"url: \", o, \"request:\", r), e;\n    });\n  }\n  g(t, e, r, n, i, s) {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.P(t, e, r, n, i);\n  }\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n  V(t, e, r) {\n    t[\"X-Goog-Api-Client\"] =\n    // SDK_VERSION is updated to different value at runtime depending on the entry point,\n    // so we need to get its value when we need it in a function.\n    function __PRIVATE_getGoogApiClientValue() {\n      return \"gl-js/ fire/\" + d;\n    }(),\n    // Content-Type: text/plain will avoid preflight requests which might\n    // mess with CORS and redirects by proxies. If we add custom headers\n    // we will need to change this code to potentially use the $httpOverwrite\n    // parameter supported by ESF to avoid triggering preflight requests.\n    t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), e && e.headers.forEach((e, r) => t[r] = e), r && r.headers.forEach((e, r) => t[r] = e);\n  }\n  I(t, e) {\n    const r = O[t];\n    return `${this.m}/v1/${e}:${r}`;\n  }\n  /**\n   * Closes and cleans up any resources associated with the connection. This\n   * implementation is a no-op because there are no resources associated\n   * with the RestConnection that need to be cleaned up.\n   */\n  terminate() {\n    // No-op\n  }\n} {\n  /**\n   * @param databaseInfo - The connection info.\n   * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n   */\n  constructor(t, e) {\n    super(t), this.F = e;\n  }\n  v(t, e) {\n    throw new Error(\"Not supported by FetchConnection\");\n  }\n  async p(t, e, r, n) {\n    var i;\n    const s = JSON.stringify(n);\n    let o;\n    try {\n      o = await this.F(e, {\n        method: \"POST\",\n        headers: r,\n        body: s\n      });\n    } catch (t) {\n      const e = t;\n      throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(e.status), \"Request failed with error: \" + e.statusText);\n    }\n    if (!o.ok) {\n      let t = await o.json();\n      Array.isArray(t) && (t = t[0]);\n      const e = null === (i = null == t ? void 0 : t.error) || void 0 === i ? void 0 : i.message;\n      throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(o.status), `Request failed with error: ${null != e ? e : o.statusText}`);\n    }\n    return o.json();\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Concrete implementation of the Aggregate type.\n */\nclass __PRIVATE_AggregateImpl {\n  constructor(t, e, r) {\n    this.alias = t, this.aggregateType = e, this.fieldPath = r;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\nfunction __PRIVATE_randomBytes(t) {\n  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n  const e =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto),\n    r = new Uint8Array(t);\n  if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(r);else\n    // Falls back to Math.random\n    for (let e = 0; e < t; e++) r[e] = Math.floor(256 * Math.random());\n  return r;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A utility class for generating unique alphanumeric IDs of a specified length.\n *\n * @internal\n * Exported internally for testing purposes.\n */\nclass __PRIVATE_AutoId {\n  static newId() {\n    // Alphanumeric characters\n    const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n      e = Math.floor(256 / t.length) * t.length;\n    // The largest byte value that is a multiple of `char.length`.\n    let r = \"\";\n    for (; r.length < 20;) {\n      const n = __PRIVATE_randomBytes(40);\n      for (let i = 0; i < n.length; ++i)\n      // Only accept values that are [0, maxMultiple), this ensures they can\n      // be evenly mapped to indices of `chars` via a modulo operation.\n      r.length < 20 && n[i] < e && (r += t.charAt(n[i] % t.length));\n    }\n    return r;\n  }\n}\nfunction __PRIVATE_primitiveComparator(t, e) {\n  return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */\nfunction __PRIVATE_arrayEquals(t, e, r) {\n  return t.length === e.length && t.every((t, n) => r(t, e[n]));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __PRIVATE_objectSize(t) {\n  let e = 0;\n  for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e++;\n  return e;\n}\nfunction forEach(t, e) {\n  for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e(r, t[r]);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error encountered while decoding base64 string.\n */\nclass __PRIVATE_Base64DecodeError extends Error {\n  constructor() {\n    super(...arguments), this.name = \"Base64DecodeError\";\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass ByteString {\n  constructor(t) {\n    this.binaryString = t;\n  }\n  static fromBase64String(t) {\n    const e = function __PRIVATE_decodeBase64(t) {\n      try {\n        return atob(t);\n      } catch (t) {\n        // Check that `DOMException` is defined before using it to avoid\n        // \"ReferenceError: Property 'DOMException' doesn't exist\" in react-native.\n        // (https://github.com/firebase/firebase-js-sdk/issues/7115)\n        throw \"undefined\" != typeof DOMException && t instanceof DOMException ? new __PRIVATE_Base64DecodeError(\"Invalid base64 string: \" + t) : t;\n      }\n    }\n    /** Converts a binary string to a Base64 encoded string. */(t);\n    return new ByteString(e);\n  }\n  static fromUint8Array(t) {\n    // TODO(indexing); Remove the copy of the byte string here as this method\n    // is frequently called during indexing.\n    const e =\n    /**\n    * Helper function to convert an Uint8array to a binary string.\n    */\n    function __PRIVATE_binaryStringFromUint8Array(t) {\n      let e = \"\";\n      for (let r = 0; r < t.length; ++r) e += String.fromCharCode(t[r]);\n      return e;\n    }\n    /**\n    * Helper function to convert a binary string to an Uint8Array.\n    */(t);\n    return new ByteString(e);\n  }\n  [Symbol.iterator]() {\n    let t = 0;\n    return {\n      next: () => t < this.binaryString.length ? {\n        value: this.binaryString.charCodeAt(t++),\n        done: !1\n      } : {\n        value: void 0,\n        done: !0\n      }\n    };\n  }\n  toBase64() {\n    return function __PRIVATE_encodeBase64(t) {\n      return btoa(t);\n    }(this.binaryString);\n  }\n  toUint8Array() {\n    return function __PRIVATE_uint8ArrayFromBinaryString(t) {\n      const e = new Uint8Array(t.length);\n      for (let r = 0; r < t.length; r++) e[r] = t.charCodeAt(r);\n      return e;\n    }\n    /**\n    * @license\n    * Copyright 2020 Google LLC\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *   http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n    (this.binaryString);\n  }\n  approximateByteSize() {\n    return 2 * this.binaryString.length;\n  }\n  compareTo(t) {\n    return __PRIVATE_primitiveComparator(this.binaryString, t.binaryString);\n  }\n  isEqual(t) {\n    return this.binaryString === t.binaryString;\n  }\n}\nByteString.EMPTY_BYTE_STRING = new ByteString(\"\");\nconst $ = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\nfunction __PRIVATE_normalizeTimestamp(t) {\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (__PRIVATE_hardAssert(!!t), \"string\" == typeof t) {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n    // Parse the nanos right out of the string.\n    let e = 0;\n    const r = $.exec(t);\n    if (__PRIVATE_hardAssert(!!r), r[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let t = r[1];\n      t = (t + \"000000000\").substr(0, 9), e = Number(t);\n    }\n    // Parse the date to get the seconds.\n    const n = new Date(t);\n    return {\n      seconds: Math.floor(n.getTime() / 1e3),\n      nanos: e\n    };\n  }\n  return {\n    seconds: __PRIVATE_normalizeNumber(t.seconds),\n    nanos: __PRIVATE_normalizeNumber(t.nanos)\n  };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\nfunction __PRIVATE_normalizeNumber(t) {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */\nfunction __PRIVATE_normalizeByteString(t) {\n  return \"string\" == typeof t ? ByteString.fromBase64String(t) : ByteString.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass Timestamp {\n  /**\n   * Creates a new timestamp.\n   *\n   * @param seconds - The number of seconds of UTC time since Unix epoch\n   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   *     9999-12-31T23:59:59Z inclusive.\n   * @param nanoseconds - The non-negative fractions of a second at nanosecond\n   *     resolution. Negative second values with fractions must still have\n   *     non-negative nanoseconds values that count forward in time. Must be\n   *     from 0 to 999,999,999 inclusive.\n   */\n  constructor(\n  /**\n   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  t,\n  /**\n   * The fractions of a second at nanosecond resolution.*\n   */\n  e) {\n    if (this.seconds = t, this.nanoseconds = e, e < 0) throw new FirestoreError(T, \"Timestamp nanoseconds out of range: \" + e);\n    if (e >= 1e9) throw new FirestoreError(T, \"Timestamp nanoseconds out of range: \" + e);\n    if (t < -62135596800) throw new FirestoreError(T, \"Timestamp seconds out of range: \" + t);\n    // This will break in the year 10,000.\n    if (t >= 253402300800) throw new FirestoreError(T, \"Timestamp seconds out of range: \" + t);\n  }\n  /**\n   * Creates a new timestamp with the current date, with millisecond precision.\n   *\n   * @returns a new timestamp representing the current date.\n   */\n  static now() {\n    return Timestamp.fromMillis(Date.now());\n  }\n  /**\n   * Creates a new timestamp from the given date.\n   *\n   * @param date - The date to initialize the `Timestamp` from.\n   * @returns A new `Timestamp` representing the same point in time as the given\n   *     date.\n   */\n  static fromDate(t) {\n    return Timestamp.fromMillis(t.getTime());\n  }\n  /**\n   * Creates a new timestamp from the given number of milliseconds.\n   *\n   * @param milliseconds - Number of milliseconds since Unix epoch\n   *     1970-01-01T00:00:00Z.\n   * @returns A new `Timestamp` representing the same point in time as the given\n   *     number of milliseconds.\n   */\n  static fromMillis(t) {\n    const e = Math.floor(t / 1e3),\n      r = Math.floor(1e6 * (t - 1e3 * e));\n    return new Timestamp(e, r);\n  }\n  /**\n   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n   * causes a loss of precision since `Date` objects only support millisecond\n   * precision.\n   *\n   * @returns JavaScript `Date` object representing the same point in time as\n   *     this `Timestamp`, with millisecond precision.\n   */\n  toDate() {\n    return new Date(this.toMillis());\n  }\n  /**\n   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n   * epoch). This operation causes a loss of precision.\n   *\n   * @returns The point in time corresponding to this timestamp, represented as\n   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  toMillis() {\n    return 1e3 * this.seconds + this.nanoseconds / 1e6;\n  }\n  _compareTo(t) {\n    return this.seconds === t.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, t.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, t.seconds);\n  }\n  /**\n   * Returns true if this `Timestamp` is equal to the provided one.\n   *\n   * @param other - The `Timestamp` to compare against.\n   * @returns true if this `Timestamp` is equal to the provided one.\n   */\n  isEqual(t) {\n    return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n  }\n  /** Returns a textual representation of this `Timestamp`. */\n  toString() {\n    return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n  }\n  /** Returns a JSON-serializable representation of this `Timestamp`. */\n  toJSON() {\n    return {\n      seconds: this.seconds,\n      nanoseconds: this.nanoseconds\n    };\n  }\n  /**\n   * Converts this object to a primitive string, which allows `Timestamp` objects\n   * to be compared using the `>`, `<=`, `>=` and `>` operators.\n   */\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where\n    // <seconds> is translated to have a non-negative value and both <seconds>\n    // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n    // Strings with this format then have a lexiographical ordering that matches\n    // the expected ordering. The <seconds> translation is done to avoid having\n    // a leading negative sign (i.e. a leading '-' character) in its string\n    // representation, which would affect its lexiographical ordering.\n    const t = this.seconds - -62135596800;\n    // Note: Up to 12 decimal digits are required to represent all valid\n    // 'seconds' values.\n    return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\nfunction __PRIVATE_isServerTimestamp(t) {\n  var e, r;\n  return \"server_timestamp\" === (null === (r = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === r ? void 0 : r.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\nfunction __PRIVATE_getPreviousValue(t) {\n  const e = t.mapValue.fields.__previous_value__;\n  return __PRIVATE_isServerTimestamp(e) ? __PRIVATE_getPreviousValue(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */\nfunction __PRIVATE_getLocalWriteTime(t) {\n  const e = __PRIVATE_normalizeTimestamp(t.mapValue.fields.__local_write_time__.timestampValue);\n  return new Timestamp(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst Q = {\n  fields: {\n    __type__: {\n      stringValue: \"__max__\"\n    }\n  }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction __PRIVATE_typeOrder(t) {\n  return \"nullValue\" in t ? 0 /* TypeOrder.NullValue */ : \"booleanValue\" in t ? 1 /* TypeOrder.BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* TypeOrder.NumberValue */ : \"timestampValue\" in t ? 3 /* TypeOrder.TimestampValue */ : \"stringValue\" in t ? 5 /* TypeOrder.StringValue */ : \"bytesValue\" in t ? 6 /* TypeOrder.BlobValue */ : \"referenceValue\" in t ? 7 /* TypeOrder.RefValue */ : \"geoPointValue\" in t ? 8 /* TypeOrder.GeoPointValue */ : \"arrayValue\" in t ? 9 /* TypeOrder.ArrayValue */ : \"mapValue\" in t ? __PRIVATE_isServerTimestamp(t) ? 4 /* TypeOrder.ServerTimestampValue */ : /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n  function __PRIVATE_isMaxValue(t) {\n    return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n  }\n  /**\n  * @license\n  * Copyright 2022 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  /**\n  * Represents a bound of a query.\n  *\n  * The bound is specified with the given components representing a position and\n  * whether it's just before or just after the position (relative to whatever the\n  * query order is).\n  *\n  * The position represents a logical index position for a query. It's a prefix\n  * of values for the (potentially implicit) order by clauses of a query.\n  *\n  * Bound provides a function to determine whether a document comes before or\n  * after a bound. This is influenced by whether the position is just before or\n  * just after the provided values.\n  */(t) ? 9007199254740991 /* TypeOrder.MaxValue */ : 10 /* TypeOrder.ObjectValue */ : fail();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */\nfunction __PRIVATE_valueEquals(t, e) {\n  if (t === e) return !0;\n  const r = __PRIVATE_typeOrder(t);\n  if (r !== __PRIVATE_typeOrder(e)) return !1;\n  switch (r) {\n    case 0 /* TypeOrder.NullValue */:\n    case 9007199254740991 /* TypeOrder.MaxValue */:\n      return !0;\n    case 1 /* TypeOrder.BooleanValue */:\n      return t.booleanValue === e.booleanValue;\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      return __PRIVATE_getLocalWriteTime(t).isEqual(__PRIVATE_getLocalWriteTime(e));\n    case 3 /* TypeOrder.TimestampValue */:\n      return function __PRIVATE_timestampEquals(t, e) {\n        if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length)\n          // Use string equality for ISO 8601 timestamps\n          return t.timestampValue === e.timestampValue;\n        const r = __PRIVATE_normalizeTimestamp(t.timestampValue),\n          n = __PRIVATE_normalizeTimestamp(e.timestampValue);\n        return r.seconds === n.seconds && r.nanos === n.nanos;\n      }(t, e);\n    case 5 /* TypeOrder.StringValue */:\n      return t.stringValue === e.stringValue;\n    case 6 /* TypeOrder.BlobValue */:\n      return function __PRIVATE_blobEquals(t, e) {\n        return __PRIVATE_normalizeByteString(t.bytesValue).isEqual(__PRIVATE_normalizeByteString(e.bytesValue));\n      }(t, e);\n    case 7 /* TypeOrder.RefValue */:\n      return t.referenceValue === e.referenceValue;\n    case 8 /* TypeOrder.GeoPointValue */:\n      return function __PRIVATE_geoPointEquals(t, e) {\n        return __PRIVATE_normalizeNumber(t.geoPointValue.latitude) === __PRIVATE_normalizeNumber(e.geoPointValue.latitude) && __PRIVATE_normalizeNumber(t.geoPointValue.longitude) === __PRIVATE_normalizeNumber(e.geoPointValue.longitude);\n      }(t, e);\n    case 2 /* TypeOrder.NumberValue */:\n      return function __PRIVATE_numberEquals(t, e) {\n        if (\"integerValue\" in t && \"integerValue\" in e) return __PRIVATE_normalizeNumber(t.integerValue) === __PRIVATE_normalizeNumber(e.integerValue);\n        if (\"doubleValue\" in t && \"doubleValue\" in e) {\n          const r = __PRIVATE_normalizeNumber(t.doubleValue),\n            n = __PRIVATE_normalizeNumber(e.doubleValue);\n          return r === n ? __PRIVATE_isNegativeZero(r) === __PRIVATE_isNegativeZero(n) : isNaN(r) && isNaN(n);\n        }\n        return !1;\n      }(t, e);\n    case 9 /* TypeOrder.ArrayValue */:\n      return __PRIVATE_arrayEquals(t.arrayValue.values || [], e.arrayValue.values || [], __PRIVATE_valueEquals);\n    case 10 /* TypeOrder.ObjectValue */:\n      return function __PRIVATE_objectEquals(t, e) {\n        const r = t.mapValue.fields || {},\n          n = e.mapValue.fields || {};\n        if (__PRIVATE_objectSize(r) !== __PRIVATE_objectSize(n)) return !1;\n        for (const t in r) if (r.hasOwnProperty(t) && (void 0 === n[t] || !__PRIVATE_valueEquals(r[t], n[t]))) return !1;\n        return !0;\n      }\n      /** Returns true if the ArrayValue contains the specified element. */(t, e);\n    default:\n      return fail();\n  }\n}\nfunction __PRIVATE_arrayValueContains(t, e) {\n  return void 0 !== (t.values || []).find(t => __PRIVATE_valueEquals(t, e));\n}\nfunction __PRIVATE_valueCompare(t, e) {\n  if (t === e) return 0;\n  const r = __PRIVATE_typeOrder(t),\n    n = __PRIVATE_typeOrder(e);\n  if (r !== n) return __PRIVATE_primitiveComparator(r, n);\n  switch (r) {\n    case 0 /* TypeOrder.NullValue */:\n    case 9007199254740991 /* TypeOrder.MaxValue */:\n      return 0;\n    case 1 /* TypeOrder.BooleanValue */:\n      return __PRIVATE_primitiveComparator(t.booleanValue, e.booleanValue);\n    case 2 /* TypeOrder.NumberValue */:\n      return function __PRIVATE_compareNumbers(t, e) {\n        const r = __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue),\n          n = __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);\n        return r < n ? -1 : r > n ? 1 : r === n ? 0 :\n        // one or both are NaN.\n        isNaN(r) ? isNaN(n) ? 0 : -1 : 1;\n      }(t, e);\n    case 3 /* TypeOrder.TimestampValue */:\n      return __PRIVATE_compareTimestamps(t.timestampValue, e.timestampValue);\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(t), __PRIVATE_getLocalWriteTime(e));\n    case 5 /* TypeOrder.StringValue */:\n      return __PRIVATE_primitiveComparator(t.stringValue, e.stringValue);\n    case 6 /* TypeOrder.BlobValue */:\n      return function __PRIVATE_compareBlobs(t, e) {\n        const r = __PRIVATE_normalizeByteString(t),\n          n = __PRIVATE_normalizeByteString(e);\n        return r.compareTo(n);\n      }(t.bytesValue, e.bytesValue);\n    case 7 /* TypeOrder.RefValue */:\n      return function __PRIVATE_compareReferences(t, e) {\n        const r = t.split(\"/\"),\n          n = e.split(\"/\");\n        for (let t = 0; t < r.length && t < n.length; t++) {\n          const e = __PRIVATE_primitiveComparator(r[t], n[t]);\n          if (0 !== e) return e;\n        }\n        return __PRIVATE_primitiveComparator(r.length, n.length);\n      }(t.referenceValue, e.referenceValue);\n    case 8 /* TypeOrder.GeoPointValue */:\n      return function __PRIVATE_compareGeoPoints(t, e) {\n        const r = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(e.latitude));\n        if (0 !== r) return r;\n        return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.longitude), __PRIVATE_normalizeNumber(e.longitude));\n      }(t.geoPointValue, e.geoPointValue);\n    case 9 /* TypeOrder.ArrayValue */:\n      return function __PRIVATE_compareArrays(t, e) {\n        const r = t.values || [],\n          n = e.values || [];\n        for (let t = 0; t < r.length && t < n.length; ++t) {\n          const e = __PRIVATE_valueCompare(r[t], n[t]);\n          if (e) return e;\n        }\n        return __PRIVATE_primitiveComparator(r.length, n.length);\n      }(t.arrayValue, e.arrayValue);\n    case 10 /* TypeOrder.ObjectValue */:\n      return function __PRIVATE_compareMaps(t, e) {\n        if (t === Q && e === Q) return 0;\n        if (t === Q) return 1;\n        if (e === Q) return -1;\n        const r = t.fields || {},\n          n = Object.keys(r),\n          i = e.fields || {},\n          s = Object.keys(i);\n        // Even though MapValues are likely sorted correctly based on their insertion\n        // order (e.g. when received from the backend), local modifications can bring\n        // elements out of order. We need to re-sort the elements to ensure that\n        // canonical IDs are independent of insertion order.\n        n.sort(), s.sort();\n        for (let t = 0; t < n.length && t < s.length; ++t) {\n          const e = __PRIVATE_primitiveComparator(n[t], s[t]);\n          if (0 !== e) return e;\n          const o = __PRIVATE_valueCompare(r[n[t]], i[s[t]]);\n          if (0 !== o) return o;\n        }\n        return __PRIVATE_primitiveComparator(n.length, s.length);\n      }\n      /** Returns a reference value for the provided database and key. */(t.mapValue, e.mapValue);\n    default:\n      throw fail();\n  }\n}\nfunction __PRIVATE_compareTimestamps(t, e) {\n  if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return __PRIVATE_primitiveComparator(t, e);\n  const r = __PRIVATE_normalizeTimestamp(t),\n    n = __PRIVATE_normalizeTimestamp(e),\n    i = __PRIVATE_primitiveComparator(r.seconds, n.seconds);\n  return 0 !== i ? i : __PRIVATE_primitiveComparator(r.nanos, n.nanos);\n}\nfunction __PRIVATE_refValue(t, e) {\n  return {\n    referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n  };\n}\n\n/** Returns true if `value` is an ArrayValue. */\nfunction isArray(t) {\n  return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */\nfunction __PRIVATE_isNullValue(t) {\n  return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */\nfunction __PRIVATE_isNanValue(t) {\n  return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */\nfunction __PRIVATE_isMapValue(t) {\n  return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */\nfunction __PRIVATE_deepClone(t) {\n  if (t.geoPointValue) return {\n    geoPointValue: Object.assign({}, t.geoPointValue)\n  };\n  if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n    timestampValue: Object.assign({}, t.timestampValue)\n  };\n  if (t.mapValue) {\n    const e = {\n      mapValue: {\n        fields: {}\n      }\n    };\n    return forEach(t.mapValue.fields, (t, r) => e.mapValue.fields[t] = __PRIVATE_deepClone(r)), e;\n  }\n  if (t.arrayValue) {\n    const e = {\n      arrayValue: {\n        values: []\n      }\n    };\n    for (let r = 0; r < (t.arrayValue.values || []).length; ++r) e.arrayValue.values[r] = __PRIVATE_deepClone(t.arrayValue.values[r]);\n    return e;\n  }\n  return Object.assign({}, t);\n}\nclass Bound {\n  constructor(t, e) {\n    this.position = t, this.inclusive = e;\n  }\n}\nfunction __PRIVATE_boundEquals(t, e) {\n  if (null === t) return null === e;\n  if (null === e) return !1;\n  if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n  for (let r = 0; r < t.position.length; r++) {\n    if (!__PRIVATE_valueEquals(t.position[r], e.position[r])) return !1;\n  }\n  return !0;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Filter {}\nclass FieldFilter extends Filter {\n  constructor(t, e, r) {\n    super(), this.field = t, this.op = e, this.value = r;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(t, e, r) {\n    return t.isKeyField() ? \"in\" /* Operator.IN */ === e || \"not-in\" /* Operator.NOT_IN */ === e ? this.createKeyFieldInFilter(t, e, r) : new __PRIVATE_KeyFieldFilter(t, e, r) : \"array-contains\" /* Operator.ARRAY_CONTAINS */ === e ? new __PRIVATE_ArrayContainsFilter(t, r) : \"in\" /* Operator.IN */ === e ? new __PRIVATE_InFilter(t, r) : \"not-in\" /* Operator.NOT_IN */ === e ? new __PRIVATE_NotInFilter(t, r) : \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === e ? new __PRIVATE_ArrayContainsAnyFilter(t, r) : new FieldFilter(t, e, r);\n  }\n  static createKeyFieldInFilter(t, e, r) {\n    return \"in\" /* Operator.IN */ === e ? new __PRIVATE_KeyFieldInFilter(t, r) : new __PRIVATE_KeyFieldNotInFilter(t, r);\n  }\n  matches(t) {\n    const e = t.data.field(this.field);\n    // Types do not have to match in NOT_EQUAL filters.\n    return \"!=\" /* Operator.NOT_EQUAL */ === this.op ? null !== e && this.matchesComparison(__PRIVATE_valueCompare(e, this.value)) : null !== e && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(e) && this.matchesComparison(__PRIVATE_valueCompare(e, this.value));\n    // Only compare types with matching backend order (such as double and int).\n  }\n  matchesComparison(t) {\n    switch (this.op) {\n      case \"<\" /* Operator.LESS_THAN */:\n        return t < 0;\n      case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\n        return t <= 0;\n      case \"==\" /* Operator.EQUAL */:\n        return 0 === t;\n      case \"!=\" /* Operator.NOT_EQUAL */:\n        return 0 !== t;\n      case \">\" /* Operator.GREATER_THAN */:\n        return t > 0;\n      case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\n        return t >= 0;\n      default:\n        return fail();\n    }\n  }\n  isInequality() {\n    return [\"<\" /* Operator.LESS_THAN */, \"<=\" /* Operator.LESS_THAN_OR_EQUAL */, \">\" /* Operator.GREATER_THAN */, \">=\" /* Operator.GREATER_THAN_OR_EQUAL */, \"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */].indexOf(this.op) >= 0;\n  }\n  getFlattenedFilters() {\n    return [this];\n  }\n  getFilters() {\n    return [this];\n  }\n}\nclass CompositeFilter extends Filter {\n  constructor(t, e) {\n    super(), this.filters = t, this.op = e, this.D = null;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n  static create(t, e) {\n    return new CompositeFilter(t, e);\n  }\n  matches(t) {\n    return function __PRIVATE_compositeFilterIsConjunction(t) {\n      return \"and\" /* CompositeOperator.AND */ === t.op;\n    }(this) ? void 0 === this.filters.find(e => !e.matches(t)) : void 0 !== this.filters.find(e => e.matches(t));\n  }\n  getFlattenedFilters() {\n    return null !== this.D || (this.D = this.filters.reduce((t, e) => t.concat(e.getFlattenedFilters()), [])), this.D;\n  }\n  // Returns a mutable copy of `this.filters`\n  getFilters() {\n    return Object.assign([], this.filters);\n  }\n}\nfunction __PRIVATE_filterEquals(t, e) {\n  return t instanceof FieldFilter ? function __PRIVATE_fieldFilterEquals(t, e) {\n    return e instanceof FieldFilter && t.op === e.op && t.field.isEqual(e.field) && __PRIVATE_valueEquals(t.value, e.value);\n  }(t, e) : t instanceof CompositeFilter ? function __PRIVATE_compositeFilterEquals(t, e) {\n    if (e instanceof CompositeFilter && t.op === e.op && t.filters.length === e.filters.length) {\n      return t.filters.reduce((t, r, n) => t && __PRIVATE_filterEquals(r, e.filters[n]), !0);\n    }\n    return !1;\n  }\n  /** Filter that matches on key fields (i.e. '__name__'). */(t, e) : void fail();\n}\nclass __PRIVATE_KeyFieldFilter extends FieldFilter {\n  constructor(t, e, r) {\n    super(t, e, r), this.key = DocumentKey.fromName(r.referenceValue);\n  }\n  matches(t) {\n    const e = DocumentKey.comparator(t.key, this.key);\n    return this.matchesComparison(e);\n  }\n}\n\n/** Filter that matches on key fields within an array. */\nclass __PRIVATE_KeyFieldInFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"in\" /* Operator.IN */, e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"in\" /* Operator.IN */, e);\n  }\n  matches(t) {\n    return this.keys.some(e => e.isEqual(t.key));\n  }\n}\n\n/** Filter that matches on key fields not present within an array. */\nclass __PRIVATE_KeyFieldNotInFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"not-in\" /* Operator.NOT_IN */, e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"not-in\" /* Operator.NOT_IN */, e);\n  }\n  matches(t) {\n    return !this.keys.some(e => e.isEqual(t.key));\n  }\n}\nfunction __PRIVATE_extractDocumentKeysFromArrayValue(t, e) {\n  var r;\n  return ((null === (r = e.arrayValue) || void 0 === r ? void 0 : r.values) || []).map(t => DocumentKey.fromName(t.referenceValue));\n}\n\n/** A Filter that implements the array-contains operator. */\nclass __PRIVATE_ArrayContainsFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"array-contains\" /* Operator.ARRAY_CONTAINS */, e);\n  }\n  matches(t) {\n    const e = t.data.field(this.field);\n    return isArray(e) && __PRIVATE_arrayValueContains(e.arrayValue, this.value);\n  }\n}\n\n/** A Filter that implements the IN operator. */\nclass __PRIVATE_InFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"in\" /* Operator.IN */, e);\n  }\n  matches(t) {\n    const e = t.data.field(this.field);\n    return null !== e && __PRIVATE_arrayValueContains(this.value.arrayValue, e);\n  }\n}\n\n/** A Filter that implements the not-in operator. */\nclass __PRIVATE_NotInFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"not-in\" /* Operator.NOT_IN */, e);\n  }\n  matches(t) {\n    if (__PRIVATE_arrayValueContains(this.value.arrayValue, {\n      nullValue: \"NULL_VALUE\"\n    })) return !1;\n    const e = t.data.field(this.field);\n    return null !== e && !__PRIVATE_arrayValueContains(this.value.arrayValue, e);\n  }\n}\n\n/** A Filter that implements the array-contains-any operator. */\nclass __PRIVATE_ArrayContainsAnyFilter extends FieldFilter {\n  constructor(t, e) {\n    super(t, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, e);\n  }\n  matches(t) {\n    const e = t.data.field(this.field);\n    return !(!isArray(e) || !e.arrayValue.values) && e.arrayValue.values.some(t => __PRIVATE_arrayValueContains(this.value.arrayValue, t));\n  }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\nclass OrderBy {\n  constructor(t, e = \"asc\" /* Direction.ASCENDING */) {\n    this.field = t, this.dir = e;\n  }\n}\nfunction __PRIVATE_orderByEquals(t, e) {\n  return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\nclass SnapshotVersion {\n  constructor(t) {\n    this.timestamp = t;\n  }\n  static fromTimestamp(t) {\n    return new SnapshotVersion(t);\n  }\n  static min() {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n  static max() {\n    return new SnapshotVersion(new Timestamp(253402300799, 999999999));\n  }\n  compareTo(t) {\n    return this.timestamp._compareTo(t.timestamp);\n  }\n  isEqual(t) {\n    return this.timestamp.isEqual(t.timestamp);\n  }\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds() {\n    // Convert to microseconds.\n    return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n  }\n  toString() {\n    return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n  }\n  toTimestamp() {\n    return this.timestamp;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass SortedMap {\n  constructor(t, e) {\n    this.comparator = t, this.root = e || LLRBNode.EMPTY;\n  }\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(t, e) {\n    return new SortedMap(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  // Returns a copy of the map, with the specified key removed.\n  remove(t) {\n    return new SortedMap(this.comparator, this.root.remove(t, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  // Returns the value of the node with the given key, or null.\n  get(t) {\n    let e = this.root;\n    for (; !e.isEmpty();) {\n      const r = this.comparator(t, e.key);\n      if (0 === r) return e.value;\n      r < 0 ? e = e.left : r > 0 && (e = e.right);\n    }\n    return null;\n  }\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(t) {\n    // Number of nodes that were pruned when descending right\n    let e = 0,\n      r = this.root;\n    for (; !r.isEmpty();) {\n      const n = this.comparator(t, r.key);\n      if (0 === n) return e + r.left.size;\n      n < 0 ? r = r.left : (\n      // Count all nodes left of the node plus the node itself\n      e += r.left.size + 1, r = r.right);\n    }\n    // Node not found\n    return -1;\n  }\n  isEmpty() {\n    return this.root.isEmpty();\n  }\n  // Returns the total number of nodes in the map.\n  get size() {\n    return this.root.size;\n  }\n  // Returns the minimum key in the map.\n  minKey() {\n    return this.root.minKey();\n  }\n  // Returns the maximum key in the map.\n  maxKey() {\n    return this.root.maxKey();\n  }\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal(t) {\n    return this.root.inorderTraversal(t);\n  }\n  forEach(t) {\n    this.inorderTraversal((e, r) => (t(e, r), !1));\n  }\n  toString() {\n    const t = [];\n    return this.inorderTraversal((e, r) => (t.push(`${e}:${r}`), !1)), `{${t.join(\", \")}}`;\n  }\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal(t) {\n    return this.root.reverseTraversal(t);\n  }\n  // Returns an iterator over the SortedMap.\n  getIterator() {\n    return new SortedMapIterator(this.root, null, this.comparator, !1);\n  }\n  getIteratorFrom(t) {\n    return new SortedMapIterator(this.root, t, this.comparator, !1);\n  }\n  getReverseIterator() {\n    return new SortedMapIterator(this.root, null, this.comparator, !0);\n  }\n  getReverseIteratorFrom(t) {\n    return new SortedMapIterator(this.root, t, this.comparator, !0);\n  }\n}\n\n// end SortedMap\n// An iterator over an LLRBNode.\nclass SortedMapIterator {\n  constructor(t, e, r, n) {\n    this.isReverse = n, this.nodeStack = [];\n    let i = 1;\n    for (; !t.isEmpty();) if (i = e ? r(t.key, e) : 1,\n    // flip the comparison if we're going in reverse\n    e && n && (i *= -1), i < 0)\n      // This node is less than our start key. ignore it\n      t = this.isReverse ? t.left : t.right;else {\n      if (0 === i) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(t);\n        break;\n      }\n      // This node is greater than our start key, add it to the stack and move\n      // to the next one\n      this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n    }\n  }\n  getNext() {\n    let t = this.nodeStack.pop();\n    const e = {\n      key: t.key,\n      value: t.value\n    };\n    if (this.isReverse) for (t = t.left; !t.isEmpty();) this.nodeStack.push(t), t = t.right;else for (t = t.right; !t.isEmpty();) this.nodeStack.push(t), t = t.left;\n    return e;\n  }\n  hasNext() {\n    return this.nodeStack.length > 0;\n  }\n  peek() {\n    if (0 === this.nodeStack.length) return null;\n    const t = this.nodeStack[this.nodeStack.length - 1];\n    return {\n      key: t.key,\n      value: t.value\n    };\n  }\n}\n\n// end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass LLRBNode {\n  constructor(t, e, r, n, i) {\n    this.key = t, this.value = e, this.color = null != r ? r : LLRBNode.RED, this.left = null != n ? n : LLRBNode.EMPTY, this.right = null != i ? i : LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;\n  }\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(t, e, r, n, i) {\n    return new LLRBNode(null != t ? t : this.key, null != e ? e : this.value, null != r ? r : this.color, null != n ? n : this.left, null != i ? i : this.right);\n  }\n  isEmpty() {\n    return !1;\n  }\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal(t) {\n    return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n  }\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal(t) {\n    return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n  }\n  // Returns the minimum node in the tree.\n  min() {\n    return this.left.isEmpty() ? this : this.left.min();\n  }\n  // Returns the maximum key in the tree.\n  minKey() {\n    return this.min().key;\n  }\n  // Returns the maximum key in the tree.\n  maxKey() {\n    return this.right.isEmpty() ? this.key : this.right.maxKey();\n  }\n  // Returns new tree, with the key/value added.\n  insert(t, e, r) {\n    let n = this;\n    const i = r(t, n.key);\n    return n = i < 0 ? n.copy(null, null, null, n.left.insert(t, e, r), null) : 0 === i ? n.copy(null, e, null, null, null) : n.copy(null, null, null, null, n.right.insert(t, e, r)), n.fixUp();\n  }\n  removeMin() {\n    if (this.left.isEmpty()) return LLRBNode.EMPTY;\n    let t = this;\n    return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), t.fixUp();\n  }\n  // Returns new tree, with the specified item removed.\n  remove(t, e) {\n    let r,\n      n = this;\n    if (e(t, n.key) < 0) n.left.isEmpty() || n.left.isRed() || n.left.left.isRed() || (n = n.moveRedLeft()), n = n.copy(null, null, null, n.left.remove(t, e), null);else {\n      if (n.left.isRed() && (n = n.rotateRight()), n.right.isEmpty() || n.right.isRed() || n.right.left.isRed() || (n = n.moveRedRight()), 0 === e(t, n.key)) {\n        if (n.right.isEmpty()) return LLRBNode.EMPTY;\n        r = n.right.min(), n = n.copy(r.key, r.value, null, null, n.right.removeMin());\n      }\n      n = n.copy(null, null, null, null, n.right.remove(t, e));\n    }\n    return n.fixUp();\n  }\n  isRed() {\n    return this.color;\n  }\n  // Returns new tree after performing any needed rotations.\n  fixUp() {\n    let t = this;\n    return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n  }\n  moveRedLeft() {\n    let t = this.colorFlip();\n    return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), t = t.rotateLeft(), t = t.colorFlip()), t;\n  }\n  moveRedRight() {\n    let t = this.colorFlip();\n    return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n  }\n  rotateLeft() {\n    const t = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, t, null);\n  }\n  rotateRight() {\n    const t = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, t);\n  }\n  colorFlip() {\n    const t = this.left.copy(null, null, !this.left.color, null, null),\n      e = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, t, e);\n  }\n  // For testing.\n  checkMaxDepth() {\n    const t = this.check();\n    return Math.pow(2, t) <= this.size + 1;\n  }\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  check() {\n    if (this.isRed() && this.left.isRed()) throw fail();\n    if (this.right.isRed()) throw fail();\n    const t = this.left.check();\n    if (t !== this.right.check()) throw fail();\n    return t + (this.isRed() ? 0 : 1);\n  }\n}\n\n// end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nLLRBNode.EMPTY = null, LLRBNode.RED = !0, LLRBNode.BLACK = !1;\n\n// end LLRBEmptyNode\nLLRBNode.EMPTY = new\n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass LLRBEmptyNode {\n  constructor() {\n    this.size = 0;\n  }\n  get key() {\n    throw fail();\n  }\n  get value() {\n    throw fail();\n  }\n  get color() {\n    throw fail();\n  }\n  get left() {\n    throw fail();\n  }\n  get right() {\n    throw fail();\n  }\n  // Returns a copy of the current node.\n  copy(t, e, r, n, i) {\n    return this;\n  }\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(t, e, r) {\n    return new LLRBNode(t, e);\n  }\n  // Returns a copy of the tree, with the specified key removed.\n  remove(t, e) {\n    return this;\n  }\n  isEmpty() {\n    return !0;\n  }\n  inorderTraversal(t) {\n    return !1;\n  }\n  reverseTraversal(t) {\n    return !1;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  isRed() {\n    return !1;\n  }\n  // For testing.\n  checkMaxDepth() {\n    return !0;\n  }\n  check() {\n    return 0;\n  }\n}();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass SortedSet {\n  constructor(t) {\n    this.comparator = t, this.data = new SortedMap(this.comparator);\n  }\n  has(t) {\n    return null !== this.data.get(t);\n  }\n  first() {\n    return this.data.minKey();\n  }\n  last() {\n    return this.data.maxKey();\n  }\n  get size() {\n    return this.data.size;\n  }\n  indexOf(t) {\n    return this.data.indexOf(t);\n  }\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(t) {\n    this.data.inorderTraversal((e, r) => (t(e), !1));\n  }\n  /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\n  forEachInRange(t, e) {\n    const r = this.data.getIteratorFrom(t[0]);\n    for (; r.hasNext();) {\n      const n = r.getNext();\n      if (this.comparator(n.key, t[1]) >= 0) return;\n      e(n.key);\n    }\n  }\n  /**\n   * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n   */\n  forEachWhile(t, e) {\n    let r;\n    for (r = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); r.hasNext();) {\n      if (!t(r.getNext().key)) return;\n    }\n  }\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(t) {\n    const e = this.data.getIteratorFrom(t);\n    return e.hasNext() ? e.getNext().key : null;\n  }\n  getIterator() {\n    return new SortedSetIterator(this.data.getIterator());\n  }\n  getIteratorFrom(t) {\n    return new SortedSetIterator(this.data.getIteratorFrom(t));\n  }\n  /** Inserts or updates an element */\n  add(t) {\n    return this.copy(this.data.remove(t).insert(t, !0));\n  }\n  /** Deletes an element */\n  delete(t) {\n    return this.has(t) ? this.copy(this.data.remove(t)) : this;\n  }\n  isEmpty() {\n    return this.data.isEmpty();\n  }\n  unionWith(t) {\n    let e = this;\n    // Make sure `result` always refers to the larger one of the two sets.\n    return e.size < t.size && (e = t, t = this), t.forEach(t => {\n      e = e.add(t);\n    }), e;\n  }\n  isEqual(t) {\n    if (!(t instanceof SortedSet)) return !1;\n    if (this.size !== t.size) return !1;\n    const e = this.data.getIterator(),\n      r = t.data.getIterator();\n    for (; e.hasNext();) {\n      const t = e.getNext().key,\n        n = r.getNext().key;\n      if (0 !== this.comparator(t, n)) return !1;\n    }\n    return !0;\n  }\n  toArray() {\n    const t = [];\n    return this.forEach(e => {\n      t.push(e);\n    }), t;\n  }\n  toString() {\n    const t = [];\n    return this.forEach(e => t.push(e)), \"SortedSet(\" + t.toString() + \")\";\n  }\n  copy(t) {\n    const e = new SortedSet(this.comparator);\n    return e.data = t, e;\n  }\n}\nclass SortedSetIterator {\n  constructor(t) {\n    this.iter = t;\n  }\n  getNext() {\n    return this.iter.getNext().key;\n  }\n  hasNext() {\n    return this.iter.hasNext();\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\nclass FieldMask {\n  constructor(t) {\n    this.fields = t,\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    t.sort(FieldPath$1.comparator);\n  }\n  static empty() {\n    return new FieldMask([]);\n  }\n  /**\n   * Returns a new FieldMask object that is the result of adding all the given\n   * fields paths to this field mask.\n   */\n  unionWith(t) {\n    let e = new SortedSet(FieldPath$1.comparator);\n    for (const t of this.fields) e = e.add(t);\n    for (const r of t) e = e.add(r);\n    return new FieldMask(e.toArray());\n  }\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n  covers(t) {\n    for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n    return !1;\n  }\n  isEqual(t) {\n    return __PRIVATE_arrayEquals(this.fields, t.fields, (t, e) => t.isEqual(e));\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\nclass ObjectValue {\n  constructor(t) {\n    this.value = t;\n  }\n  static empty() {\n    return new ObjectValue({\n      mapValue: {}\n    });\n  }\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path - the path to search\n   * @returns The value at the path or null if the path is not set.\n   */\n  field(t) {\n    if (t.isEmpty()) return this.value;\n    {\n      let e = this.value;\n      for (let r = 0; r < t.length - 1; ++r) if (e = (e.mapValue.fields || {})[t.get(r)], !__PRIVATE_isMapValue(e)) return null;\n      return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n    }\n  }\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path - The field path to set.\n   * @param value - The value to set.\n   */\n  set(t, e) {\n    this.getFieldsMap(t.popLast())[t.lastSegment()] = __PRIVATE_deepClone(e);\n  }\n  /**\n   * Sets the provided fields to the provided values.\n   *\n   * @param data - A map of fields to values (or null for deletes).\n   */\n  setAll(t) {\n    let e = FieldPath$1.emptyPath(),\n      r = {},\n      n = [];\n    t.forEach((t, i) => {\n      if (!e.isImmediateParentOf(i)) {\n        // Insert the accumulated changes at this parent location\n        const t = this.getFieldsMap(e);\n        this.applyChanges(t, r, n), r = {}, n = [], e = i.popLast();\n      }\n      t ? r[i.lastSegment()] = __PRIVATE_deepClone(t) : n.push(i.lastSegment());\n    });\n    const i = this.getFieldsMap(e);\n    this.applyChanges(i, r, n);\n  }\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path - The field path to remove.\n   */\n  delete(t) {\n    const e = this.field(t.popLast());\n    __PRIVATE_isMapValue(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n  }\n  isEqual(t) {\n    return __PRIVATE_valueEquals(this.value, t.value);\n  }\n  /**\n   * Returns the map that contains the leaf element of `path`. If the parent\n   * entry does not yet exist, or if it is not a map, a new map will be created.\n   */\n  getFieldsMap(t) {\n    let e = this.value;\n    e.mapValue.fields || (e.mapValue = {\n      fields: {}\n    });\n    for (let r = 0; r < t.length; ++r) {\n      let n = e.mapValue.fields[t.get(r)];\n      __PRIVATE_isMapValue(n) && n.mapValue.fields || (n = {\n        mapValue: {\n          fields: {}\n        }\n      }, e.mapValue.fields[t.get(r)] = n), e = n;\n    }\n    return e.mapValue.fields;\n  }\n  /**\n   * Modifies `fieldsMap` by adding, replacing or deleting the specified\n   * entries.\n   */\n  applyChanges(t, e, r) {\n    forEach(e, (e, r) => t[e] = r);\n    for (const e of r) delete t[e];\n  }\n  clone() {\n    return new ObjectValue(__PRIVATE_deepClone(this.value));\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */\nclass MutableDocument {\n  constructor(t, e, r, n, i, s, o) {\n    this.key = t, this.documentType = e, this.version = r, this.readTime = n, this.createTime = i, this.data = s, this.documentState = o;\n  }\n  /**\n   * Creates a document with no known version or data, but which can serve as\n   * base document for mutations.\n   */\n  static newInvalidDocument(t) {\n    return new MutableDocument(t, 0 /* DocumentType.INVALID */, /* version */SnapshotVersion.min(), /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n  }\n  /**\n   * Creates a new document that is known to exist with the given data at the\n   * given version.\n   */\n  static newFoundDocument(t, e, r, n) {\n    return new MutableDocument(t, 1 /* DocumentType.FOUND_DOCUMENT */, /* version */e, /* readTime */SnapshotVersion.min(), /* createTime */r, n, 0 /* DocumentState.SYNCED */);\n  }\n  /** Creates a new document that is known to not exist at the given version. */\n  static newNoDocument(t, e) {\n    return new MutableDocument(t, 2 /* DocumentType.NO_DOCUMENT */, /* version */e, /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n  }\n  /**\n   * Creates a new document that is known to exist at the given version but\n   * whose data is not known (e.g. a document that was updated without a known\n   * base document).\n   */\n  static newUnknownDocument(t, e) {\n    return new MutableDocument(t, 3 /* DocumentType.UNKNOWN_DOCUMENT */, /* version */e, /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\n  }\n  /**\n   * Changes the document type to indicate that it exists and that its version\n   * and data are known.\n   */\n  convertToFoundDocument(t, e) {\n    // If a document is switching state from being an invalid or deleted\n    // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n    // update from Watch or due to applying a local set mutation on top\n    // of a deleted document, our best guess about its createTime would be the\n    // version at which the document transitioned to a FOUND_DOCUMENT.\n    return !this.createTime.isEqual(SnapshotVersion.min()) || 2 /* DocumentType.NO_DOCUMENT */ !== this.documentType && 0 /* DocumentType.INVALID */ !== this.documentType || (this.createTime = t), this.version = t, this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */, this.data = e, this.documentState = 0 /* DocumentState.SYNCED */, this;\n  }\n  /**\n   * Changes the document type to indicate that it doesn't exist at the given\n   * version.\n   */\n  convertToNoDocument(t) {\n    return this.version = t, this.documentType = 2 /* DocumentType.NO_DOCUMENT */, this.data = ObjectValue.empty(), this.documentState = 0 /* DocumentState.SYNCED */, this;\n  }\n  /**\n   * Changes the document type to indicate that it exists at a given version but\n   * that its data is not known (e.g. a document that was updated without a known\n   * base document).\n   */\n  convertToUnknownDocument(t) {\n    return this.version = t, this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */, this.data = ObjectValue.empty(), this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */, this;\n  }\n  setHasCommittedMutations() {\n    return this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */, this;\n  }\n  setHasLocalMutations() {\n    return this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */, this.version = SnapshotVersion.min(), this;\n  }\n  setReadTime(t) {\n    return this.readTime = t, this;\n  }\n  get hasLocalMutations() {\n    return 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ === this.documentState;\n  }\n  get hasCommittedMutations() {\n    return 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ === this.documentState;\n  }\n  get hasPendingWrites() {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n  isValidDocument() {\n    return 0 /* DocumentType.INVALID */ !== this.documentType;\n  }\n  isFoundDocument() {\n    return 1 /* DocumentType.FOUND_DOCUMENT */ === this.documentType;\n  }\n  isNoDocument() {\n    return 2 /* DocumentType.NO_DOCUMENT */ === this.documentType;\n  }\n  isUnknownDocument() {\n    return 3 /* DocumentType.UNKNOWN_DOCUMENT */ === this.documentType;\n  }\n  isEqual(t) {\n    return t instanceof MutableDocument && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n  }\n  mutableCopy() {\n    return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n  }\n  toString() {\n    return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n  }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass __PRIVATE_TargetImpl {\n  constructor(t, e = null, r = [], n = [], i = null, s = null, o = null) {\n    this.path = t, this.collectionGroup = e, this.orderBy = r, this.filters = n, this.limit = i, this.startAt = s, this.endAt = o, this.C = null;\n  }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\nfunction __PRIVATE_newTarget(t, e = null, r = [], n = [], i = null, s = null, o = null) {\n  return new __PRIVATE_TargetImpl(t, e, r, n, i, s, o);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nclass __PRIVATE_QueryImpl {\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(t, e = null, r = [], n = [], i = null, s = \"F\" /* LimitType.First */, o = null, a = null) {\n    this.path = t, this.collectionGroup = e, this.explicitOrderBy = r, this.filters = n, this.limit = i, this.limitType = s, this.startAt = o, this.endAt = a, this.S = null,\n    // The corresponding `Target` of this `Query` instance, for use with\n    // non-aggregate queries.\n    this.N = null,\n    // The corresponding `Target` of this `Query` instance, for use with\n    // aggregate queries. Unlike targets for non-aggregate queries,\n    // aggregate query targets do not contain normalized order-bys, they only\n    // contain explicit order-bys.\n    this.O = null, this.startAt, this.endAt;\n  }\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction __PRIVATE_isCollectionGroupQuery(t) {\n  return null !== t.collectionGroup;\n}\n\n/**\n * Returns the normalized order-by constraint that is used to execute the Query,\n * which can be different from the order-by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`). The normalized order-by\n * includes implicit order-bys in addition to the explicit user provided\n * order-bys.\n */\nfunction __PRIVATE_queryNormalizedOrderBy(t) {\n  const e = __PRIVATE_debugCast(t);\n  if (null === e.S) {\n    e.S = [];\n    const t = new Set();\n    // Any explicit order by fields should be added as is.\n    for (const r of e.explicitOrderBy) e.S.push(r), t.add(r.field.canonicalString());\n    // The order of the implicit ordering always matches the last explicit order by.\n    const r = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* Direction.ASCENDING */,\n      n =\n      // Returns the sorted set of inequality filter fields used in this query.\n      function __PRIVATE_getInequalityFilterFields(t) {\n        let e = new SortedSet(FieldPath$1.comparator);\n        return t.filters.forEach(t => {\n          t.getFlattenedFilters().forEach(t => {\n            t.isInequality() && (e = e.add(t.field));\n          });\n        }), e;\n      }\n      /**\n      * Creates a new Query for a collection group query that matches all documents\n      * within the provided collection group.\n      */(e);\n    // Any inequality fields not explicitly ordered should be implicitly ordered in a lexicographical\n    // order. When there are multiple inequality filters on the same field, the field should be added\n    // only once.\n    // Note: `SortedSet<FieldPath>` sorts the key field before other fields. However, we want the key\n    // field to be sorted last.\n    n.forEach(n => {\n      t.has(n.canonicalString()) || n.isKeyField() || e.S.push(new OrderBy(n, r));\n    }),\n    // Add the document key field to the last if it is not explicitly ordered.\n    t.has(FieldPath$1.keyField().canonicalString()) || e.S.push(new OrderBy(FieldPath$1.keyField(), r));\n  }\n  return e.S;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation.\n */\nfunction __PRIVATE_queryToTarget(t) {\n  const e = __PRIVATE_debugCast(t);\n  return e.N || (e.N = __PRIVATE__queryToTarget(e, __PRIVATE_queryNormalizedOrderBy(t))), e.N;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation,\n * for use within an aggregate query. Unlike targets for non-aggregate queries,\n * aggregate query targets do not contain normalized order-bys, they only\n * contain explicit order-bys.\n */\nfunction __PRIVATE__queryToTarget(t, e) {\n  if (\"F\" /* LimitType.First */ === t.limitType) return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, t.startAt, t.endAt);\n  {\n    // Flip the orderBy directions since we want the last results\n    e = e.map(t => {\n      const e = \"desc\" /* Direction.DESCENDING */ === t.dir ? \"asc\" /* Direction.ASCENDING */ : \"desc\" /* Direction.DESCENDING */;\n      return new OrderBy(t.field, e);\n    });\n    // We need to swap the cursors to match the now-flipped query ordering.\n    const r = t.endAt ? new Bound(t.endAt.position, t.endAt.inclusive) : null,\n      n = t.startAt ? new Bound(t.startAt.position, t.startAt.inclusive) : null;\n    // Now return as a LimitType.First query.\n    return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, r, n);\n  }\n}\nfunction __PRIVATE_queryWithAddedFilter(t, e) {\n  const r = t.filters.concat([e]);\n  return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), r, t.limit, t.limitType, t.startAt, t.endAt);\n}\nfunction __PRIVATE_queryEquals(t, e) {\n  return function __PRIVATE_targetEquals(t, e) {\n    if (t.limit !== e.limit) return !1;\n    if (t.orderBy.length !== e.orderBy.length) return !1;\n    for (let r = 0; r < t.orderBy.length; r++) if (!__PRIVATE_orderByEquals(t.orderBy[r], e.orderBy[r])) return !1;\n    if (t.filters.length !== e.filters.length) return !1;\n    for (let r = 0; r < t.filters.length; r++) if (!__PRIVATE_filterEquals(t.filters[r], e.filters[r])) return !1;\n    return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!__PRIVATE_boundEquals(t.startAt, e.startAt) && __PRIVATE_boundEquals(t.endAt, e.endAt);\n  }(__PRIVATE_queryToTarget(t), __PRIVATE_queryToTarget(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction toNumber(t, e) {\n  return function isSafeInteger(t) {\n    return \"number\" == typeof t && Number.isInteger(t) && !__PRIVATE_isNegativeZero(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n  }(e) ?\n  /**\n  * Returns an IntegerValue for `value`.\n  */\n  function __PRIVATE_toInteger(t) {\n    return {\n      integerValue: \"\" + t\n    };\n  }(e) : function __PRIVATE_toDouble(t, e) {\n    if (t.useProto3Json) {\n      if (isNaN(e)) return {\n        doubleValue: \"NaN\"\n      };\n      if (e === 1 / 0) return {\n        doubleValue: \"Infinity\"\n      };\n      if (e === -1 / 0) return {\n        doubleValue: \"-Infinity\"\n      };\n    }\n    return {\n      doubleValue: __PRIVATE_isNegativeZero(e) ? \"-0\" : e\n    };\n  }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */\nclass TransformOperation {\n  constructor() {\n    // Make sure that the structural type of `TransformOperation` is unique.\n    // See https://github.com/microsoft/TypeScript/issues/5451\n    this._ = void 0;\n  }\n}\n\n/** Transforms a value into a server-generated timestamp. */\nclass __PRIVATE_ServerTimestampTransform extends TransformOperation {}\n\n/** Transforms an array value via a union operation. */\nclass __PRIVATE_ArrayUnionTransformOperation extends TransformOperation {\n  constructor(t) {\n    super(), this.elements = t;\n  }\n}\n\n/** Transforms an array value via a remove operation. */\nclass __PRIVATE_ArrayRemoveTransformOperation extends TransformOperation {\n  constructor(t) {\n    super(), this.elements = t;\n  }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\nclass __PRIVATE_NumericIncrementTransformOperation extends TransformOperation {\n  constructor(t, e) {\n    super(), this.serializer = t, this.q = e;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */\nclass FieldTransform {\n  constructor(t, e) {\n    this.field = t, this.transform = e;\n  }\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\nclass Precondition {\n  constructor(t, e) {\n    this.updateTime = t, this.exists = e;\n  }\n  /** Creates a new empty Precondition. */\n  static none() {\n    return new Precondition();\n  }\n  /** Creates a new Precondition with an exists flag. */\n  static exists(t) {\n    return new Precondition(void 0, t);\n  }\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(t) {\n    return new Precondition(t);\n  }\n  /** Returns whether this Precondition is empty. */\n  get isNone() {\n    return void 0 === this.updateTime && void 0 === this.exists;\n  }\n  isEqual(t) {\n    return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n  }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */\nclass Mutation {}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\nclass __PRIVATE_SetMutation extends Mutation {\n  constructor(t, e, r, n = []) {\n    super(), this.key = t, this.value = e, this.precondition = r, this.fieldTransforms = n, this.type = 0 /* MutationType.Set */;\n  }\n  getFieldMask() {\n    return null;\n  }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\nclass __PRIVATE_PatchMutation extends Mutation {\n  constructor(t, e, r, n, i = []) {\n    super(), this.key = t, this.data = e, this.fieldMask = r, this.precondition = n, this.fieldTransforms = i, this.type = 1 /* MutationType.Patch */;\n  }\n  getFieldMask() {\n    return this.fieldMask;\n  }\n}\n\n/** A mutation that deletes the document at the given key. */\nclass __PRIVATE_DeleteMutation extends Mutation {\n  constructor(t, e) {\n    super(), this.key = t, this.precondition = e, this.type = 2 /* MutationType.Delete */, this.fieldTransforms = [];\n  }\n  getFieldMask() {\n    return null;\n  }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\nclass __PRIVATE_VerifyMutation extends Mutation {\n  constructor(t, e) {\n    super(), this.key = t, this.precondition = e, this.type = 3 /* MutationType.Verify */, this.fieldTransforms = [];\n  }\n  getFieldMask() {\n    return null;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst L = (() => {\n    const t = {\n      asc: \"ASCENDING\",\n      desc: \"DESCENDING\"\n    };\n    return t;\n  })(),\n  M = (() => {\n    const t = {\n      \"<\": \"LESS_THAN\",\n      \"<=\": \"LESS_THAN_OR_EQUAL\",\n      \">\": \"GREATER_THAN\",\n      \">=\": \"GREATER_THAN_OR_EQUAL\",\n      \"==\": \"EQUAL\",\n      \"!=\": \"NOT_EQUAL\",\n      \"array-contains\": \"ARRAY_CONTAINS\",\n      in: \"IN\",\n      \"not-in\": \"NOT_IN\",\n      \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n  })(),\n  x = (() => {\n    const t = {\n      and: \"AND\",\n      or: \"OR\"\n    };\n    return t;\n  })();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass JsonProtoSerializer {\n  constructor(t, e) {\n    this.databaseId = t, this.useProto3Json = e;\n  }\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction toTimestamp(t, e) {\n  if (t.useProto3Json) {\n    return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n  }\n  return {\n    seconds: \"\" + e.seconds,\n    nanos: e.nanoseconds\n  };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction __PRIVATE_toBytes(t, e) {\n  return t.useProto3Json ? e.toBase64() : e.toUint8Array();\n}\nfunction __PRIVATE_toVersion(t, e) {\n  return toTimestamp(t, e.toTimestamp());\n}\nfunction __PRIVATE_fromVersion(t) {\n  return __PRIVATE_hardAssert(!!t), SnapshotVersion.fromTimestamp(function fromTimestamp(t) {\n    const e = __PRIVATE_normalizeTimestamp(t);\n    return new Timestamp(e.seconds, e.nanos);\n  }(t));\n}\nfunction __PRIVATE_toResourceName(t, e) {\n  return __PRIVATE_toResourcePath(t, e).canonicalString();\n}\nfunction __PRIVATE_toResourcePath(t, e) {\n  const r = function __PRIVATE_fullyQualifiedPrefixPath(t) {\n    return new ResourcePath([\"projects\", t.projectId, \"databases\", t.database]);\n  }(t).child(\"documents\");\n  return void 0 === e ? r : r.child(e);\n}\nfunction __PRIVATE_toName(t, e) {\n  return __PRIVATE_toResourceName(t.databaseId, e.path);\n}\nfunction fromName(t, e) {\n  const r = function __PRIVATE_fromResourceName(t) {\n    const e = ResourcePath.fromString(t);\n    return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(e)), e;\n  }(e);\n  if (r.get(1) !== t.databaseId.projectId) throw new FirestoreError(T, \"Tried to deserialize key from different project: \" + r.get(1) + \" vs \" + t.databaseId.projectId);\n  if (r.get(3) !== t.databaseId.database) throw new FirestoreError(T, \"Tried to deserialize key from different database: \" + r.get(3) + \" vs \" + t.databaseId.database);\n  return new DocumentKey(function __PRIVATE_extractLocalPathFromResourceName(t) {\n    return __PRIVATE_hardAssert(t.length > 4 && \"documents\" === t.get(4)), t.popFirst(5);\n  }\n  /** Creates a Document proto from key and fields (but no create/update time) */(r));\n}\nfunction __PRIVATE_toMutationDocument(t, e, r) {\n  return {\n    name: __PRIVATE_toName(t, e),\n    fields: r.value.mapValue.fields\n  };\n}\nfunction __PRIVATE_fromBatchGetDocumentsResponse(t, e) {\n  return \"found\" in e ? function __PRIVATE_fromFound(t, e) {\n    __PRIVATE_hardAssert(!!e.found), e.found.name, e.found.updateTime;\n    const r = fromName(t, e.found.name),\n      n = __PRIVATE_fromVersion(e.found.updateTime),\n      i = e.found.createTime ? __PRIVATE_fromVersion(e.found.createTime) : SnapshotVersion.min(),\n      s = new ObjectValue({\n        mapValue: {\n          fields: e.found.fields\n        }\n      });\n    return MutableDocument.newFoundDocument(r, n, i, s);\n  }(t, e) : \"missing\" in e ? function __PRIVATE_fromMissing(t, e) {\n    __PRIVATE_hardAssert(!!e.missing), __PRIVATE_hardAssert(!!e.readTime);\n    const r = fromName(t, e.missing),\n      n = __PRIVATE_fromVersion(e.readTime);\n    return MutableDocument.newNoDocument(r, n);\n  }(t, e) : fail();\n}\nfunction toMutation(t, e) {\n  let r;\n  if (e instanceof __PRIVATE_SetMutation) r = {\n    update: __PRIVATE_toMutationDocument(t, e.key, e.value)\n  };else if (e instanceof __PRIVATE_DeleteMutation) r = {\n    delete: __PRIVATE_toName(t, e.key)\n  };else if (e instanceof __PRIVATE_PatchMutation) r = {\n    update: __PRIVATE_toMutationDocument(t, e.key, e.data),\n    updateMask: __PRIVATE_toDocumentMask(e.fieldMask)\n  };else {\n    if (!(e instanceof __PRIVATE_VerifyMutation)) return fail();\n    r = {\n      verify: __PRIVATE_toName(t, e.key)\n    };\n  }\n  return e.fieldTransforms.length > 0 && (r.updateTransforms = e.fieldTransforms.map(t => function __PRIVATE_toFieldTransform(t, e) {\n    const r = e.transform;\n    if (r instanceof __PRIVATE_ServerTimestampTransform) return {\n      fieldPath: e.field.canonicalString(),\n      setToServerValue: \"REQUEST_TIME\"\n    };\n    if (r instanceof __PRIVATE_ArrayUnionTransformOperation) return {\n      fieldPath: e.field.canonicalString(),\n      appendMissingElements: {\n        values: r.elements\n      }\n    };\n    if (r instanceof __PRIVATE_ArrayRemoveTransformOperation) return {\n      fieldPath: e.field.canonicalString(),\n      removeAllFromArray: {\n        values: r.elements\n      }\n    };\n    if (r instanceof __PRIVATE_NumericIncrementTransformOperation) return {\n      fieldPath: e.field.canonicalString(),\n      increment: r.q\n    };\n    throw fail();\n  }(0, t))), e.precondition.isNone || (r.currentDocument = function __PRIVATE_toPrecondition(t, e) {\n    return void 0 !== e.updateTime ? {\n      updateTime: __PRIVATE_toVersion(t, e.updateTime)\n    } : void 0 !== e.exists ? {\n      exists: e.exists\n    } : fail();\n  }(t, e.precondition)), r;\n}\nfunction __PRIVATE_toQueryTarget(t, e) {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  const r = {\n      structuredQuery: {}\n    },\n    n = e.path;\n  let i;\n  null !== e.collectionGroup ? (i = n, r.structuredQuery.from = [{\n    collectionId: e.collectionGroup,\n    allDescendants: !0\n  }]) : (i = n.popLast(), r.structuredQuery.from = [{\n    collectionId: n.lastSegment()\n  }]), r.parent = function __PRIVATE_toQueryPath(t, e) {\n    return __PRIVATE_toResourceName(t.databaseId, e);\n  }(t, i);\n  const s = function __PRIVATE_toFilters(t) {\n    if (0 === t.length) return;\n    return __PRIVATE_toFilter(CompositeFilter.create(t, \"and\" /* CompositeOperator.AND */));\n  }(e.filters);\n  s && (r.structuredQuery.where = s);\n  const o = function __PRIVATE_toOrder(t) {\n    if (0 === t.length) return;\n    return t.map(t =>\n    // visible for testing\n    function __PRIVATE_toPropertyOrder(t) {\n      return {\n        field: __PRIVATE_toFieldPathReference(t.field),\n        direction: __PRIVATE_toDirection(t.dir)\n      };\n    }\n    // visible for testing\n    (t));\n  }(e.orderBy);\n  o && (r.structuredQuery.orderBy = o);\n  const a = function __PRIVATE_toInt32Proto(t, e) {\n    return t.useProto3Json || __PRIVATE_isNullOrUndefined(e) ? e : {\n      value: e\n    };\n  }(t, e.limit);\n  return null !== a && (r.structuredQuery.limit = a), e.startAt && (r.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(t) {\n    return {\n      before: t.inclusive,\n      values: t.position\n    };\n  }(e.startAt)), e.endAt && (r.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(t) {\n    return {\n      before: !t.inclusive,\n      values: t.position\n    };\n  }\n  // visible for testing\n  (e.endAt)), {\n    B: r,\n    parent: i\n  };\n}\nfunction __PRIVATE_toDirection(t) {\n  return L[t];\n}\n\n// visible for testing\nfunction __PRIVATE_toOperatorName(t) {\n  return M[t];\n}\nfunction __PRIVATE_toCompositeOperatorName(t) {\n  return x[t];\n}\nfunction __PRIVATE_toFieldPathReference(t) {\n  return {\n    fieldPath: t.canonicalString()\n  };\n}\nfunction __PRIVATE_toFilter(t) {\n  return t instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(t) {\n    if (\"==\" /* Operator.EQUAL */ === t.op) {\n      if (__PRIVATE_isNanValue(t.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(t.field),\n          op: \"IS_NAN\"\n        }\n      };\n      if (__PRIVATE_isNullValue(t.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(t.field),\n          op: \"IS_NULL\"\n        }\n      };\n    } else if (\"!=\" /* Operator.NOT_EQUAL */ === t.op) {\n      if (__PRIVATE_isNanValue(t.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(t.field),\n          op: \"IS_NOT_NAN\"\n        }\n      };\n      if (__PRIVATE_isNullValue(t.value)) return {\n        unaryFilter: {\n          field: __PRIVATE_toFieldPathReference(t.field),\n          op: \"IS_NOT_NULL\"\n        }\n      };\n    }\n    return {\n      fieldFilter: {\n        field: __PRIVATE_toFieldPathReference(t.field),\n        op: __PRIVATE_toOperatorName(t.op),\n        value: t.value\n      }\n    };\n  }(t) : t instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(t) {\n    const e = t.getFilters().map(t => __PRIVATE_toFilter(t));\n    if (1 === e.length) return e[0];\n    return {\n      compositeFilter: {\n        op: __PRIVATE_toCompositeOperatorName(t.op),\n        filters: e\n      }\n    };\n  }(t) : fail();\n}\nfunction __PRIVATE_toDocumentMask(t) {\n  const e = [];\n  return t.fields.forEach(t => e.push(t.canonicalString())), {\n    fieldPaths: e\n  };\n}\nfunction __PRIVATE_isValidResourceName(t) {\n  // Resource names have at least 4 components (project ID, database ID)\n  return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction __PRIVATE_newSerializer(t) {\n  return new JsonProtoSerializer(t, /* useProto3Json= */!0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass __PRIVATE_ExponentialBackoff {\n  constructor(\n  /**\n   * The AsyncQueue to run backoff operations on.\n   */\n  t,\n  /**\n   * The ID to use when scheduling backoff operations on the AsyncQueue.\n   */\n  e,\n  /**\n   * The initial delay (used as the base delay on the first retry attempt).\n   * Note that jitter will still be applied, so the actual delay could be as\n   * little as 0.5*initialDelayMs.\n   */\n  r = 1e3\n  /**\n   * The multiplier to use to determine the extended base delay after each\n   * attempt.\n   */, n = 1.5\n  /**\n   * The maximum base delay after which no further backoff is performed.\n   * Note that jitter will still be applied, so the actual delay could be as\n   * much as 1.5*maxDelayMs.\n   */, i = 6e4) {\n    this.$ = t, this.timerId = e, this.L = r, this.M = n, this.k = i, this.U = 0, this.j = null, /** The last backoff attempt, as epoch milliseconds. */\n    this.W = Date.now(), this.reset();\n  }\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n  reset() {\n    this.U = 0;\n  }\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n  K() {\n    this.U = this.k;\n  }\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n  G(t) {\n    // Cancel any pending backoff operation.\n    this.cancel();\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const e = Math.floor(this.U + this.H()),\n      r = Math.max(0, Date.now() - this.W),\n      n = Math.max(0, e - r);\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    n > 0 && __PRIVATE_logDebug(\"ExponentialBackoff\", `Backing off for ${n} ms (base delay: ${this.U} ms, delay with jitter: ${e} ms, last attempt: ${r} ms ago)`), this.j = this.$.enqueueAfterDelay(this.timerId, n, () => (this.W = Date.now(), t())),\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.U *= this.M, this.U < this.L && (this.U = this.L), this.U > this.k && (this.U = this.k);\n  }\n  J() {\n    null !== this.j && (this.j.skipDelay(), this.j = null);\n  }\n  cancel() {\n    null !== this.j && (this.j.cancel(), this.j = null);\n  }\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  H() {\n    return (Math.random() - .5) * this.U;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass __PRIVATE_DatastoreImpl extends class Datastore {} {\n  constructor(t, e, r, n) {\n    super(), this.authCredentials = t, this.appCheckCredentials = e, this.connection = r, this.serializer = n, this.Y = !1;\n  }\n  Z() {\n    if (this.Y) throw new FirestoreError(w, \"The client has already been terminated.\");\n  }\n  /** Invokes the provided RPC with auth and AppCheck tokens. */\n  P(t, e, r, n) {\n    return this.Z(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([i, s]) => this.connection.P(t, __PRIVATE_toResourcePath(e, r), n, i, s)).catch(t => {\n      throw \"FirebaseError\" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());\n    });\n  }\n  /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */\n  g(t, e, r, n, i) {\n    return this.Z(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([s, o]) => this.connection.g(t, __PRIVATE_toResourcePath(e, r), n, s, o, i)).catch(t => {\n      throw \"FirebaseError\" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());\n    });\n  }\n  terminate() {\n    this.Y = !0, this.connection.terminate();\n  }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nasync function __PRIVATE_invokeCommitRpc(t, e) {\n  const r = __PRIVATE_debugCast(t),\n    n = {\n      writes: e.map(t => toMutation(r.serializer, t))\n    };\n  await r.P(\"Commit\", r.serializer.databaseId, ResourcePath.emptyPath(), n);\n}\nasync function __PRIVATE_invokeBatchGetDocumentsRpc(t, e) {\n  const r = __PRIVATE_debugCast(t),\n    n = {\n      documents: e.map(t => __PRIVATE_toName(r.serializer, t))\n    },\n    i = await r.g(\"BatchGetDocuments\", r.serializer.databaseId, ResourcePath.emptyPath(), n, e.length),\n    s = new Map();\n  i.forEach(t => {\n    const e = __PRIVATE_fromBatchGetDocumentsResponse(r.serializer, t);\n    s.set(e.key.toString(), e);\n  });\n  const o = [];\n  return e.forEach(t => {\n    const e = s.get(t.toString());\n    __PRIVATE_hardAssert(!!e), o.push(e);\n  }), o;\n}\nasync function __PRIVATE_invokeRunQueryRpc(t, e) {\n  const r = __PRIVATE_debugCast(t),\n    {\n      B: n,\n      parent: i\n    } = __PRIVATE_toQueryTarget(r.serializer, __PRIVATE_queryToTarget(e));\n  return (await r.g(\"RunQuery\", r.serializer.databaseId, i, {\n    structuredQuery: n.structuredQuery\n  })).filter(t => !!t.document).map(t => function __PRIVATE_fromDocument(t, e, r) {\n    const n = fromName(t, e.name),\n      i = __PRIVATE_fromVersion(e.updateTime),\n      s = e.createTime ? __PRIVATE_fromVersion(e.createTime) : SnapshotVersion.min(),\n      o = new ObjectValue({\n        mapValue: {\n          fields: e.fields\n        }\n      }),\n      a = MutableDocument.newFoundDocument(n, i, s, o);\n    return r && a.setHasCommittedMutations(), r ? a.setHasCommittedMutations() : a;\n  }(r.serializer, t.document, void 0));\n}\nasync function __PRIVATE_invokeRunAggregationQueryRpc(t, e, r) {\n  var n;\n  const i = __PRIVATE_debugCast(t),\n    {\n      request: s,\n      X: o,\n      parent: a\n    } = function __PRIVATE_toRunAggregationQueryRequest(t, e, r, n) {\n      const {\n          B: i,\n          parent: s\n        } = __PRIVATE_toQueryTarget(t, e),\n        o = {},\n        a = [];\n      let u = 0;\n      return r.forEach(t => {\n        // Map all client-side aliases to a unique short-form\n        // alias. This avoids issues with client-side aliases that\n        // exceed the 1500-byte string size limit.\n        const e = n ? t.alias : \"aggregate_\" + u++;\n        o[e] = t.alias, \"count\" === t.aggregateType ? a.push({\n          alias: e,\n          count: {}\n        }) : \"avg\" === t.aggregateType ? a.push({\n          alias: e,\n          avg: {\n            field: __PRIVATE_toFieldPathReference(t.fieldPath)\n          }\n        }) : \"sum\" === t.aggregateType && a.push({\n          alias: e,\n          sum: {\n            field: __PRIVATE_toFieldPathReference(t.fieldPath)\n          }\n        });\n      }), {\n        request: {\n          structuredAggregationQuery: {\n            aggregations: a,\n            structuredQuery: i.structuredQuery\n          },\n          parent: i.parent\n        },\n        X: o,\n        parent: s\n      };\n    }(i.serializer, function __PRIVATE_queryToAggregateTarget(t) {\n      const e = __PRIVATE_debugCast(t);\n      return e.O || (\n      // Do not include implicit order-bys for aggregate queries.\n      e.O = __PRIVATE__queryToTarget(e, t.explicitOrderBy)), e.O;\n    }(e), r);\n  i.connection.R || delete s.parent;\n  const u = (await i.g(\"RunAggregationQuery\", i.serializer.databaseId, a, s, /*expectedResponseCount=*/1)).filter(t => !!t.result);\n  // Omit RunAggregationQueryResponse that only contain readTimes.\n  __PRIVATE_hardAssert(1 === u.length);\n  // Remap the short-form aliases that were sent to the server\n  // to the client-side aliases. Users will access the results\n  // using the client-side alias.\n  const _ = null === (n = u[0].result) || void 0 === n ? void 0 : n.aggregateFields;\n  return Object.keys(_).reduce((t, e) => (t[o[e]] = _[e], t), {});\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst k = new Map();\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction __PRIVATE_getDatastore(t) {\n  if (t._terminated) throw new FirestoreError(w, \"The client has already been terminated.\");\n  if (!k.has(t)) {\n    __PRIVATE_logDebug(\"ComponentProvider\", \"Initializing Datastore\");\n    const e = function __PRIVATE_newConnection(t) {\n        return new __PRIVATE_FetchConnection(t, fetch.bind(null));\n      }(function __PRIVATE_makeDatabaseInfo(t, e, r, n) {\n        return new DatabaseInfo(t, e, r, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(n.experimentalLongPollingOptions), n.useFetchStreams);\n      }\n      /**\n      * @license\n      * Copyright 2018 Google LLC\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *   http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */(t._databaseId, t.app.options.appId || \"\", t._persistenceKey, t._freezeSettings())),\n      r = __PRIVATE_newSerializer(t._databaseId),\n      n = function __PRIVATE_newDatastore(t, e, r, n) {\n        return new __PRIVATE_DatastoreImpl(t, e, r, n);\n      }(t._authCredentials, t._appCheckCredentials, e, r);\n    k.set(t, n);\n  }\n  return k.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettingsImpl {\n  constructor(t) {\n    var e, r;\n    if (void 0 === t.host) {\n      if (void 0 !== t.ssl) throw new FirestoreError(T, \"Can't provide ssl option if host option is not set\");\n      this.host = \"firestore.googleapis.com\", this.ssl = true;\n    } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n    if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, this.localCache = t.localCache, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040;else {\n      if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new FirestoreError(T, \"cacheSizeBytes must be at least 1048576\");\n      this.cacheSizeBytes = t.cacheSizeBytes;\n    }\n    !function __PRIVATE_validateIsNotUsedTogether(t, e, r, n) {\n      if (!0 === e && !0 === n) throw new FirestoreError(T, `${t} and ${r} cannot be used together.`);\n    }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : void 0 === t.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true :\n    // For backwards compatibility, coerce the value to boolean even though\n    // the TypeScript compiler has narrowed the type to boolean already.\n    // noinspection PointlessBooleanExpressionJS\n    this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (r = t.experimentalLongPollingOptions) && void 0 !== r ? r : {}), function __PRIVATE_validateLongPollingOptions(t) {\n      if (void 0 !== t.timeoutSeconds) {\n        if (isNaN(t.timeoutSeconds)) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (must not be NaN)`);\n        if (t.timeoutSeconds < 5) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (minimum allowed value is 5)`);\n        if (t.timeoutSeconds > 30) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (maximum allowed value is 30)`);\n      }\n    }\n    /**\n    * @license\n    * Copyright 2020 Google LLC\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *   http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    /**\n    * The Cloud Firestore service interface.\n    *\n    * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n    */(this.experimentalLongPollingOptions), this.useFetchStreams = !!t.useFetchStreams;\n  }\n  isEqual(t) {\n    return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(t, e) {\n      return t.timeoutSeconds === e.timeoutSeconds;\n    }(this.experimentalLongPollingOptions, t.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n  }\n}\nclass Firestore {\n  /** @hideconstructor */\n  constructor(t, e, r, n) {\n    this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = r, this._app = n,\n    /**\n     * Whether it's a Firestore or Firestore Lite instance.\n     */\n    this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new FirestoreSettingsImpl({}), this._settingsFrozen = !1;\n  }\n  /**\n   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n   * instance.\n   */\n  get app() {\n    if (!this._app) throw new FirestoreError(w, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n    return this._app;\n  }\n  get _initialized() {\n    return this._settingsFrozen;\n  }\n  get _terminated() {\n    return void 0 !== this._terminateTask;\n  }\n  _setSettings(t) {\n    if (this._settingsFrozen) throw new FirestoreError(w, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n    this._settings = new FirestoreSettingsImpl(t), void 0 !== t.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(t) {\n      if (!t) return new __PRIVATE_EmptyAuthCredentialsProvider();\n      switch (t.type) {\n        case \"firstParty\":\n          return new __PRIVATE_FirstPartyAuthCredentialsProvider(t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n        case \"provider\":\n          return t.client;\n        default:\n          throw new FirestoreError(T, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n      }\n    }(t.credentials));\n  }\n  _getSettings() {\n    return this._settings;\n  }\n  _freezeSettings() {\n    return this._settingsFrozen = !0, this._settings;\n  }\n  _delete() {\n    return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n  }\n  /** Returns a JSON-serializable representation of this `Firestore` instance. */\n  toJSON() {\n    return {\n      app: this._app,\n      databaseId: this._databaseId,\n      settings: this._settings\n    };\n  }\n  /**\n   * Terminates all components used by this client. Subclasses can override\n   * this method to clean up their own dependencies, but must also call this\n   * method.\n   *\n   * Only ever called once.\n   */\n  _terminate() {\n    return function __PRIVATE_removeComponents(t) {\n      const e = k.get(t);\n      e && (__PRIVATE_logDebug(\"ComponentProvider\", \"Removing Datastore\"), k.delete(t), e.terminate());\n    }(this), Promise.resolve();\n  }\n}\nfunction initializeFirestore(t, e, r) {\n  r || (r = \"(default)\");\n  const n = _getProvider(t, \"firestore/lite\");\n  if (n.isInitialized(r)) throw new FirestoreError(w, \"Firestore can only be initialized once per app.\");\n  return n.initialize({\n    options: e,\n    instanceIdentifier: r\n  });\n}\nfunction getFirestore(e, r) {\n  const n = \"object\" == typeof e ? e : getApp(),\n    i = \"string\" == typeof e ? e : r || \"(default)\",\n    s = _getProvider(n, \"firestore/lite\").getImmediate({\n      identifier: i\n    });\n  if (!s._initialized) {\n    const t = getDefaultEmulatorHostnameAndPort(\"firestore\");\n    t && connectFirestoreEmulator(s, ...t);\n  }\n  return s;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */\nfunction connectFirestoreEmulator(t, e, r, n = {}) {\n  var i;\n  const s = (t = __PRIVATE_cast(t, Firestore))._getSettings(),\n    o = `${e}:${r}`;\n  if (\"firestore.googleapis.com\" !== s.host && s.host !== o && __PRIVATE_logWarn(\"Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.\"), t._setSettings(Object.assign(Object.assign({}, s), {\n    host: o,\n    ssl: !1\n  })), n.mockUserToken) {\n    let e, r;\n    if (\"string\" == typeof n.mockUserToken) e = n.mockUserToken, r = User.MOCK_USER;else {\n      // Let createMockUserToken validate first (catches common mistakes like\n      // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n      e = createMockUserToken(n.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);\n      const s = n.mockUserToken.sub || n.mockUserToken.user_id;\n      if (!s) throw new FirestoreError(T, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n      r = new User(s);\n    }\n    t._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(e, r));\n  }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */\nfunction terminate(t) {\n  return t = __PRIVATE_cast(t, Firestore), _removeServiceInstance(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass AggregateField {\n  /**\n   * Create a new AggregateField<T>\n   * @param aggregateType Specifies the type of aggregation operation to perform.\n   * @param _internalFieldPath Optionally specifies the field that is aggregated.\n   * @internal\n   */\n  constructor(t = \"count\", e) {\n    this._internalFieldPath = e, /** A type string to uniquely identify instances of this class. */\n    this.type = \"AggregateField\", this.aggregateType = t;\n  }\n}\n\n/**\n * The results of executing an aggregation query.\n */\nclass AggregateQuerySnapshot {\n  /** @hideconstructor */\n  constructor(t, e, r) {\n    this._userDataWriter = e, this._data = r, /** A type string to uniquely identify instances of this class. */\n    this.type = \"AggregateQuerySnapshot\", this.query = t;\n  }\n  /**\n   * Returns the results of the aggregations performed over the underlying\n   * query.\n   *\n   * The keys of the returned object will be the same as those of the\n   * `AggregateSpec` object specified to the aggregation method, and the values\n   * will be the corresponding aggregation result.\n   *\n   * @returns The results of the aggregations performed over the underlying\n   * query.\n   */\n  data() {\n    return this._userDataWriter.convertObjectMap(this._data);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */\nclass Query {\n  // This is the lite version of the Query class in the main SDK.\n  /** @hideconstructor protected */\n  constructor(t,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  e, r) {\n    this.converter = e, this._query = r, /** The type of this Firestore reference. */\n    this.type = \"query\", this.firestore = t;\n  }\n  withConverter(t) {\n    return new Query(this.firestore, t, this._query);\n  }\n}\n\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */\nclass DocumentReference {\n  /** @hideconstructor */\n  constructor(t,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  e, r) {\n    this.converter = e, this._key = r, /** The type of this Firestore reference. */\n    this.type = \"document\", this.firestore = t;\n  }\n  get _path() {\n    return this._key.path;\n  }\n  /**\n   * The document's identifier within its collection.\n   */\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  /**\n   * A string representing the path of the referenced document (relative\n   * to the root of the database).\n   */\n  get path() {\n    return this._key.path.canonicalString();\n  }\n  /**\n   * The collection this `DocumentReference` belongs to.\n   */\n  get parent() {\n    return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());\n  }\n  withConverter(t) {\n    return new DocumentReference(this.firestore, t, this._key);\n  }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link (query:1)}).\n */\nclass CollectionReference extends Query {\n  /** @hideconstructor */\n  constructor(t, e, r) {\n    super(t, e, function __PRIVATE_newQueryForPath(t) {\n      return new __PRIVATE_QueryImpl(t);\n    }(r)), this._path = r, /** The type of this Firestore reference. */\n    this.type = \"collection\";\n  }\n  /** The collection's identifier. */\n  get id() {\n    return this._query.path.lastSegment();\n  }\n  /**\n   * A string representing the path of the referenced collection (relative\n   * to the root of the database).\n   */\n  get path() {\n    return this._query.path.canonicalString();\n  }\n  /**\n   * A reference to the containing `DocumentReference` if this is a\n   * subcollection. If this isn't a subcollection, the reference is null.\n   */\n  get parent() {\n    const t = this._path.popLast();\n    return t.isEmpty() ? null : new DocumentReference(this.firestore, /* converter= */null, new DocumentKey(t));\n  }\n  withConverter(t) {\n    return new CollectionReference(this.firestore, t, this._path);\n  }\n}\nfunction collection(t, e, ...r) {\n  if (t = getModularInstance(t), __PRIVATE_validateNonEmptyArgument(\"collection\", \"path\", e), t instanceof Firestore) {\n    const n = ResourcePath.fromString(e, ...r);\n    return __PRIVATE_validateCollectionPath(n), new CollectionReference(t, /* converter= */null, n);\n  }\n  {\n    if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n    const n = t._path.child(ResourcePath.fromString(e, ...r));\n    return __PRIVATE_validateCollectionPath(n), new CollectionReference(t.firestore, /* converter= */null, n);\n  }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */\nfunction collectionGroup(t, e) {\n  if (t = __PRIVATE_cast(t, Firestore), __PRIVATE_validateNonEmptyArgument(\"collectionGroup\", \"collection id\", e), e.indexOf(\"/\") >= 0) throw new FirestoreError(T, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n  return new Query(t, /* converter= */null, function __PRIVATE_newQueryForCollectionGroup(t) {\n    return new __PRIVATE_QueryImpl(ResourcePath.emptyPath(), t);\n  }(e));\n}\nfunction doc(t, e, ...r) {\n  if (t = getModularInstance(t),\n  // We allow omission of 'pathString' but explicitly prohibit passing in both\n  // 'undefined' and 'null'.\n  1 === arguments.length && (e = __PRIVATE_AutoId.newId()), __PRIVATE_validateNonEmptyArgument(\"doc\", \"path\", e), t instanceof Firestore) {\n    const n = ResourcePath.fromString(e, ...r);\n    return __PRIVATE_validateDocumentPath(n), new DocumentReference(t, /* converter= */null, new DocumentKey(n));\n  }\n  {\n    if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n    const n = t._path.child(ResourcePath.fromString(e, ...r));\n    return __PRIVATE_validateDocumentPath(n), new DocumentReference(t.firestore, t instanceof CollectionReference ? t.converter : null, new DocumentKey(n));\n  }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\nfunction refEqual(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), (t instanceof DocumentReference || t instanceof CollectionReference) && (e instanceof DocumentReference || e instanceof CollectionReference) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter;\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\nfunction queryEqual(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), t instanceof Query && e instanceof Query && t.firestore === e.firestore && __PRIVATE_queryEquals(t._query, e._query) && t.converter === e.converter;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */\nclass Bytes {\n  /** @hideconstructor */\n  constructor(t) {\n    this._byteString = t;\n  }\n  /**\n   * Creates a new `Bytes` object from the given Base64 string, converting it to\n   * bytes.\n   *\n   * @param base64 - The Base64 string used to create the `Bytes` object.\n   */\n  static fromBase64String(t) {\n    try {\n      return new Bytes(ByteString.fromBase64String(t));\n    } catch (t) {\n      throw new FirestoreError(T, \"Failed to construct data from Base64 string: \" + t);\n    }\n  }\n  /**\n   * Creates a new `Bytes` object from the given Uint8Array.\n   *\n   * @param array - The Uint8Array used to create the `Bytes` object.\n   */\n  static fromUint8Array(t) {\n    return new Bytes(ByteString.fromUint8Array(t));\n  }\n  /**\n   * Returns the underlying bytes as a Base64-encoded string.\n   *\n   * @returns The Base64-encoded string created from the `Bytes` object.\n   */\n  toBase64() {\n    return this._byteString.toBase64();\n  }\n  /**\n   * Returns the underlying bytes in a new `Uint8Array`.\n   *\n   * @returns The Uint8Array created from the `Bytes` object.\n   */\n  toUint8Array() {\n    return this._byteString.toUint8Array();\n  }\n  /**\n   * Returns a string representation of the `Bytes` object.\n   *\n   * @returns A string representation of the `Bytes` object.\n   */\n  toString() {\n    return \"Bytes(base64: \" + this.toBase64() + \")\";\n  }\n  /**\n   * Returns true if this `Bytes` object is equal to the provided one.\n   *\n   * @param other - The `Bytes` object to compare against.\n   * @returns true if this `Bytes` object is equal to the provided one.\n   */\n  isEqual(t) {\n    return this._byteString.isEqual(t._byteString);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */\nclass FieldPath {\n  /**\n   * Creates a `FieldPath` from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  constructor(...t) {\n    for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new FirestoreError(T, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n    this._internalPath = new FieldPath$1(t);\n  }\n  /**\n   * Returns true if this `FieldPath` is equal to the provided one.\n   *\n   * @param other - The `FieldPath` to compare against.\n   * @returns true if this `FieldPath` is equal to the provided one.\n   */\n  isEqual(t) {\n    return this._internalPath.isEqual(t._internalPath);\n  }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */\nfunction documentId() {\n  return new FieldPath(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */\nclass FieldValue {\n  /**\n   * @param _methodName - The public API endpoint that returns this class.\n   * @hideconstructor\n   */\n  constructor(t) {\n    this._methodName = t;\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */\nclass GeoPoint {\n  /**\n   * Creates a new immutable `GeoPoint` object with the provided latitude and\n   * longitude values.\n   * @param latitude - The latitude as number between -90 and 90.\n   * @param longitude - The longitude as number between -180 and 180.\n   */\n  constructor(t, e) {\n    if (!isFinite(t) || t < -90 || t > 90) throw new FirestoreError(T, \"Latitude must be a number between -90 and 90, but was: \" + t);\n    if (!isFinite(e) || e < -180 || e > 180) throw new FirestoreError(T, \"Longitude must be a number between -180 and 180, but was: \" + e);\n    this._lat = t, this._long = e;\n  }\n  /**\n   * The latitude of this `GeoPoint` instance.\n   */\n  get latitude() {\n    return this._lat;\n  }\n  /**\n   * The longitude of this `GeoPoint` instance.\n   */\n  get longitude() {\n    return this._long;\n  }\n  /**\n   * Returns true if this `GeoPoint` is equal to the provided one.\n   *\n   * @param other - The `GeoPoint` to compare against.\n   * @returns true if this `GeoPoint` is equal to the provided one.\n   */\n  isEqual(t) {\n    return this._lat === t._lat && this._long === t._long;\n  }\n  /** Returns a JSON-serializable representation of this GeoPoint. */\n  toJSON() {\n    return {\n      latitude: this._lat,\n      longitude: this._long\n    };\n  }\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n  _compareTo(t) {\n    return __PRIVATE_primitiveComparator(this._lat, t._lat) || __PRIVATE_primitiveComparator(this._long, t._long);\n  }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst U = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */\nclass ParsedSetData {\n  constructor(t, e, r) {\n    this.data = t, this.fieldMask = e, this.fieldTransforms = r;\n  }\n  toMutation(t, e) {\n    return null !== this.fieldMask ? new __PRIVATE_PatchMutation(t, this.data, this.fieldMask, e, this.fieldTransforms) : new __PRIVATE_SetMutation(t, this.data, e, this.fieldTransforms);\n  }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nclass ParsedUpdateData {\n  constructor(t,\n  // The fieldMask does not include document transforms.\n  e, r) {\n    this.data = t, this.fieldMask = e, this.fieldTransforms = r;\n  }\n  toMutation(t, e) {\n    return new __PRIVATE_PatchMutation(t, this.data, this.fieldMask, e, this.fieldTransforms);\n  }\n}\nfunction __PRIVATE_isWrite(t) {\n  switch (t) {\n    case 0 /* UserDataSource.Set */:\n    // fall through\n    case 2 /* UserDataSource.MergeSet */:\n    // fall through\n    case 1 /* UserDataSource.Update */:\n      return !0;\n    case 3 /* UserDataSource.Argument */:\n    case 4 /* UserDataSource.ArrayArgument */:\n      return !1;\n    default:\n      throw fail();\n  }\n}\n\n/** A \"context\" object passed around while parsing user data. */\nclass __PRIVATE_ParseContextImpl {\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings - The settings for the parser.\n   * @param databaseId - The database ID of the Firestore instance.\n   * @param serializer - The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms - A mutable list of field transforms encountered\n   * while parsing the data.\n   * @param fieldMask - A mutable list of field paths encountered while parsing\n   * the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(t, e, r, n, i, s) {\n    this.settings = t, this.databaseId = e, this.serializer = r, this.ignoreUndefinedProperties = n,\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    void 0 === i && this.tt(), this.fieldTransforms = i || [], this.fieldMask = s || [];\n  }\n  get path() {\n    return this.settings.path;\n  }\n  get et() {\n    return this.settings.et;\n  }\n  /** Returns a new context with the specified settings overwritten. */\n  rt(t) {\n    return new __PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n  }\n  nt(t) {\n    var e;\n    const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),\n      n = this.rt({\n        path: r,\n        it: !1\n      });\n    return n.st(t), n;\n  }\n  ot(t) {\n    var e;\n    const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),\n      n = this.rt({\n        path: r,\n        it: !1\n      });\n    return n.tt(), n;\n  }\n  ut(t) {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.rt({\n      path: void 0,\n      it: !0\n    });\n  }\n  _t(t) {\n    return __PRIVATE_createError(t, this.settings.methodName, this.settings.ct || !1, this.path, this.settings.lt);\n  }\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(t) {\n    return void 0 !== this.fieldMask.find(e => t.isPrefixOf(e)) || void 0 !== this.fieldTransforms.find(e => t.isPrefixOf(e.field));\n  }\n  tt() {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (this.path) for (let t = 0; t < this.path.length; t++) this.st(this.path.get(t));\n  }\n  st(t) {\n    if (0 === t.length) throw this._t(\"Document fields must not be empty\");\n    if (__PRIVATE_isWrite(this.et) && U.test(t)) throw this._t('Document fields cannot begin and end with \"__\"');\n  }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\nclass __PRIVATE_UserDataReader {\n  constructor(t, e, r) {\n    this.databaseId = t, this.ignoreUndefinedProperties = e, this.serializer = r || __PRIVATE_newSerializer(t);\n  }\n  /** Creates a new top-level parse context. */\n  ht(t, e, r, n = !1) {\n    return new __PRIVATE_ParseContextImpl({\n      et: t,\n      methodName: e,\n      lt: r,\n      path: FieldPath$1.emptyPath(),\n      it: !1,\n      ct: n\n    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n  }\n}\nfunction __PRIVATE_newUserDataReader(t) {\n  const e = t._freezeSettings(),\n    r = __PRIVATE_newSerializer(t._databaseId);\n  return new __PRIVATE_UserDataReader(t._databaseId, !!e.ignoreUndefinedProperties, r);\n}\n\n/** Parse document data from a set() call. */\nfunction __PRIVATE_parseSetData(t, e, r, n, i, s = {}) {\n  const o = t.ht(s.merge || s.mergeFields ? 2 /* UserDataSource.MergeSet */ : 0 /* UserDataSource.Set */, e, r, i);\n  __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", o, n);\n  const a = __PRIVATE_parseObject(n, o);\n  let u, _;\n  if (s.merge) u = new FieldMask(o.fieldMask), _ = o.fieldTransforms;else if (s.mergeFields) {\n    const t = [];\n    for (const n of s.mergeFields) {\n      const i = __PRIVATE_fieldPathFromArgument$1(e, n, r);\n      if (!o.contains(i)) throw new FirestoreError(T, `Field '${i}' is specified in your field mask but missing from your input data.`);\n      __PRIVATE_fieldMaskContains(t, i) || t.push(i);\n    }\n    u = new FieldMask(t), _ = o.fieldTransforms.filter(t => u.covers(t.field));\n  } else u = null, _ = o.fieldTransforms;\n  return new ParsedSetData(new ObjectValue(a), u, _);\n}\nclass __PRIVATE_DeleteFieldValueImpl extends FieldValue {\n  _toFieldTransform(t) {\n    if (2 /* UserDataSource.MergeSet */ !== t.et) throw 1 /* UserDataSource.Update */ === t.et ? t._t(`${this._methodName}() can only appear at the top level of your update data`) : t._t(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n    // No transform to add for a delete, but we need to add it to our\n    // fieldMask so it gets deleted.\n    return t.fieldMask.push(t.path), null;\n  }\n  isEqual(t) {\n    return t instanceof __PRIVATE_DeleteFieldValueImpl;\n  }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */\nfunction __PRIVATE_createSentinelChildContext(t, e, r) {\n  return new __PRIVATE_ParseContextImpl({\n    et: 3 /* UserDataSource.Argument */,\n    lt: e.settings.lt,\n    methodName: t._methodName,\n    it: r\n  }, e.databaseId, e.serializer, e.ignoreUndefinedProperties);\n}\nclass __PRIVATE_ServerTimestampFieldValueImpl extends FieldValue {\n  _toFieldTransform(t) {\n    return new FieldTransform(t.path, new __PRIVATE_ServerTimestampTransform());\n  }\n  isEqual(t) {\n    return t instanceof __PRIVATE_ServerTimestampFieldValueImpl;\n  }\n}\nclass __PRIVATE_ArrayUnionFieldValueImpl extends FieldValue {\n  constructor(t, e) {\n    super(t), this.dt = e;\n  }\n  _toFieldTransform(t) {\n    const e = __PRIVATE_createSentinelChildContext(this, t, /*array=*/!0),\n      r = this.dt.map(t => __PRIVATE_parseData(t, e)),\n      n = new __PRIVATE_ArrayUnionTransformOperation(r);\n    return new FieldTransform(t.path, n);\n  }\n  isEqual(t) {\n    return t instanceof __PRIVATE_ArrayUnionFieldValueImpl && deepEqual(this.dt, t.dt);\n  }\n}\nclass __PRIVATE_ArrayRemoveFieldValueImpl extends FieldValue {\n  constructor(t, e) {\n    super(t), this.dt = e;\n  }\n  _toFieldTransform(t) {\n    const e = __PRIVATE_createSentinelChildContext(this, t, /*array=*/!0),\n      r = this.dt.map(t => __PRIVATE_parseData(t, e)),\n      n = new __PRIVATE_ArrayRemoveTransformOperation(r);\n    return new FieldTransform(t.path, n);\n  }\n  isEqual(t) {\n    return t instanceof __PRIVATE_ArrayRemoveFieldValueImpl && deepEqual(this.dt, t.dt);\n  }\n}\nclass __PRIVATE_NumericIncrementFieldValueImpl extends FieldValue {\n  constructor(t, e) {\n    super(t), this.ft = e;\n  }\n  _toFieldTransform(t) {\n    const e = new __PRIVATE_NumericIncrementTransformOperation(t.serializer, toNumber(t.serializer, this.ft));\n    return new FieldTransform(t.path, e);\n  }\n  isEqual(t) {\n    return t instanceof __PRIVATE_NumericIncrementFieldValueImpl && this.ft === t.ft;\n  }\n}\n\n/** Parse update data from an update() call. */\nfunction __PRIVATE_parseUpdateData(t, e, r, n) {\n  const i = t.ht(1 /* UserDataSource.Update */, e, r);\n  __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", i, n);\n  const s = [],\n    o = ObjectValue.empty();\n  forEach(n, (t, n) => {\n    const a = __PRIVATE_fieldPathFromDotSeparatedString(e, t, r);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    n = getModularInstance(n);\n    const u = i.ot(a);\n    if (n instanceof __PRIVATE_DeleteFieldValueImpl)\n      // Add it to the field mask, but don't add anything to updateData.\n      s.push(a);else {\n      const t = __PRIVATE_parseData(n, u);\n      null != t && (s.push(a), o.set(a, t));\n    }\n  });\n  const a = new FieldMask(s);\n  return new ParsedUpdateData(o, a, i.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */\nfunction __PRIVATE_parseUpdateVarargs(t, e, r, n, i, s) {\n  const o = t.ht(1 /* UserDataSource.Update */, e, r),\n    a = [__PRIVATE_fieldPathFromArgument$1(e, n, r)],\n    u = [i];\n  if (s.length % 2 != 0) throw new FirestoreError(T, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n  for (let t = 0; t < s.length; t += 2) a.push(__PRIVATE_fieldPathFromArgument$1(e, s[t])), u.push(s[t + 1]);\n  const _ = [],\n    c = ObjectValue.empty();\n  // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n  for (let t = a.length - 1; t >= 0; --t) if (!__PRIVATE_fieldMaskContains(_, a[t])) {\n    const e = a[t];\n    let r = u[t];\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    r = getModularInstance(r);\n    const n = o.ot(e);\n    if (r instanceof __PRIVATE_DeleteFieldValueImpl)\n      // Add it to the field mask, but don't add anything to updateData.\n      _.push(e);else {\n      const t = __PRIVATE_parseData(r, n);\n      null != t && (_.push(e), c.set(e, t));\n    }\n  }\n  const h = new FieldMask(_);\n  return new ParsedUpdateData(c, h, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */\nfunction __PRIVATE_parseQueryValue(t, e, r, n = !1) {\n  return __PRIVATE_parseData(r, t.ht(n ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */, e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\nfunction __PRIVATE_parseData(t, e) {\n  if (__PRIVATE_looksLikeJsonObject(\n  // Unwrap the API type from the Compat SDK. This will return the API type\n  // from firestore-exp.\n  t = getModularInstance(t))) return __PRIVATE_validatePlainObject(\"Unsupported field value:\", e, t), __PRIVATE_parseObject(t, e);\n  if (t instanceof FieldValue)\n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n    * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n    * context.fieldTransforms.\n    */\n    return function __PRIVATE_parseSentinelFieldValue(t, e) {\n      // Sentinels are only supported with writes, and not within arrays.\n      if (!__PRIVATE_isWrite(e.et)) throw e._t(`${t._methodName}() can only be used with update() and set()`);\n      if (!e.path) throw e._t(`${t._methodName}() is not currently supported inside arrays`);\n      const r = t._toFieldTransform(e);\n      r && e.fieldTransforms.push(r);\n    }\n    /**\n    * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n    *\n    * @returns The parsed value\n    */(t, e), null;\n  if (void 0 === t && e.ignoreUndefinedProperties)\n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n  if (\n  // If context.path is null we are inside an array and we don't support\n  // field mask paths more granular than the top-level array.\n  e.path && e.fieldMask.push(e.path), t instanceof Array) {\n    // TODO(b/34871131): Include the path containing the array in the error\n    // message.\n    // In the case of IN queries, the parsed data is an array (representing\n    // the set of values to be included for the IN query) that may directly\n    // contain additional arrays (each representing an individual field\n    // value), so we disable this validation.\n    if (e.settings.it && 4 /* UserDataSource.ArrayArgument */ !== e.et) throw e._t(\"Nested arrays are not supported\");\n    return function __PRIVATE_parseArray(t, e) {\n      const r = [];\n      let n = 0;\n      for (const i of t) {\n        let t = __PRIVATE_parseData(i, e.ut(n));\n        null == t && (\n        // Just include nulls in the array for fields being replaced with a\n        // sentinel.\n        t = {\n          nullValue: \"NULL_VALUE\"\n        }), r.push(t), n++;\n      }\n      return {\n        arrayValue: {\n          values: r\n        }\n      };\n    }(t, e);\n  }\n  return function __PRIVATE_parseScalarValue(t, e) {\n    if (null === (t = getModularInstance(t))) return {\n      nullValue: \"NULL_VALUE\"\n    };\n    if (\"number\" == typeof t) return toNumber(e.serializer, t);\n    if (\"boolean\" == typeof t) return {\n      booleanValue: t\n    };\n    if (\"string\" == typeof t) return {\n      stringValue: t\n    };\n    if (t instanceof Date) {\n      const r = Timestamp.fromDate(t);\n      return {\n        timestampValue: toTimestamp(e.serializer, r)\n      };\n    }\n    if (t instanceof Timestamp) {\n      // Firestore backend truncates precision down to microseconds. To ensure\n      // offline mode works the same with regards to truncation, perform the\n      // truncation immediately without waiting for the backend to do that.\n      const r = new Timestamp(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n      return {\n        timestampValue: toTimestamp(e.serializer, r)\n      };\n    }\n    if (t instanceof GeoPoint) return {\n      geoPointValue: {\n        latitude: t.latitude,\n        longitude: t.longitude\n      }\n    };\n    if (t instanceof Bytes) return {\n      bytesValue: __PRIVATE_toBytes(e.serializer, t._byteString)\n    };\n    if (t instanceof DocumentReference) {\n      const r = e.databaseId,\n        n = t.firestore._databaseId;\n      if (!n.isEqual(r)) throw e._t(`Document reference is for database ${n.projectId}/${n.database} but should be for database ${r.projectId}/${r.database}`);\n      return {\n        referenceValue: __PRIVATE_toResourceName(t.firestore._databaseId || e.databaseId, t._key.path)\n      };\n    }\n    throw e._t(`Unsupported field value: ${__PRIVATE_valueDescription(t)}`);\n  }\n  /**\n  * Checks whether an object looks like a JSON object that should be converted\n  * into a struct. Normal class/prototype instances are considered to look like\n  * JSON objects since they should be converted to a struct value. Arrays, Dates,\n  * GeoPoints, etc. are not considered to look like JSON objects since they map\n  * to specific FieldValue types other than ObjectValue.\n  */(t, e);\n}\nfunction __PRIVATE_parseObject(t, e) {\n  const r = {};\n  return !function isEmpty(t) {\n    for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n    return !0;\n  }(t) ? forEach(t, (t, n) => {\n    const i = __PRIVATE_parseData(n, e.nt(t));\n    null != i && (r[t] = i);\n  }) :\n  // If we encounter an empty object, we explicitly add it to the update\n  // mask to ensure that the server creates a map entry.\n  e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n    mapValue: {\n      fields: r\n    }\n  };\n}\nfunction __PRIVATE_looksLikeJsonObject(t) {\n  return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof Timestamp || t instanceof GeoPoint || t instanceof Bytes || t instanceof DocumentReference || t instanceof FieldValue);\n}\nfunction __PRIVATE_validatePlainObject(t, e, r) {\n  if (!__PRIVATE_looksLikeJsonObject(r) || !function __PRIVATE_isPlainObject(t) {\n    return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n  }(r)) {\n    const n = __PRIVATE_valueDescription(r);\n    throw \"an object\" === n ? e._t(t + \" a custom object\") : e._t(t + \" \" + n);\n  }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\nfunction __PRIVATE_fieldPathFromArgument$1(t, e, r) {\n  if ((\n  // If required, replace the FieldPath Compat class with with the firestore-exp\n  // FieldPath.\n  e = getModularInstance(e)) instanceof FieldPath) return e._internalPath;\n  if (\"string\" == typeof e) return __PRIVATE_fieldPathFromDotSeparatedString(t, e);\n  throw __PRIVATE_createError(\"Field path arguments must be of type string or \", t, /* hasConverter= */!1, /* path= */void 0, r);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */\nconst j = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */\nfunction __PRIVATE_fieldPathFromDotSeparatedString(t, e, r) {\n  if (e.search(j) >= 0) throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, /* hasConverter= */!1, /* path= */void 0, r);\n  try {\n    return new FieldPath(...e.split(\".\"))._internalPath;\n  } catch (n) {\n    throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, /* hasConverter= */!1, /* path= */void 0, r);\n  }\n}\nfunction __PRIVATE_createError(t, e, r, n, i) {\n  const s = n && !n.isEmpty(),\n    o = void 0 !== i;\n  let a = `Function ${e}() called with invalid data`;\n  r && (a += \" (via `toFirestore()`)\"), a += \". \";\n  let u = \"\";\n  return (s || o) && (u += \" (found\", s && (u += ` in field ${n}`), o && (u += ` in document ${i}`), u += \")\"), new FirestoreError(T, a + t + u);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction __PRIVATE_fieldMaskContains(t, e) {\n  return t.some(t => t.isEqual(e));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */\nclass DocumentSnapshot {\n  // Note: This class is stripped down version of the DocumentSnapshot in\n  // the legacy SDK. The changes are:\n  // - No support for SnapshotMetadata.\n  // - No support for SnapshotOptions.\n  /** @hideconstructor protected */\n  constructor(t, e, r, n, i) {\n    this._firestore = t, this._userDataWriter = e, this._key = r, this._document = n, this._converter = i;\n  }\n  /** Property of the `DocumentSnapshot` that provides the document's ID. */\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  /**\n   * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n   */\n  get ref() {\n    return new DocumentReference(this._firestore, this._converter, this._key);\n  }\n  /**\n   * Signals whether or not the document at the snapshot's location exists.\n   *\n   * @returns true if the document exists.\n   */\n  exists() {\n    return null !== this._document;\n  }\n  /**\n   * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n   * the document doesn't exist.\n   *\n   * @returns An `Object` containing all fields in the document or `undefined`\n   * if the document doesn't exist.\n   */\n  data() {\n    if (this._document) {\n      if (this._converter) {\n        // We only want to use the converter and create a new DocumentSnapshot\n        // if a converter has been provided.\n        const t = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, /* converter= */null);\n        return this._converter.fromFirestore(t);\n      }\n      return this._userDataWriter.convertValue(this._document.data.value);\n    }\n  }\n  /**\n   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n   * document or field doesn't exist.\n   *\n   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n   * field.\n   * @returns The data at the specified field location or undefined if no such\n   * field exists in the document.\n   */\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(t) {\n    if (this._document) {\n      const e = this._document.data.field(__PRIVATE_fieldPathFromArgument(\"DocumentSnapshot.get\", t));\n      if (null !== e) return this._userDataWriter.convertValue(e);\n    }\n  }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */\nclass QueryDocumentSnapshot extends DocumentSnapshot {\n  /**\n   * Retrieves all fields in the document as an `Object`.\n   *\n   * @override\n   * @returns An `Object` containing all fields in the document.\n   */\n  data() {\n    return super.data();\n  }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */\nclass QuerySnapshot {\n  /** @hideconstructor */\n  constructor(t, e) {\n    this._docs = e, this.query = t;\n  }\n  /** An array of all the documents in the `QuerySnapshot`. */\n  get docs() {\n    return [...this._docs];\n  }\n  /** The number of documents in the `QuerySnapshot`. */\n  get size() {\n    return this.docs.length;\n  }\n  /** True if there are no documents in the `QuerySnapshot`. */\n  get empty() {\n    return 0 === this.docs.length;\n  }\n  /**\n   * Enumerates all of the documents in the `QuerySnapshot`.\n   *\n   * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n   * each document in the snapshot.\n   * @param thisArg - The `this` binding for the callback.\n   */\n  forEach(t, e) {\n    this._docs.forEach(t, e);\n  }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */\nfunction snapshotEqual(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), t instanceof DocumentSnapshot && e instanceof DocumentSnapshot ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof QuerySnapshot && e instanceof QuerySnapshot && queryEqual(t.query, e.query) && __PRIVATE_arrayEquals(t.docs, e.docs, snapshotEqual);\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */\nfunction __PRIVATE_fieldPathFromArgument(t, e) {\n  return \"string\" == typeof e ? __PRIVATE_fieldPathFromDotSeparatedString(t, e) : e instanceof FieldPath ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\nclass AppliableConstraint {}\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link (query:1)} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass QueryConstraint extends AppliableConstraint {}\nfunction query(t, e, ...r) {\n  let n = [];\n  e instanceof AppliableConstraint && n.push(e), n = n.concat(r), function __PRIVATE_validateQueryConstraintArray(t) {\n    const e = t.filter(t => t instanceof QueryCompositeFilterConstraint).length,\n      r = t.filter(t => t instanceof QueryFieldFilterConstraint).length;\n    if (e > 1 || e > 0 && r > 0) throw new FirestoreError(T, \"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.\");\n  }\n  /**\n  * @license\n  * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  /**\n  * Converts Firestore's internal types to the JavaScript types that we expose\n  * to the user.\n  *\n  * @internal\n  */(n);\n  for (const e of n) t = e._apply(t);\n  return t;\n}\n\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link (query:1)} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */\nclass QueryFieldFilterConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor(t, e, r) {\n    super(), this._field = t, this._op = e, this._value = r, /** The type of this query constraint */\n    this.type = \"where\";\n  }\n  static _create(t, e, r) {\n    return new QueryFieldFilterConstraint(t, e, r);\n  }\n  _apply(t) {\n    const e = this._parse(t);\n    return __PRIVATE_validateNewFieldFilter(t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e));\n  }\n  _parse(t) {\n    const e = __PRIVATE_newUserDataReader(t.firestore),\n      r = function __PRIVATE_newQueryFilter(t, e, r, n, i, s, o) {\n        let a;\n        if (i.isKeyField()) {\n          if (\"array-contains\" /* Operator.ARRAY_CONTAINS */ === s || \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === s) throw new FirestoreError(T, `Invalid Query. You can't perform '${s}' queries on documentId().`);\n          if (\"in\" /* Operator.IN */ === s || \"not-in\" /* Operator.NOT_IN */ === s) {\n            __PRIVATE_validateDisjunctiveFilterElements(o, s);\n            const e = [];\n            for (const r of o) e.push(__PRIVATE_parseDocumentIdValue(n, t, r));\n            a = {\n              arrayValue: {\n                values: e\n              }\n            };\n          } else a = __PRIVATE_parseDocumentIdValue(n, t, o);\n        } else \"in\" /* Operator.IN */ !== s && \"not-in\" /* Operator.NOT_IN */ !== s && \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ !== s || __PRIVATE_validateDisjunctiveFilterElements(o, s), a = __PRIVATE_parseQueryValue(r, e, o, /* allowArrays= */\"in\" /* Operator.IN */ === s || \"not-in\" /* Operator.NOT_IN */ === s);\n        return FieldFilter.create(i, s, a);\n      }(t._query, \"where\", e, t.firestore._databaseId, this._field, this._op, this._value);\n    return r;\n  }\n}\n\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */\nfunction where(t, e, r) {\n  const n = e,\n    i = __PRIVATE_fieldPathFromArgument(\"where\", t);\n  return QueryFieldFilterConstraint._create(i, n, r);\n}\n\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n */\nclass QueryCompositeFilterConstraint extends AppliableConstraint {\n  /**\n   * @internal\n   */\n  constructor( /** The type of this query constraint */\n  t, e) {\n    super(), this.type = t, this._queryConstraints = e;\n  }\n  static _create(t, e) {\n    return new QueryCompositeFilterConstraint(t, e);\n  }\n  _parse(t) {\n    const e = this._queryConstraints.map(e => e._parse(t)).filter(t => t.getFilters().length > 0);\n    return 1 === e.length ? e[0] : CompositeFilter.create(e, this._getOperator());\n  }\n  _apply(t) {\n    const e = this._parse(t);\n    return 0 === e.getFilters().length ? t : (function __PRIVATE_validateNewFilter(t, e) {\n      let r = t;\n      const n = e.getFlattenedFilters();\n      for (const t of n) __PRIVATE_validateNewFieldFilter(r, t), r = __PRIVATE_queryWithAddedFilter(r, t);\n    }\n    // Checks if any of the provided filter operators are included in the given list of filters and\n    // returns the first one that is, or null if none are.\n    (t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e)));\n  }\n  _getQueryConstraints() {\n    return this._queryConstraints;\n  }\n  _getOperator() {\n    return \"and\" === this.type ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\n  }\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */\nfunction or(...t) {\n  // Only support QueryFilterConstraints\n  return t.forEach(t => __PRIVATE_validateQueryFilterConstraint(\"or\", t)), QueryCompositeFilterConstraint._create(\"or\" /* CompositeOperator.OR */, t);\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */\nfunction and(...t) {\n  // Only support QueryFilterConstraints\n  return t.forEach(t => __PRIVATE_validateQueryFilterConstraint(\"and\", t)), QueryCompositeFilterConstraint._create(\"and\" /* CompositeOperator.AND */, t);\n}\n\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */\nclass QueryOrderByConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor(t, e) {\n    super(), this._field = t, this._direction = e, /** The type of this query constraint */\n    this.type = \"orderBy\";\n  }\n  static _create(t, e) {\n    return new QueryOrderByConstraint(t, e);\n  }\n  _apply(t) {\n    const e = function __PRIVATE_newQueryOrderBy(t, e, r) {\n      if (null !== t.startAt) throw new FirestoreError(T, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n      if (null !== t.endAt) throw new FirestoreError(T, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n      return new OrderBy(e, r);\n    }\n    /**\n    * Create a `Bound` from a query and a document.\n    *\n    * Note that the `Bound` will always include the key of the document\n    * and so only the provided document will compare equal to the returned\n    * position.\n    *\n    * Will throw if the document does not contain all fields of the order by\n    * of the query or if any of the fields in the order by are an uncommitted\n    * server timestamp.\n    */(t._query, this._field, this._direction);\n    return new Query(t.firestore, t.converter, function __PRIVATE_queryWithAddedOrderBy(t, e) {\n      // TODO(dimond): validate that orderBy does not list the same key twice.\n      const r = t.explicitOrderBy.concat([e]);\n      return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, r, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n    }(t._query, e));\n  }\n}\n\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */\nfunction orderBy(t, e = \"asc\") {\n  const r = e,\n    n = __PRIVATE_fieldPathFromArgument(\"orderBy\", t);\n  return QueryOrderByConstraint._create(n, r);\n}\n\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */\nclass QueryLimitConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor( /** The type of this query constraint */\n  t, e, r) {\n    super(), this.type = t, this._limit = e, this._limitType = r;\n  }\n  static _create(t, e, r) {\n    return new QueryLimitConstraint(t, e, r);\n  }\n  _apply(t) {\n    return new Query(t.firestore, t.converter, function __PRIVATE_queryWithLimit(t, e, r) {\n      return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, r, t.startAt, t.endAt);\n    }(t._query, this._limit, this._limitType));\n  }\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\nfunction limit(t) {\n  return __PRIVATE_validatePositiveNumber(\"limit\", t), QueryLimitConstraint._create(\"limit\", t, \"F\" /* LimitType.First */);\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\nfunction limitToLast(t) {\n  return __PRIVATE_validatePositiveNumber(\"limitToLast\", t), QueryLimitConstraint._create(\"limitToLast\", t, \"L\" /* LimitType.Last */);\n}\n\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */\nclass QueryStartAtConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor( /** The type of this query constraint */\n  t, e, r) {\n    super(), this.type = t, this._docOrFields = e, this._inclusive = r;\n  }\n  static _create(t, e, r) {\n    return new QueryStartAtConstraint(t, e, r);\n  }\n  _apply(t) {\n    const e = __PRIVATE_newQueryBoundFromDocOrFields(t, this.type, this._docOrFields, this._inclusive);\n    return new Query(t.firestore, t.converter, function __PRIVATE_queryWithStartAt(t, e) {\n      return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n    }(t._query, e));\n  }\n}\nfunction startAt(...t) {\n  return QueryStartAtConstraint._create(\"startAt\", t, /*inclusive=*/!0);\n}\nfunction startAfter(...t) {\n  return QueryStartAtConstraint._create(\"startAfter\", t, /*inclusive=*/!1);\n}\n\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */\nclass QueryEndAtConstraint extends QueryConstraint {\n  /**\n   * @internal\n   */\n  constructor( /** The type of this query constraint */\n  t, e, r) {\n    super(), this.type = t, this._docOrFields = e, this._inclusive = r;\n  }\n  static _create(t, e, r) {\n    return new QueryEndAtConstraint(t, e, r);\n  }\n  _apply(t) {\n    const e = __PRIVATE_newQueryBoundFromDocOrFields(t, this.type, this._docOrFields, this._inclusive);\n    return new Query(t.firestore, t.converter, function __PRIVATE_queryWithEndAt(t, e) {\n      return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n    }(t._query, e));\n  }\n}\nfunction endBefore(...t) {\n  return QueryEndAtConstraint._create(\"endBefore\", t, /*inclusive=*/!1);\n}\nfunction endAt(...t) {\n  return QueryEndAtConstraint._create(\"endAt\", t, /*inclusive=*/!0);\n}\n\n/** Helper function to create a bound from a document or fields */\nfunction __PRIVATE_newQueryBoundFromDocOrFields(t, e, r, n) {\n  if (r[0] = getModularInstance(r[0]), r[0] instanceof DocumentSnapshot) return function __PRIVATE_newQueryBoundFromDocument(t, e, r, n, i) {\n    if (!n) throw new FirestoreError(P, `Can't use a DocumentSnapshot that doesn't exist for ${r}().`);\n    const s = [];\n    // Because people expect to continue/end a query at the exact document\n    // provided, we need to use the implicit sort order rather than the explicit\n    // sort order, because it's guaranteed to contain the document key. That way\n    // the position becomes unambiguous and the query continues/ends exactly at\n    // the provided document. Without the key (by using the explicit sort\n    // orders), multiple documents could match the position, yielding duplicate\n    // results.\n    for (const r of __PRIVATE_queryNormalizedOrderBy(t)) if (r.field.isKeyField()) s.push(__PRIVATE_refValue(e, n.key));else {\n      const t = n.data.field(r.field);\n      if (__PRIVATE_isServerTimestamp(t)) throw new FirestoreError(T, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + r.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n      if (null === t) {\n        const t = r.field.canonicalString();\n        throw new FirestoreError(T, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n      }\n      s.push(t);\n    }\n    return new Bound(s, i);\n  }\n  /**\n  * Converts a list of field values to a `Bound` for the given query.\n  */(t._query, t.firestore._databaseId, e, r[0]._document, n);\n  {\n    const i = __PRIVATE_newUserDataReader(t.firestore);\n    return function __PRIVATE_newQueryBoundFromFields(t, e, r, n, i, s) {\n      // Use explicit order by's because it has to match the query the user made\n      const o = t.explicitOrderBy;\n      if (i.length > o.length) throw new FirestoreError(T, `Too many arguments provided to ${n}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n      const a = [];\n      for (let s = 0; s < i.length; s++) {\n        const u = i[s];\n        if (o[s].field.isKeyField()) {\n          if (\"string\" != typeof u) throw new FirestoreError(T, `Invalid query. Expected a string for document ID in ${n}(), but got a ${typeof u}`);\n          if (!__PRIVATE_isCollectionGroupQuery(t) && -1 !== u.indexOf(\"/\")) throw new FirestoreError(T, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${n}() must be a plain document ID, but '${u}' contains a slash.`);\n          const r = t.path.child(ResourcePath.fromString(u));\n          if (!DocumentKey.isDocumentKey(r)) throw new FirestoreError(T, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${n}() must result in a valid document path, but '${r}' is not because it contains an odd number of segments.`);\n          const i = new DocumentKey(r);\n          a.push(__PRIVATE_refValue(e, i));\n        } else {\n          const t = __PRIVATE_parseQueryValue(r, n, u);\n          a.push(t);\n        }\n      }\n      return new Bound(a, s);\n    }\n    /**\n    * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n    * appropriate errors if the value is anything other than a `DocumentReference`\n    * or `string`, or if the string is malformed.\n    */(t._query, t.firestore._databaseId, i, e, r, n);\n  }\n}\nfunction __PRIVATE_parseDocumentIdValue(t, e, r) {\n  if (\"string\" == typeof (r = getModularInstance(r))) {\n    if (\"\" === r) throw new FirestoreError(T, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n    if (!__PRIVATE_isCollectionGroupQuery(e) && -1 !== r.indexOf(\"/\")) throw new FirestoreError(T, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${r}' contains a '/' character.`);\n    const n = e.path.child(ResourcePath.fromString(r));\n    if (!DocumentKey.isDocumentKey(n)) throw new FirestoreError(T, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${n}' is not because it has an odd number of segments (${n.length}).`);\n    return __PRIVATE_refValue(t, new DocumentKey(n));\n  }\n  if (r instanceof DocumentReference) return __PRIVATE_refValue(t, r._key);\n  throw new FirestoreError(T, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(r)}.`);\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */\nfunction __PRIVATE_validateDisjunctiveFilterElements(t, e) {\n  if (!Array.isArray(t) || 0 === t.length) throw new FirestoreError(T, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */\nfunction __PRIVATE_validateNewFieldFilter(t, e) {\n  const r = function __PRIVATE_findOpInsideFilters(t, e) {\n    for (const r of t) for (const t of r.getFlattenedFilters()) if (e.indexOf(t.op) >= 0) return t.op;\n    return null;\n  }(t.filters, function __PRIVATE_conflictingOps(t) {\n    switch (t) {\n      case \"!=\" /* Operator.NOT_EQUAL */:\n        return [\"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */];\n      case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */:\n      case \"in\" /* Operator.IN */:\n        return [\"not-in\" /* Operator.NOT_IN */];\n      case \"not-in\" /* Operator.NOT_IN */:\n        return [\"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, \"in\" /* Operator.IN */, \"not-in\" /* Operator.NOT_IN */, \"!=\" /* Operator.NOT_EQUAL */];\n      default:\n        return [];\n    }\n  }(e.op));\n  if (null !== r)\n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    throw r === e.op ? new FirestoreError(T, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new FirestoreError(T, `Invalid query. You cannot use '${e.op.toString()}' filters with '${r.toString()}' filters.`);\n}\nfunction __PRIVATE_validateQueryFilterConstraint(t, e) {\n  if (!(e instanceof QueryFieldFilterConstraint || e instanceof QueryCompositeFilterConstraint)) throw new FirestoreError(T, `Function ${t}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction __PRIVATE_applyFirestoreDataConverter(t, e, r) {\n  let n;\n  // Cast to `any` in order to satisfy the union type constraint on\n  // toFirestore().\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return n = t ? r && (r.merge || r.mergeFields) ? t.toFirestore(e, r) : t.toFirestore(e) : e, n;\n}\nclass __PRIVATE_LiteUserDataWriter extends class AbstractUserDataWriter {\n  convertValue(t, e = \"none\") {\n    switch (__PRIVATE_typeOrder(t)) {\n      case 0 /* TypeOrder.NullValue */:\n        return null;\n      case 1 /* TypeOrder.BooleanValue */:\n        return t.booleanValue;\n      case 2 /* TypeOrder.NumberValue */:\n        return __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue);\n      case 3 /* TypeOrder.TimestampValue */:\n        return this.convertTimestamp(t.timestampValue);\n      case 4 /* TypeOrder.ServerTimestampValue */:\n        return this.convertServerTimestamp(t, e);\n      case 5 /* TypeOrder.StringValue */:\n        return t.stringValue;\n      case 6 /* TypeOrder.BlobValue */:\n        return this.convertBytes(__PRIVATE_normalizeByteString(t.bytesValue));\n      case 7 /* TypeOrder.RefValue */:\n        return this.convertReference(t.referenceValue);\n      case 8 /* TypeOrder.GeoPointValue */:\n        return this.convertGeoPoint(t.geoPointValue);\n      case 9 /* TypeOrder.ArrayValue */:\n        return this.convertArray(t.arrayValue, e);\n      case 10 /* TypeOrder.ObjectValue */:\n        return this.convertObject(t.mapValue, e);\n      default:\n        throw fail();\n    }\n  }\n  convertObject(t, e) {\n    return this.convertObjectMap(t.fields, e);\n  }\n  /**\n   * @internal\n   */\n  convertObjectMap(t, e = \"none\") {\n    const r = {};\n    return forEach(t, (t, n) => {\n      r[t] = this.convertValue(n, e);\n    }), r;\n  }\n  convertGeoPoint(t) {\n    return new GeoPoint(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(t.longitude));\n  }\n  convertArray(t, e) {\n    return (t.values || []).map(t => this.convertValue(t, e));\n  }\n  convertServerTimestamp(t, e) {\n    switch (e) {\n      case \"previous\":\n        const r = __PRIVATE_getPreviousValue(t);\n        return null == r ? null : this.convertValue(r, e);\n      case \"estimate\":\n        return this.convertTimestamp(__PRIVATE_getLocalWriteTime(t));\n      default:\n        return null;\n    }\n  }\n  convertTimestamp(t) {\n    const e = __PRIVATE_normalizeTimestamp(t);\n    return new Timestamp(e.seconds, e.nanos);\n  }\n  convertDocumentKey(t, e) {\n    const r = ResourcePath.fromString(t);\n    __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(r));\n    const n = new DatabaseId(r.get(1), r.get(3)),\n      i = new DocumentKey(r.popFirst(5));\n    return n.isEqual(e) ||\n    // TODO(b/64130202): Somehow support foreign references.\n    __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${n.projectId}/${n.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), i;\n  }\n} {\n  constructor(t) {\n    super(), this.firestore = t;\n  }\n  convertBytes(t) {\n    return new Bytes(t);\n  }\n  convertReference(t) {\n    const e = this.convertDocumentKey(t, this.firestore._databaseId);\n    return new DocumentReference(this.firestore, /* converter= */null, e);\n  }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */\nfunction getDoc(t) {\n  const e = __PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore),\n    r = new __PRIVATE_LiteUserDataWriter(t.firestore);\n  return __PRIVATE_invokeBatchGetDocumentsRpc(e, [t._key]).then(e => {\n    __PRIVATE_hardAssert(1 === e.length);\n    const n = e[0];\n    return new DocumentSnapshot(t.firestore, r, t._key, n.isFoundDocument() ? n : null, t.converter);\n  });\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */\nfunction getDocs(t) {\n  (function __PRIVATE_validateHasExplicitOrderByForLimitToLast(t) {\n    if (\"L\" /* LimitType.Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new FirestoreError(v, \"limitToLast() queries require specifying at least one orderBy() clause\");\n  })((t = __PRIVATE_cast(t, Query))._query);\n  const e = __PRIVATE_getDatastore(t.firestore),\n    r = new __PRIVATE_LiteUserDataWriter(t.firestore);\n  return __PRIVATE_invokeRunQueryRpc(e, t._query).then(e => {\n    const n = e.map(e => new QueryDocumentSnapshot(t.firestore, r, e.key, e, t.converter));\n    return \"L\" /* LimitType.Last */ === t._query.limitType &&\n    // Limit to last queries reverse the orderBy constraint that was\n    // specified by the user. As such, we need to reverse the order of the\n    // results to return the documents in the expected order.\n    n.reverse(), new QuerySnapshot(t, n);\n  });\n}\nfunction setDoc(t, e, r) {\n  const n = __PRIVATE_applyFirestoreDataConverter((t = __PRIVATE_cast(t, DocumentReference)).converter, e, r),\n    i = __PRIVATE_parseSetData(__PRIVATE_newUserDataReader(t.firestore), \"setDoc\", t._key, n, null !== t.converter, r);\n  return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [i.toMutation(t._key, Precondition.none())]);\n}\nfunction updateDoc(t, e, r, ...n) {\n  const i = __PRIVATE_newUserDataReader((t = __PRIVATE_cast(t, DocumentReference)).firestore);\n  // For Compat types, we have to \"extract\" the underlying types before\n  // performing validation.\n  let s;\n  s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(i, \"updateDoc\", t._key, e, r, n) : __PRIVATE_parseUpdateData(i, \"updateDoc\", t._key, e);\n  return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [s.toMutation(t._key, Precondition.exists(!0))]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */\nfunction deleteDoc(t) {\n  return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore), [new __PRIVATE_DeleteMutation(t._key, Precondition.none())]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */\nfunction addDoc(t, e) {\n  const r = doc(t = __PRIVATE_cast(t, CollectionReference)),\n    n = __PRIVATE_applyFirestoreDataConverter(t.converter, e),\n    i = __PRIVATE_parseSetData(__PRIVATE_newUserDataReader(t.firestore), \"addDoc\", r._key, n, null !== r.converter, {});\n  return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [i.toMutation(r._key, Precondition.exists(!1))]).then(() => r);\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Calculates the number of documents in the result set of the given query\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can\n * count the documents in cases where the result set is prohibitively large to\n * download entirely (thousands of documents).\n *\n * @param query The query whose result set size is calculated.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */\nfunction getCount(t) {\n  return getAggregate(t, {\n    count: count()\n  });\n}\n\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, are downloaded. This\n * function can perform aggregations of the documents in cases where the result\n * set is prohibitively large to download entirely (thousands of documents).\n *\n * @param query The query whose result set is aggregated over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregate(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n */\nfunction getAggregate(t, e) {\n  const r = __PRIVATE_cast(t.firestore, Firestore),\n    n = __PRIVATE_getDatastore(r),\n    i = function __PRIVATE_mapToArray(t, e) {\n      const r = [];\n      for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && r.push(e(t[n], n, t));\n      return r;\n    }(e, (t, e) => new __PRIVATE_AggregateImpl(e, t.aggregateType, t._internalFieldPath));\n  // Run the aggregation and convert the results\n  return __PRIVATE_invokeRunAggregationQueryRpc(n, t._query, i).then(e => function __PRIVATE_convertToAggregateQuerySnapshot(t, e, r) {\n    const n = new __PRIVATE_LiteUserDataWriter(t);\n    return new AggregateQuerySnapshot(e, n, r);\n  }\n  /**\n  * Create an AggregateField object that can be used to compute the sum of\n  * a specified field over a range of documents in the result set of a query.\n  * @param field Specifies the field to sum across the result set.\n  */(r, t, e));\n}\nfunction sum(t) {\n  return new AggregateField(\"sum\", __PRIVATE_fieldPathFromArgument$1(\"sum\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n */\nfunction average(t) {\n  return new AggregateField(\"avg\", __PRIVATE_fieldPathFromArgument$1(\"average\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n */\nfunction count() {\n  return new AggregateField(\"count\");\n}\n\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n */\nfunction aggregateFieldEqual(t, e) {\n  var r, n;\n  return t instanceof AggregateField && e instanceof AggregateField && t.aggregateType === e.aggregateType && (null === (r = t._internalFieldPath) || void 0 === r ? void 0 : r.canonicalString()) === (null === (n = e._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString());\n}\n\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */\nfunction aggregateQuerySnapshotEqual(t, e) {\n  return queryEqual(t.query, e.query) && deepEqual(t.data(), e.data());\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */\nfunction deleteField() {\n  return new __PRIVATE_DeleteFieldValueImpl(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */\nfunction serverTimestamp() {\n  return new __PRIVATE_ServerTimestampFieldValueImpl(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */\nfunction arrayUnion(...t) {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new __PRIVATE_ArrayUnionFieldValueImpl(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nfunction arrayRemove(...t) {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new __PRIVATE_ArrayRemoveFieldValueImpl(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\nfunction increment(t) {\n  return new __PRIVATE_NumericIncrementFieldValueImpl(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */\nclass WriteBatch {\n  /** @hideconstructor */\n  constructor(t, e) {\n    this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, this._dataReader = __PRIVATE_newUserDataReader(t);\n  }\n  set(t, e, r) {\n    this._verifyNotCommitted();\n    const n = __PRIVATE_validateReference(t, this._firestore),\n      i = __PRIVATE_applyFirestoreDataConverter(n.converter, e, r),\n      s = __PRIVATE_parseSetData(this._dataReader, \"WriteBatch.set\", n._key, i, null !== n.converter, r);\n    return this._mutations.push(s.toMutation(n._key, Precondition.none())), this;\n  }\n  update(t, e, r, ...n) {\n    this._verifyNotCommitted();\n    const i = __PRIVATE_validateReference(t, this._firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    let s;\n    return s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"WriteBatch.update\", i._key, e, r, n) : __PRIVATE_parseUpdateData(this._dataReader, \"WriteBatch.update\", i._key, e), this._mutations.push(s.toMutation(i._key, Precondition.exists(!0))), this;\n  }\n  /**\n   * Deletes the document referred to by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be deleted.\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\n   */\n  delete(t) {\n    this._verifyNotCommitted();\n    const e = __PRIVATE_validateReference(t, this._firestore);\n    return this._mutations = this._mutations.concat(new __PRIVATE_DeleteMutation(e._key, Precondition.none())), this;\n  }\n  /**\n   * Commits all of the writes in this write batch as a single atomic unit.\n   *\n   * The result of these writes will only be reflected in document reads that\n   * occur after the returned promise resolves. If the client is offline, the\n   * write fails. If you would like to see local modifications or buffer writes\n   * until the client is online, use the full Firestore SDK.\n   *\n   * @returns A `Promise` resolved once all of the writes in the batch have been\n   * successfully written to the backend as an atomic unit (note that it won't\n   * resolve while you're offline).\n   */\n  commit() {\n    return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n  }\n  _verifyNotCommitted() {\n    if (this._committed) throw new FirestoreError(w, \"A write batch can no longer be used after commit() has been called.\");\n  }\n}\nfunction __PRIVATE_validateReference(t, e) {\n  if ((t = getModularInstance(t)).firestore !== e) throw new FirestoreError(T, \"Provided document reference is from a different Firestore instance.\");\n  return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */\nfunction writeBatch(t) {\n  const e = __PRIVATE_getDatastore(t = __PRIVATE_cast(t, Firestore));\n  return new WriteBatch(t, t => __PRIVATE_invokeCommitRpc(e, t));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\nclass Transaction$1 {\n  constructor(t) {\n    this.datastore = t,\n    // The version of each document that was read during this transaction.\n    this.readVersions = new Map(), this.mutations = [], this.committed = !1,\n    /**\n     * A deferred usage error that occurred previously in this transaction that\n     * will cause the transaction to fail once it actually commits.\n     */\n    this.lastTransactionError = null,\n    /**\n     * Set of documents that have been written in the transaction.\n     *\n     * When there's more than one write to the same key in a transaction, any\n     * writes after the first are handled differently.\n     */\n    this.writtenDocs = new Set();\n  }\n  async lookup(t) {\n    if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw this.lastTransactionError = new FirestoreError(T, \"Firestore transactions require all reads to be executed before all writes.\"), this.lastTransactionError;\n    const e = await __PRIVATE_invokeBatchGetDocumentsRpc(this.datastore, t);\n    return e.forEach(t => this.recordVersion(t)), e;\n  }\n  set(t, e) {\n    this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n  }\n  update(t, e) {\n    try {\n      this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n    } catch (t) {\n      this.lastTransactionError = t;\n    }\n    this.writtenDocs.add(t.toString());\n  }\n  delete(t) {\n    this.write(new __PRIVATE_DeleteMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n  }\n  async commit() {\n    if (this.ensureCommitNotCalled(), this.lastTransactionError) throw this.lastTransactionError;\n    const t = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(e => {\n      t.delete(e.key.toString());\n    }),\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    t.forEach((t, e) => {\n      const r = DocumentKey.fromPath(e);\n      this.mutations.push(new __PRIVATE_VerifyMutation(r, this.precondition(r)));\n    }), await __PRIVATE_invokeCommitRpc(this.datastore, this.mutations), this.committed = !0;\n  }\n  recordVersion(t) {\n    let e;\n    if (t.isFoundDocument()) e = t.version;else {\n      if (!t.isNoDocument()) throw fail();\n      // Represent a deleted doc using SnapshotVersion.min().\n      e = SnapshotVersion.min();\n    }\n    const r = this.readVersions.get(t.key.toString());\n    if (r) {\n      if (!e.isEqual(r))\n        // This transaction will fail no matter what.\n        throw new FirestoreError(g, \"Document version changed between two reads.\");\n    } else this.readVersions.set(t.key.toString(), e);\n  }\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n  precondition(t) {\n    const e = this.readVersions.get(t.toString());\n    return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(SnapshotVersion.min()) ? Precondition.exists(!1) : Precondition.updateTime(e) : Precondition.none();\n  }\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n  preconditionForUpdate(t) {\n    const e = this.readVersions.get(t.toString());\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(t.toString()) && e) {\n      if (e.isEqual(SnapshotVersion.min()))\n        // The document doesn't exist, so fail the transaction.\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(T, \"Can't update a document that doesn't exist.\");\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(e);\n    }\n    // Document was not read, so we just use the preconditions for a blind\n    // update.\n    return Precondition.exists(!0);\n  }\n  write(t) {\n    this.ensureCommitNotCalled(), this.mutations.push(t);\n  }\n  ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst z = {\n  maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass __PRIVATE_TransactionRunner {\n  constructor(t, e, r, n, i) {\n    this.asyncQueue = t, this.datastore = e, this.options = r, this.updateFunction = n, this.deferred = i, this.Et = r.maxAttempts, this.At = new __PRIVATE_ExponentialBackoff(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\n  }\n  /** Runs the transaction and sets the result on deferred. */\n  Tt() {\n    this.Et -= 1, this.Rt();\n  }\n  Rt() {\n    this.At.G(async () => {\n      const t = new Transaction$1(this.datastore),\n        e = this.Pt(t);\n      e && e.then(e => {\n        this.asyncQueue.enqueueAndForget(() => t.commit().then(() => {\n          this.deferred.resolve(e);\n        }).catch(t => {\n          this.It(t);\n        }));\n      }).catch(t => {\n        this.It(t);\n      });\n    });\n  }\n  Pt(t) {\n    try {\n      const e = this.updateFunction(t);\n      return !__PRIVATE_isNullOrUndefined(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), null);\n    } catch (t) {\n      // Do not retry errors thrown by user provided updateFunction.\n      return this.deferred.reject(t), null;\n    }\n  }\n  It(t) {\n    this.Et > 0 && this.Vt(t) ? (this.Et -= 1, this.asyncQueue.enqueueAndForget(() => (this.Rt(), Promise.resolve()))) : this.deferred.reject(t);\n  }\n  Vt(t) {\n    if (\"FirebaseError\" === t.name) {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const e = t.code;\n      return \"aborted\" === e || \"failed-precondition\" === e || \"already-exists\" === e || !\n      /**\n      * Determines whether an error code represents a permanent error when received\n      * in response to a non-write operation.\n      *\n      * See isPermanentWriteError for classifying write errors.\n      */\n      function __PRIVATE_isPermanentError(t) {\n        switch (t) {\n          default:\n            return fail();\n          case m:\n          case A:\n          case R:\n          case y:\n          case D:\n          case b:\n          // Unauthenticated means something went wrong with our token and we need\n          // to retry with new credentials which will happen automatically.\n          case p:\n            return !1;\n          case T:\n          case P:\n          case I:\n          case V:\n          case w:\n          // Aborted might be retried in some scenarios, but that is dependant on\n          // the context and should handled individually by the calling code.\n          // See https://cloud.google.com/apis/design/errors.\n          case g:\n          case F:\n          case v:\n          case C:\n            return !0;\n        }\n      }(e);\n    }\n    return !1;\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */\nfunction getDocument() {\n  // `document` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\nclass DelayedOperation {\n  constructor(t, e, r, n, i) {\n    this.asyncQueue = t, this.timerId = e, this.targetTimeMs = r, this.op = n, this.removalCallback = i, this.deferred = new __PRIVATE_Deferred(), this.then = this.deferred.promise.then.bind(this.deferred.promise),\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(t => {});\n  }\n  get promise() {\n    return this.deferred.promise;\n  }\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue - The queue to schedule the operation on.\n   * @param id - A Timer ID identifying the type of operation this is.\n   * @param delayMs - The delay (ms) before the operation should be scheduled.\n   * @param op - The operation to run.\n   * @param removalCallback - A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n  static createAndSchedule(t, e, r, n, i) {\n    const s = Date.now() + r,\n      o = new DelayedOperation(t, e, s, n, i);\n    return o.start(r), o;\n  }\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n  start(t) {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), t);\n  }\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n  skipDelay() {\n    return this.handleDelayElapsed();\n  }\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n  cancel(t) {\n    null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(m, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n  }\n  handleDelayElapsed() {\n    this.asyncQueue.enqueueAndForget(() => null !== this.timerHandle ? (this.clearTimeout(), this.op().then(t => this.deferred.resolve(t))) : Promise.resolve());\n  }\n  clearTimeout() {\n    null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);\n  }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass __PRIVATE_AsyncQueueImpl {\n  constructor() {\n    // The last promise in the queue.\n    this.yt = Promise.resolve(),\n    // A list of retryable operations. Retryable operations are run in order and\n    // retried with backoff.\n    this.wt = [],\n    // Is this AsyncQueue being shut down? Once it is set to true, it will not\n    // be changed again.\n    this.gt = !1,\n    // Operations scheduled to be queued in the future. Operations are\n    // automatically removed after they are run or canceled.\n    this.Ft = [],\n    // visible for testing\n    this.vt = null,\n    // Flag set while there's an outstanding AsyncQueue operation, used for\n    // assertion sanity-checks.\n    this.Dt = !1,\n    // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n    this.bt = !1,\n    // List of TimerIds to fast-forward delays for.\n    this.Ct = [],\n    // Backoff timer used to schedule retries for retryable operations\n    this.At = new __PRIVATE_ExponentialBackoff(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */),\n    // Visibility handler that triggers an immediate retry of all retryable\n    // operations. Meant to speed up recovery when we regain file system access\n    // after page comes into foreground.\n    this.St = () => {\n      const t = getDocument();\n      t && __PRIVATE_logDebug(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), this.At.J();\n    };\n    const t = getDocument();\n    t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.St);\n  }\n  get isShuttingDown() {\n    return this.gt;\n  }\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n  enqueueAndForget(t) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(t);\n  }\n  enqueueAndForgetEvenWhileRestricted(t) {\n    this.Nt(),\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.Ot(t);\n  }\n  enterRestrictedMode(t) {\n    if (!this.gt) {\n      this.gt = !0, this.bt = t || !1;\n      const e = getDocument();\n      e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.St);\n    }\n  }\n  enqueue(t) {\n    if (this.Nt(), this.gt)\n      // Return a Promise which never resolves.\n      return new Promise(() => {});\n    // Create a deferred Promise that we can return to the callee. This\n    // allows us to return a \"hanging Promise\" only to the callee and still\n    // advance the queue even when the operation is not run.\n    const e = new __PRIVATE_Deferred();\n    return this.Ot(() => this.gt && this.bt ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise)).then(() => e.promise);\n  }\n  enqueueRetryable(t) {\n    this.enqueueAndForget(() => (this.wt.push(t), this.qt()));\n  }\n  /**\n   * Runs the next operation from the retryable queue. If the operation fails,\n   * reschedules with backoff.\n   */\n  async qt() {\n    if (0 !== this.wt.length) {\n      try {\n        await this.wt[0](), this.wt.shift(), this.At.reset();\n      } catch (t) {\n        if (!\n        /**\n        * @license\n        * Copyright 2017 Google LLC\n        *\n        * Licensed under the Apache License, Version 2.0 (the \"License\");\n        * you may not use this file except in compliance with the License.\n        * You may obtain a copy of the License at\n        *\n        *   http://www.apache.org/licenses/LICENSE-2.0\n        *\n        * Unless required by applicable law or agreed to in writing, software\n        * distributed under the License is distributed on an \"AS IS\" BASIS,\n        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        * See the License for the specific language governing permissions and\n        * limitations under the License.\n        */\n        /** Verifies whether `e` is an IndexedDbTransactionError. */\n        function __PRIVATE_isIndexedDbTransactionError(t) {\n          // Use name equality, as instanceof checks on errors don't work with errors\n          // that wrap other errors.\n          return \"IndexedDbTransactionError\" === t.name;\n        }\n        /**\n        * @license\n        * Copyright 2020 Google LLC\n        *\n        * Licensed under the Apache License, Version 2.0 (the \"License\");\n        * you may not use this file except in compliance with the License.\n        * You may obtain a copy of the License at\n        *\n        *   http://www.apache.org/licenses/LICENSE-2.0\n        *\n        * Unless required by applicable law or agreed to in writing, software\n        * distributed under the License is distributed on an \"AS IS\" BASIS,\n        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        * See the License for the specific language governing permissions and\n        * limitations under the License.\n        */(t)) throw t;\n        // Failure will be handled by AsyncQueue\n        __PRIVATE_logDebug(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n      }\n      this.wt.length > 0 &&\n      // If there are additional operations, we re-schedule `retryNextOp()`.\n      // This is necessary to run retryable operations that failed during\n      // their initial attempt since we don't know whether they are already\n      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n      // call scheduled here.\n      // Since `backoffAndRun()` cancels an existing backoff and schedules a\n      // new backoff on every call, there is only ever a single additional\n      // operation in the queue.\n      this.At.G(() => this.qt());\n    }\n  }\n  Ot(t) {\n    const e = this.yt.then(() => (this.Dt = !0, t().catch(t => {\n      this.vt = t, this.Dt = !1;\n      const e =\n      /**\n      * Chrome includes Error.message in Error.stack. Other browsers do not.\n      * This returns expected output of message + stack when available.\n      * @param error - Error or FirestoreError\n      */\n      function __PRIVATE_getMessageOrStack(t) {\n        let e = t.message || \"\";\n        t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n        return e;\n      }\n      /**\n      * @license\n      * Copyright 2020 Google LLC\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *   http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */\n      // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n      // legacy SDK.\n      /**\n      * A reference to a transaction.\n      *\n      * The `Transaction` object passed to a transaction's `updateFunction` provides\n      * the methods to read and write data within the transaction context. See\n      * {@link runTransaction}.\n      */(t);\n      // Re-throw the error so that this.tail becomes a rejected Promise and\n      // all further attempts to chain (via .then) will just short-circuit\n      // and return the rejected Promise.\n      throw __PRIVATE_logError(\"INTERNAL UNHANDLED ERROR: \", e), t;\n    }).then(t => (this.Dt = !1, t))));\n    return this.yt = e, e;\n  }\n  enqueueAfterDelay(t, e, r) {\n    this.Nt(),\n    // Fast-forward delays for timerIds that have been overriden.\n    this.Ct.indexOf(t) > -1 && (e = 0);\n    const n = DelayedOperation.createAndSchedule(this, t, e, r, t => this.Bt(t));\n    return this.Ft.push(n), n;\n  }\n  Nt() {\n    this.vt && fail();\n  }\n  verifyOperationInProgress() {}\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n  async $t() {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let t;\n    do {\n      t = this.yt, await t;\n    } while (t !== this.yt);\n  }\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n  Qt(t) {\n    for (const e of this.Ft) if (e.timerId === t) return !0;\n    return !1;\n  }\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId - Delayed operations up to and including this TimerId\n   * will be drained. Pass TimerId.All to run all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n  Lt(t) {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.$t().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.Ft.sort((t, e) => t.targetTimeMs - e.targetTimeMs);\n      for (const e of this.Ft) if (e.skipDelay(), \"all\" /* TimerId.All */ !== t && e.timerId === t) break;\n      return this.$t();\n    });\n  }\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n  Mt(t) {\n    this.Ct.push(t);\n  }\n  /** Called once a DelayedOperation is run or canceled. */\n  Bt(t) {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const e = this.Ft.indexOf(t);\n    this.Ft.splice(e, 1);\n  }\n}\nclass Transaction {\n  /** @hideconstructor */\n  constructor(t, e) {\n    this._firestore = t, this._transaction = e, this._dataReader = __PRIVATE_newUserDataReader(t);\n  }\n  /**\n   * Reads the document referenced by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be read.\n   * @returns A `DocumentSnapshot` with the read data.\n   */\n  get(t) {\n    const e = __PRIVATE_validateReference(t, this._firestore),\n      r = new __PRIVATE_LiteUserDataWriter(this._firestore);\n    return this._transaction.lookup([e._key]).then(t => {\n      if (!t || 1 !== t.length) return fail();\n      const n = t[0];\n      if (n.isFoundDocument()) return new DocumentSnapshot(this._firestore, r, n.key, n, e.converter);\n      if (n.isNoDocument()) return new DocumentSnapshot(this._firestore, r, e._key, null, e.converter);\n      throw fail();\n    });\n  }\n  set(t, e, r) {\n    const n = __PRIVATE_validateReference(t, this._firestore),\n      i = __PRIVATE_applyFirestoreDataConverter(n.converter, e, r),\n      s = __PRIVATE_parseSetData(this._dataReader, \"Transaction.set\", n._key, i, null !== n.converter, r);\n    return this._transaction.set(n._key, s), this;\n  }\n  update(t, e, r, ...n) {\n    const i = __PRIVATE_validateReference(t, this._firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    let s;\n    return s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"Transaction.update\", i._key, e, r, n) : __PRIVATE_parseUpdateData(this._dataReader, \"Transaction.update\", i._key, e), this._transaction.update(i._key, s), this;\n  }\n  /**\n   * Deletes the document referred to by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be deleted.\n   * @returns This `Transaction` instance. Used for chaining method calls.\n   */\n  delete(t) {\n    const e = __PRIVATE_validateReference(t, this._firestore);\n    return this._transaction.delete(e._key), this;\n  }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */\nfunction runTransaction(t, e, r) {\n  const n = __PRIVATE_getDatastore(t = __PRIVATE_cast(t, Firestore)),\n    i = Object.assign(Object.assign({}, z), r);\n  !function __PRIVATE_validateTransactionOptions(t) {\n    if (t.maxAttempts < 1) throw new FirestoreError(T, \"Max attempts must be at least 1\");\n  }(i);\n  const s = new __PRIVATE_Deferred();\n  return new __PRIVATE_TransactionRunner(function __PRIVATE_newAsyncQueue() {\n    return new __PRIVATE_AsyncQueueImpl();\n  }(), n, i, r => e(new Transaction(t, r)), s).Tt(), s.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */\n!function __PRIVATE_registerFirestore() {\n  !function __PRIVATE_setSDKVersion(t) {\n    d = t;\n  }(`${SDK_VERSION}_lite`), _registerComponent(new Component(\"firestore/lite\", (t, {\n    instanceIdentifier: e,\n    options: r\n  }) => {\n    const n = t.getProvider(\"app\").getImmediate(),\n      i = new Firestore(new __PRIVATE_LiteAuthCredentialsProvider(t.getProvider(\"auth-internal\")), new __PRIVATE_LiteAppCheckTokenProvider(t.getProvider(\"app-check-internal\")), function __PRIVATE_databaseIdFromApp(t, e) {\n        if (!Object.prototype.hasOwnProperty.apply(t.options, [\"projectId\"])) throw new FirestoreError(T, '\"projectId\" not provided in firebase.initializeApp.');\n        return new DatabaseId(t.options.projectId, e);\n      }\n      /**\n      * @license\n      * Copyright 2017 Google LLC\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *   http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */(n, e), n);\n    return r && i._setSettings(r), i;\n  }, \"PUBLIC\").setMultipleInstances(!0)),\n  // RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\n  registerVersion(\"firestore-lite\", \"4.6.3\", \"\"), registerVersion(\"firestore-lite\", \"4.6.3\", \"esm2017\");\n}();\nexport { AggregateField, AggregateQuerySnapshot, Bytes, CollectionReference, DocumentReference, DocumentSnapshot, FieldPath, FieldValue, Firestore, FirestoreError, GeoPoint, Query, QueryCompositeFilterConstraint, QueryConstraint, QueryDocumentSnapshot, QueryEndAtConstraint, QueryFieldFilterConstraint, QueryLimitConstraint, QueryOrderByConstraint, QuerySnapshot, QueryStartAtConstraint, Timestamp, Transaction, WriteBatch, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, average, collection, collectionGroup, connectFirestoreEmulator, count, deleteDoc, deleteField, doc, documentId, endAt, endBefore, getAggregate, getCount, getDoc, getDocs, getFirestore, increment, initializeFirestore, limit, limitToLast, or, orderBy, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setLogLevel, snapshotEqual, startAfter, startAt, sum, terminate, updateDoc, where, writeBatch };","map":{"version":3,"names":["_registerComponent","registerVersion","_getProvider","getApp","_removeServiceInstance","SDK_VERSION","Component","Logger","LogLevel","FirebaseError","getDefaultEmulatorHostnameAndPort","createMockUserToken","getModularInstance","deepEqual","User","constructor","t","uid","isAuthenticated","toKey","isEqual","UNAUTHENTICATED","GOOGLE_CREDENTIALS","FIRST_PARTY","MOCK_USER","d","f","setLogLevel","__PRIVATE_logDebug","e","logLevel","DEBUG","r","map","__PRIVATE_argToString","debug","__PRIVATE_logError","ERROR","error","__PRIVATE_logWarn","WARN","warn","__PRIVATE_formatJSON","JSON","stringify","fail","Error","__PRIVATE_hardAssert","__PRIVATE_debugCast","E","m","A","T","R","P","I","V","p","y","w","g","F","v","D","b","C","FirestoreError","code","message","toString","name","__PRIVATE_Deferred","promise","Promise","resolve","reject","__PRIVATE_OAuthToken","user","type","headers","Map","set","__PRIVATE_EmptyAuthCredentialsProvider","getToken","invalidateToken","start","enqueueRetryable","shutdown","__PRIVATE_EmulatorAuthCredentialsProvider","token","changeListener","__PRIVATE_LiteAuthCredentialsProvider","auth","onInit","then","accessToken","getUid","__PRIVATE_FirstPartyToken","i","o","u","l","__PRIVATE_FirstPartyAuthCredentialsProvider","AppCheckToken","value","length","__PRIVATE_LiteAppCheckTokenProvider","h","appCheck","DatabaseInfo","n","s","a","databaseId","appId","persistenceKey","host","ssl","forceLongPolling","autoDetectLongPolling","longPollingOptions","useFetchStreams","DatabaseId","projectId","database","empty","isDefaultDatabase","BasePath","segments","offset","len","comparator","child","slice","limit","forEach","push","construct","popFirst","popLast","firstSegment","lastSegment","get","isEmpty","isPrefixOf","isImmediateParentOf","toArray","Math","min","ResourcePath","canonicalString","join","toUriEncodedString","encodeURIComponent","fromString","indexOf","split","filter","emptyPath","S","FieldPath$1","isValidIdentifier","test","replace","isKeyField","keyField","fromServerFormat","__PRIVATE_addCurrentSegment","DocumentKey","path","fromPath","fromName","collectionGroup","hasCollectionId","getCollectionGroup","getCollectionPath","isDocumentKey","fromSegments","__PRIVATE_validateNonEmptyArgument","__PRIVATE_validateDocumentPath","__PRIVATE_validateCollectionPath","__PRIVATE_valueDescription","substring","Array","__PRIVATE_tryGetCustomObjectType","__PRIVATE_cast","_delegate","__PRIVATE_validatePositiveNumber","__PRIVATE_cloneLongPollingOptions","timeoutSeconds","N","__PRIVATE_generateUniqueDebugId","__PRIVATE_generateInitialUniqueDebugId","round","random","__PRIVATE_isNullOrUndefined","__PRIVATE_isNegativeZero","O","BatchGetDocuments","Commit","RunQuery","RunAggregationQuery","q","B","__PRIVATE_mapCodeFromHttpStatus","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","__PRIVATE_FetchConnection","__PRIVATE_RestConnection","databaseInfo","__PRIVATE_getGoogApiClientValue","terminate","method","body","status","statusText","ok","json","isArray","__PRIVATE_AggregateImpl","alias","aggregateType","fieldPath","__PRIVATE_randomBytes","self","crypto","msCrypto","Uint8Array","getRandomValues","floor","__PRIVATE_AutoId","newId","charAt","__PRIVATE_primitiveComparator","__PRIVATE_arrayEquals","every","__PRIVATE_objectSize","Object","prototype","hasOwnProperty","call","__PRIVATE_Base64DecodeError","arguments","ByteString","binaryString","fromBase64String","__PRIVATE_decodeBase64","atob","DOMException","fromUint8Array","__PRIVATE_binaryStringFromUint8Array","String","fromCharCode","Symbol","iterator","next","charCodeAt","done","toBase64","__PRIVATE_encodeBase64","btoa","toUint8Array","__PRIVATE_uint8ArrayFromBinaryString","approximateByteSize","compareTo","EMPTY_BYTE_STRING","$","RegExp","__PRIVATE_normalizeTimestamp","exec","substr","Number","Date","seconds","getTime","nanos","__PRIVATE_normalizeNumber","__PRIVATE_normalizeByteString","Timestamp","nanoseconds","now","fromMillis","fromDate","toDate","toMillis","_compareTo","toJSON","valueOf","padStart","__PRIVATE_isServerTimestamp","mapValue","fields","__type__","stringValue","__PRIVATE_getPreviousValue","__previous_value__","__PRIVATE_getLocalWriteTime","__local_write_time__","timestampValue","Q","__PRIVATE_typeOrder","__PRIVATE_isMaxValue","__PRIVATE_valueEquals","booleanValue","__PRIVATE_timestampEquals","__PRIVATE_blobEquals","bytesValue","referenceValue","__PRIVATE_geoPointEquals","geoPointValue","latitude","longitude","__PRIVATE_numberEquals","integerValue","doubleValue","isNaN","arrayValue","values","__PRIVATE_objectEquals","__PRIVATE_arrayValueContains","find","__PRIVATE_valueCompare","__PRIVATE_compareNumbers","__PRIVATE_compareTimestamps","__PRIVATE_compareBlobs","__PRIVATE_compareReferences","__PRIVATE_compareGeoPoints","__PRIVATE_compareArrays","__PRIVATE_compareMaps","keys","sort","__PRIVATE_refValue","__PRIVATE_isNullValue","__PRIVATE_isNanValue","__PRIVATE_isMapValue","__PRIVATE_deepClone","assign","Bound","position","inclusive","__PRIVATE_boundEquals","Filter","FieldFilter","field","op","create","createKeyFieldInFilter","__PRIVATE_KeyFieldFilter","__PRIVATE_ArrayContainsFilter","__PRIVATE_InFilter","__PRIVATE_NotInFilter","__PRIVATE_ArrayContainsAnyFilter","__PRIVATE_KeyFieldInFilter","__PRIVATE_KeyFieldNotInFilter","matches","data","matchesComparison","isInequality","getFlattenedFilters","getFilters","CompositeFilter","filters","__PRIVATE_compositeFilterIsConjunction","reduce","concat","__PRIVATE_filterEquals","__PRIVATE_fieldFilterEquals","__PRIVATE_compositeFilterEquals","key","__PRIVATE_extractDocumentKeysFromArrayValue","some","nullValue","OrderBy","dir","__PRIVATE_orderByEquals","SnapshotVersion","timestamp","fromTimestamp","max","toMicroseconds","toTimestamp","SortedMap","root","LLRBNode","EMPTY","insert","copy","BLACK","remove","left","right","size","minKey","maxKey","inorderTraversal","reverseTraversal","getIterator","SortedMapIterator","getIteratorFrom","getReverseIterator","getReverseIteratorFrom","isReverse","nodeStack","getNext","pop","hasNext","peek","color","RED","fixUp","removeMin","isRed","moveRedLeft","rotateRight","moveRedRight","rotateLeft","colorFlip","checkMaxDepth","check","pow","LLRBEmptyNode","SortedSet","has","first","last","forEachInRange","forEachWhile","firstAfterOrEqual","SortedSetIterator","add","delete","unionWith","iter","FieldMask","covers","ObjectValue","getFieldsMap","setAll","applyChanges","clone","MutableDocument","documentType","version","readTime","createTime","documentState","newInvalidDocument","newFoundDocument","newNoDocument","newUnknownDocument","convertToFoundDocument","convertToNoDocument","convertToUnknownDocument","setHasCommittedMutations","setHasLocalMutations","setReadTime","hasLocalMutations","hasCommittedMutations","hasPendingWrites","isValidDocument","isFoundDocument","isNoDocument","isUnknownDocument","mutableCopy","__PRIVATE_TargetImpl","orderBy","startAt","endAt","__PRIVATE_newTarget","__PRIVATE_QueryImpl","explicitOrderBy","limitType","__PRIVATE_isCollectionGroupQuery","__PRIVATE_queryNormalizedOrderBy","Set","__PRIVATE_getInequalityFilterFields","__PRIVATE_queryToTarget","__PRIVATE__queryToTarget","__PRIVATE_queryWithAddedFilter","__PRIVATE_queryEquals","__PRIVATE_targetEquals","toNumber","isSafeInteger","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","__PRIVATE_toInteger","__PRIVATE_toDouble","useProto3Json","TransformOperation","_","__PRIVATE_ServerTimestampTransform","__PRIVATE_ArrayUnionTransformOperation","elements","__PRIVATE_ArrayRemoveTransformOperation","__PRIVATE_NumericIncrementTransformOperation","serializer","FieldTransform","transform","Precondition","updateTime","exists","none","isNone","Mutation","__PRIVATE_SetMutation","precondition","fieldTransforms","getFieldMask","__PRIVATE_PatchMutation","fieldMask","__PRIVATE_DeleteMutation","__PRIVATE_VerifyMutation","L","asc","desc","M","in","x","and","or","JsonProtoSerializer","toISOString","__PRIVATE_toBytes","__PRIVATE_toVersion","__PRIVATE_fromVersion","__PRIVATE_toResourceName","__PRIVATE_toResourcePath","__PRIVATE_fullyQualifiedPrefixPath","__PRIVATE_toName","__PRIVATE_fromResourceName","__PRIVATE_isValidResourceName","__PRIVATE_extractLocalPathFromResourceName","__PRIVATE_toMutationDocument","__PRIVATE_fromBatchGetDocumentsResponse","__PRIVATE_fromFound","found","__PRIVATE_fromMissing","missing","toMutation","update","updateMask","__PRIVATE_toDocumentMask","verify","updateTransforms","__PRIVATE_toFieldTransform","setToServerValue","appendMissingElements","removeAllFromArray","increment","currentDocument","__PRIVATE_toPrecondition","__PRIVATE_toQueryTarget","structuredQuery","from","collectionId","allDescendants","parent","__PRIVATE_toQueryPath","__PRIVATE_toFilters","__PRIVATE_toFilter","where","__PRIVATE_toOrder","__PRIVATE_toPropertyOrder","__PRIVATE_toFieldPathReference","direction","__PRIVATE_toDirection","__PRIVATE_toInt32Proto","__PRIVATE_toStartAtCursor","before","__PRIVATE_toEndAtCursor","__PRIVATE_toOperatorName","__PRIVATE_toCompositeOperatorName","__PRIVATE_toUnaryOrFieldFilter","unaryFilter","fieldFilter","__PRIVATE_toCompositeFilter","compositeFilter","fieldPaths","__PRIVATE_newSerializer","__PRIVATE_ExponentialBackoff","timerId","k","U","j","W","reset","K","G","cancel","H","enqueueAfterDelay","J","skipDelay","__PRIVATE_DatastoreImpl","Datastore","authCredentials","appCheckCredentials","connection","Y","Z","all","catch","__PRIVATE_invokeCommitRpc","writes","__PRIVATE_invokeBatchGetDocumentsRpc","documents","__PRIVATE_invokeRunQueryRpc","document","__PRIVATE_fromDocument","__PRIVATE_invokeRunAggregationQueryRpc","request","X","__PRIVATE_toRunAggregationQueryRequest","count","avg","sum","structuredAggregationQuery","aggregations","__PRIVATE_queryToAggregateTarget","result","aggregateFields","__PRIVATE_getDatastore","_terminated","__PRIVATE_newConnection","fetch","bind","__PRIVATE_makeDatabaseInfo","experimentalForceLongPolling","experimentalAutoDetectLongPolling","experimentalLongPollingOptions","_databaseId","app","options","_persistenceKey","_freezeSettings","__PRIVATE_newDatastore","_authCredentials","_appCheckCredentials","FirestoreSettingsImpl","credentials","ignoreUndefinedProperties","localCache","cacheSizeBytes","__PRIVATE_validateIsNotUsedTogether","__PRIVATE_validateLongPollingOptions","__PRIVATE_longPollingOptionsEqual","Firestore","_app","_settings","_settingsFrozen","_initialized","_terminateTask","_setSettings","__PRIVATE_makeAuthCredentialsProvider","sessionIndex","iamToken","authTokenFactory","client","_getSettings","_delete","_terminate","settings","__PRIVATE_removeComponents","initializeFirestore","isInitialized","initialize","instanceIdentifier","getFirestore","getImmediate","identifier","connectFirestoreEmulator","mockUserToken","sub","user_id","AggregateField","_internalFieldPath","AggregateQuerySnapshot","_userDataWriter","_data","query","convertObjectMap","Query","converter","_query","firestore","withConverter","DocumentReference","_key","_path","id","CollectionReference","__PRIVATE_newQueryForPath","collection","__PRIVATE_newQueryForCollectionGroup","doc","refEqual","queryEqual","Bytes","_byteString","FieldPath","_internalPath","documentId","FieldValue","_methodName","GeoPoint","isFinite","_lat","_long","ParsedSetData","ParsedUpdateData","__PRIVATE_isWrite","__PRIVATE_ParseContextImpl","tt","et","rt","nt","it","st","ot","ut","_t","__PRIVATE_createError","methodName","ct","lt","contains","__PRIVATE_UserDataReader","ht","__PRIVATE_newUserDataReader","__PRIVATE_parseSetData","merge","mergeFields","__PRIVATE_validatePlainObject","__PRIVATE_parseObject","__PRIVATE_fieldPathFromArgument$1","__PRIVATE_fieldMaskContains","__PRIVATE_DeleteFieldValueImpl","_toFieldTransform","__PRIVATE_createSentinelChildContext","__PRIVATE_ServerTimestampFieldValueImpl","__PRIVATE_ArrayUnionFieldValueImpl","dt","__PRIVATE_parseData","__PRIVATE_ArrayRemoveFieldValueImpl","__PRIVATE_NumericIncrementFieldValueImpl","ft","__PRIVATE_parseUpdateData","__PRIVATE_fieldPathFromDotSeparatedString","__PRIVATE_parseUpdateVarargs","c","__PRIVATE_parseQueryValue","__PRIVATE_looksLikeJsonObject","__PRIVATE_parseSentinelFieldValue","__PRIVATE_parseArray","__PRIVATE_parseScalarValue","__PRIVATE_isPlainObject","getPrototypeOf","search","DocumentSnapshot","_firestore","_document","_converter","ref","QueryDocumentSnapshot","fromFirestore","convertValue","__PRIVATE_fieldPathFromArgument","QuerySnapshot","_docs","docs","snapshotEqual","AppliableConstraint","QueryConstraint","__PRIVATE_validateQueryConstraintArray","QueryCompositeFilterConstraint","QueryFieldFilterConstraint","_apply","_field","_op","_value","_create","_parse","__PRIVATE_validateNewFieldFilter","__PRIVATE_newQueryFilter","__PRIVATE_validateDisjunctiveFilterElements","__PRIVATE_parseDocumentIdValue","_queryConstraints","_getOperator","__PRIVATE_validateNewFilter","_getQueryConstraints","__PRIVATE_validateQueryFilterConstraint","QueryOrderByConstraint","_direction","__PRIVATE_newQueryOrderBy","__PRIVATE_queryWithAddedOrderBy","QueryLimitConstraint","_limit","_limitType","__PRIVATE_queryWithLimit","limitToLast","QueryStartAtConstraint","_docOrFields","_inclusive","__PRIVATE_newQueryBoundFromDocOrFields","__PRIVATE_queryWithStartAt","startAfter","QueryEndAtConstraint","__PRIVATE_queryWithEndAt","endBefore","__PRIVATE_newQueryBoundFromDocument","__PRIVATE_newQueryBoundFromFields","__PRIVATE_findOpInsideFilters","__PRIVATE_conflictingOps","__PRIVATE_applyFirestoreDataConverter","toFirestore","__PRIVATE_LiteUserDataWriter","AbstractUserDataWriter","convertTimestamp","convertServerTimestamp","convertBytes","convertReference","convertGeoPoint","convertArray","convertObject","convertDocumentKey","getDoc","getDocs","__PRIVATE_validateHasExplicitOrderByForLimitToLast","reverse","setDoc","updateDoc","deleteDoc","addDoc","getCount","getAggregate","__PRIVATE_mapToArray","__PRIVATE_convertToAggregateQuerySnapshot","average","aggregateFieldEqual","aggregateQuerySnapshotEqual","deleteField","serverTimestamp","arrayUnion","arrayRemove","WriteBatch","_commitHandler","_mutations","_committed","_dataReader","_verifyNotCommitted","__PRIVATE_validateReference","commit","writeBatch","Transaction$1","datastore","readVersions","mutations","committed","lastTransactionError","writtenDocs","lookup","ensureCommitNotCalled","recordVersion","write","preconditionForUpdate","z","maxAttempts","__PRIVATE_TransactionRunner","asyncQueue","updateFunction","deferred","Et","At","Tt","Rt","Pt","enqueueAndForget","It","Vt","__PRIVATE_isPermanentError","getDocument","DelayedOperation","targetTimeMs","removalCallback","createAndSchedule","timerHandle","setTimeout","handleDelayElapsed","clearTimeout","__PRIVATE_AsyncQueueImpl","yt","wt","gt","Ft","vt","Dt","bt","Ct","St","visibilityState","addEventListener","isShuttingDown","enqueue","enqueueAndForgetEvenWhileRestricted","Nt","Ot","enterRestrictedMode","removeEventListener","qt","shift","__PRIVATE_isIndexedDbTransactionError","__PRIVATE_getMessageOrStack","stack","includes","Bt","verifyOperationInProgress","$t","Qt","Lt","Mt","splice","Transaction","_transaction","runTransaction","__PRIVATE_validateTransactionOptions","__PRIVATE_newAsyncQueue","__PRIVATE_registerFirestore","__PRIVATE_setSDKVersion","getProvider","__PRIVATE_databaseIdFromApp","apply","setMultipleInstances"],"sources":["/Users/crisdev/Documents/Dev projects/renting project/node_modules/@firebase/firestore/dist/lite/index.browser.esm2017.js"],"sourcesContent":["import { _registerComponent, registerVersion, _getProvider, getApp, _removeServiceInstance, SDK_VERSION } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { FirebaseError, getDefaultEmulatorHostnameAndPort, createMockUserToken, getModularInstance, deepEqual } from '@firebase/util';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass User {\n    constructor(t) {\n        this.uid = t;\n    }\n    isAuthenticated() {\n        return null != this.uid;\n    }\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */    toKey() {\n        return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n    }\n    isEqual(t) {\n        return t.uid === this.uid;\n    }\n}\n\n/** A user with a null UID. */ User.UNAUTHENTICATED = new User(null), \n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nUser.GOOGLE_CREDENTIALS = new User(\"google-credentials-uid\"), User.FIRST_PARTY = new User(\"first-party-uid\"), \nUser.MOCK_USER = new User(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet d = \"10.12.1\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst f = new Logger(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */ function setLogLevel(t) {\n    f.setLogLevel(t);\n}\n\nfunction __PRIVATE_logDebug(t, ...e) {\n    if (f.logLevel <= LogLevel.DEBUG) {\n        const r = e.map(__PRIVATE_argToString);\n        f.debug(`Firestore (${d}): ${t}`, ...r);\n    }\n}\n\nfunction __PRIVATE_logError(t, ...e) {\n    if (f.logLevel <= LogLevel.ERROR) {\n        const r = e.map(__PRIVATE_argToString);\n        f.error(`Firestore (${d}): ${t}`, ...r);\n    }\n}\n\n/**\n * @internal\n */ function __PRIVATE_logWarn(t, ...e) {\n    if (f.logLevel <= LogLevel.WARN) {\n        const r = e.map(__PRIVATE_argToString);\n        f.warn(`Firestore (${d}): ${t}`, ...r);\n    }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */ function __PRIVATE_argToString(t) {\n    if (\"string\" == typeof t) return t;\n    try {\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        /** Formats an object as a JSON string, suitable for logging. */\n        return function __PRIVATE_formatJSON(t) {\n            return JSON.stringify(t);\n        }(t);\n    } catch (e) {\n        // Converting to JSON failed, just log the object directly\n        return t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */ function fail(t = \"Unexpected state\") {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const e = `FIRESTORE (${d}) INTERNAL ASSERTION FAILED: ` + t;\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw __PRIVATE_logError(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */ function __PRIVATE_hardAssert(t, e) {\n    t || fail();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */ function __PRIVATE_debugCast(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const E = \"ok\", m = \"cancelled\", A = \"unknown\", T = \"invalid-argument\", R = \"deadline-exceeded\", P = \"not-found\", I = \"already-exists\", V = \"permission-denied\", p = \"unauthenticated\", y = \"resource-exhausted\", w = \"failed-precondition\", g = \"aborted\", F = \"out-of-range\", v = \"unimplemented\", D = \"internal\", b = \"unavailable\", C = \"data-loss\";\n\n/** An error returned by a Firestore operation. */ class FirestoreError extends FirebaseError {\n    /** @hideconstructor */\n    constructor(\n    /**\n     * The backend error code associated with this error.\n     */\n    t, \n    /**\n     * A custom error description.\n     */\n    e) {\n        super(t, e), this.code = t, this.message = e, \n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class __PRIVATE_Deferred {\n    constructor() {\n        this.promise = new Promise(((t, e) => {\n            this.resolve = t, this.reject = e;\n        }));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class __PRIVATE_OAuthToken {\n    constructor(t, e) {\n        this.user = e, this.type = \"OAuth\", this.headers = new Map, this.headers.set(\"Authorization\", `Bearer ${t}`);\n    }\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */ class __PRIVATE_EmptyAuthCredentialsProvider {\n    getToken() {\n        return Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        // Fire with initial user.\n        t.enqueueRetryable((() => e(User.UNAUTHENTICATED)));\n    }\n    shutdown() {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */ class __PRIVATE_EmulatorAuthCredentialsProvider {\n    constructor(t) {\n        this.token = t, \n        /**\n         * Stores the listener registered with setChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.changeListener = null;\n    }\n    getToken() {\n        return Promise.resolve(this.token);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        this.changeListener = e, \n        // Fire with initial user.\n        t.enqueueRetryable((() => e(this.token.user)));\n    }\n    shutdown() {\n        this.changeListener = null;\n    }\n}\n\n/** Credential provider for the Lite SDK. */ class __PRIVATE_LiteAuthCredentialsProvider {\n    constructor(t) {\n        this.auth = null, t.onInit((t => {\n            this.auth = t;\n        }));\n    }\n    getToken() {\n        return this.auth ? this.auth.getToken().then((t => t ? (__PRIVATE_hardAssert(\"string\" == typeof t.accessToken), \n        new __PRIVATE_OAuthToken(t.accessToken, new User(this.auth.getUid()))) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */ class __PRIVATE_FirstPartyToken {\n    constructor(t, e, r) {\n        this.t = t, this.i = e, this.o = r, this.type = \"FirstParty\", this.user = User.FIRST_PARTY, \n        this.u = new Map;\n    }\n    /**\n     * Gets an authorization token, using a provided factory function, or return\n     * null.\n     */    l() {\n        return this.o ? this.o() : null;\n    }\n    get headers() {\n        this.u.set(\"X-Goog-AuthUser\", this.t);\n        // Use array notation to prevent minification\n        const t = this.l();\n        return t && this.u.set(\"Authorization\", t), this.i && this.u.set(\"X-Goog-Iam-Authorization-Token\", this.i), \n        this.u;\n    }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */ class __PRIVATE_FirstPartyAuthCredentialsProvider {\n    constructor(t, e, r) {\n        this.t = t, this.i = e, this.o = r;\n    }\n    getToken() {\n        return Promise.resolve(new __PRIVATE_FirstPartyToken(this.t, this.i, this.o));\n    }\n    start(t, e) {\n        // Fire with initial uid.\n        t.enqueueRetryable((() => e(User.FIRST_PARTY)));\n    }\n    shutdown() {}\n    invalidateToken() {}\n}\n\nclass AppCheckToken {\n    constructor(t) {\n        this.value = t, this.type = \"AppCheck\", this.headers = new Map, t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n    }\n}\n\n/** AppCheck token provider for the Lite SDK. */ class __PRIVATE_LiteAppCheckTokenProvider {\n    constructor(t) {\n        this.h = t, this.appCheck = null, t.onInit((t => {\n            this.appCheck = t;\n        }));\n    }\n    getToken() {\n        return this.appCheck ? this.appCheck.getToken().then((t => t ? (__PRIVATE_hardAssert(\"string\" == typeof t.token), \n        new AppCheckToken(t.token)) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass DatabaseInfo {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId - The database to use.\n     * @param appId - The Firebase App Id.\n     * @param persistenceKey - A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host - The Firestore backend host to connect to.\n     * @param ssl - Whether to use SSL when connecting.\n     * @param forceLongPolling - Whether to use the forceLongPolling option\n     * when using WebChannel as the network transport.\n     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n     * option when using WebChannel as the network transport.\n     * @param longPollingOptions Options that configure long-polling.\n     * @param useFetchStreams Whether to use the Fetch API instead of\n     * XMLHTTPRequest\n     */\n    constructor(t, e, r, n, i, s, o, a, u) {\n        this.databaseId = t, this.appId = e, this.persistenceKey = r, this.host = n, this.ssl = i, \n        this.forceLongPolling = s, this.autoDetectLongPolling = o, this.longPollingOptions = a, \n        this.useFetchStreams = u;\n    }\n}\n\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass DatabaseId {\n    constructor(t, e) {\n        this.projectId = t, this.database = e || \"(default)\";\n    }\n    static empty() {\n        return new DatabaseId(\"\", \"\");\n    }\n    get isDefaultDatabase() {\n        return \"(default)\" === this.database;\n    }\n    isEqual(t) {\n        return t instanceof DatabaseId && t.projectId === this.projectId && t.database === this.database;\n    }\n}\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass BasePath {\n    constructor(t, e, r) {\n        void 0 === e ? e = 0 : e > t.length && fail(), void 0 === r ? r = t.length - e : r > t.length - e && fail(), \n        this.segments = t, this.offset = e, this.len = r;\n    }\n    get length() {\n        return this.len;\n    }\n    isEqual(t) {\n        return 0 === BasePath.comparator(this, t);\n    }\n    child(t) {\n        const e = this.segments.slice(this.offset, this.limit());\n        return t instanceof BasePath ? t.forEach((t => {\n            e.push(t);\n        })) : e.push(t), this.construct(e);\n    }\n    /** The index of one past the last segment of the path. */    limit() {\n        return this.offset + this.length;\n    }\n    popFirst(t) {\n        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n    }\n    popLast() {\n        return this.construct(this.segments, this.offset, this.length - 1);\n    }\n    firstSegment() {\n        return this.segments[this.offset];\n    }\n    lastSegment() {\n        return this.get(this.length - 1);\n    }\n    get(t) {\n        return this.segments[this.offset + t];\n    }\n    isEmpty() {\n        return 0 === this.length;\n    }\n    isPrefixOf(t) {\n        if (t.length < this.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    isImmediateParentOf(t) {\n        if (this.length + 1 !== t.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    forEach(t) {\n        for (let e = this.offset, r = this.limit(); e < r; e++) t(this.segments[e]);\n    }\n    toArray() {\n        return this.segments.slice(this.offset, this.limit());\n    }\n    static comparator(t, e) {\n        const r = Math.min(t.length, e.length);\n        for (let n = 0; n < r; n++) {\n            const r = t.get(n), i = e.get(n);\n            if (r < i) return -1;\n            if (r > i) return 1;\n        }\n        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n    }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */ class ResourcePath extends BasePath {\n    construct(t, e, r) {\n        return new ResourcePath(t, e, r);\n    }\n    canonicalString() {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join(\"/\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Returns a string representation of this path\n     * where each path segment has been encoded with\n     * `encodeURIComponent`.\n     */    toUriEncodedString() {\n        return this.toArray().map(encodeURIComponent).join(\"/\");\n    }\n    /**\n     * Creates a resource path from the given slash-delimited string. If multiple\n     * arguments are provided, all components are combined. Leading and trailing\n     * slashes from all components are ignored.\n     */    static fromString(...t) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        const e = [];\n        for (const r of t) {\n            if (r.indexOf(\"//\") >= 0) throw new FirestoreError(T, `Invalid segment (${r}). Paths must not contain // in them.`);\n            // Strip leading and traling slashed.\n                        e.push(...r.split(\"/\").filter((t => t.length > 0)));\n        }\n        return new ResourcePath(e);\n    }\n    static emptyPath() {\n        return new ResourcePath([]);\n    }\n}\n\nconst S = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */ class FieldPath$1 extends BasePath {\n    construct(t, e, r) {\n        return new FieldPath$1(t, e, r);\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */    static isValidIdentifier(t) {\n        return S.test(t);\n    }\n    canonicalString() {\n        return this.toArray().map((t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), \n        FieldPath$1.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t))).join(\".\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Returns true if this field references the key of a document.\n     */    isKeyField() {\n        return 1 === this.length && \"__name__\" === this.get(0);\n    }\n    /**\n     * The field designating the key of a document.\n     */    static keyField() {\n        return new FieldPath$1([ \"__name__\" ]);\n    }\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */    static fromServerFormat(t) {\n        const e = [];\n        let r = \"\", n = 0;\n        const __PRIVATE_addCurrentSegment = () => {\n            if (0 === r.length) throw new FirestoreError(T, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n            e.push(r), r = \"\";\n        };\n        let i = !1;\n        for (;n < t.length; ) {\n            const e = t[n];\n            if (\"\\\\\" === e) {\n                if (n + 1 === t.length) throw new FirestoreError(T, \"Path has trailing escape character: \" + t);\n                const e = t[n + 1];\n                if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new FirestoreError(T, \"Path has invalid escape sequence: \" + t);\n                r += e, n += 2;\n            } else \"`\" === e ? (i = !i, n++) : \".\" !== e || i ? (r += e, n++) : (__PRIVATE_addCurrentSegment(), \n            n++);\n        }\n        if (__PRIVATE_addCurrentSegment(), i) throw new FirestoreError(T, \"Unterminated ` in path: \" + t);\n        return new FieldPath$1(e);\n    }\n    static emptyPath() {\n        return new FieldPath$1([]);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */ class DocumentKey {\n    constructor(t) {\n        this.path = t;\n    }\n    static fromPath(t) {\n        return new DocumentKey(ResourcePath.fromString(t));\n    }\n    static fromName(t) {\n        return new DocumentKey(ResourcePath.fromString(t).popFirst(5));\n    }\n    static empty() {\n        return new DocumentKey(ResourcePath.emptyPath());\n    }\n    get collectionGroup() {\n        return this.path.popLast().lastSegment();\n    }\n    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {\n        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n    }\n    /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {\n        return this.path.get(this.path.length - 2);\n    }\n    /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {\n        return this.path.popLast();\n    }\n    isEqual(t) {\n        return null !== t && 0 === ResourcePath.comparator(this.path, t.path);\n    }\n    toString() {\n        return this.path.toString();\n    }\n    static comparator(t, e) {\n        return ResourcePath.comparator(t.path, e.path);\n    }\n    static isDocumentKey(t) {\n        return t.length % 2 == 0;\n    }\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param segments - The segments of the path to the document\n     * @returns A new instance of DocumentKey\n     */    static fromSegments(t) {\n        return new DocumentKey(new ResourcePath(t.slice()));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function __PRIVATE_validateNonEmptyArgument(t, e, r) {\n    if (!r) throw new FirestoreError(T, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction __PRIVATE_validateDocumentPath(t) {\n    if (!DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */ function __PRIVATE_validateCollectionPath(t) {\n    if (DocumentKey.isDocumentKey(t)) throw new FirestoreError(T, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction __PRIVATE_valueDescription(t) {\n    if (void 0 === t) return \"undefined\";\n    if (null === t) return \"null\";\n    if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), \n    JSON.stringify(t);\n    if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n    if (\"object\" == typeof t) {\n        if (t instanceof Array) return \"an array\";\n        {\n            const e = \n            /** try to get the constructor name for an object. */\n            function __PRIVATE_tryGetCustomObjectType(t) {\n                if (t.constructor) return t.constructor.name;\n                return null;\n            }\n            /**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n * @internal\n */ (t);\n            return e ? `a custom ${e} object` : \"an object\";\n        }\n    }\n    return \"function\" == typeof t ? \"a function\" : fail();\n}\n\nfunction __PRIVATE_cast(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    if (\"_delegate\" in t && (\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    t = t._delegate), !(t instanceof e)) {\n        if (e.name === t.constructor.name) throw new FirestoreError(T, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n        {\n            const r = __PRIVATE_valueDescription(t);\n            throw new FirestoreError(T, `Expected type '${e.name}', but it was: ${r}`);\n        }\n    }\n    return t;\n}\n\nfunction __PRIVATE_validatePositiveNumber(t, e) {\n    if (e <= 0) throw new FirestoreError(T, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\n */\n/**\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\n * option values as the given instance.\n */\nfunction __PRIVATE_cloneLongPollingOptions(t) {\n    const e = {};\n    return void 0 !== t.timeoutSeconds && (e.timeoutSeconds = t.timeoutSeconds), e;\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The value returned from the most recent invocation of\n * `generateUniqueDebugId()`, or null if it has never been invoked.\n */ let N = null;\n\n/**\n * Generates and returns an initial value for `lastUniqueDebugId`.\n *\n * The returned value is randomly selected from a range of integers that are\n * represented as 8 hexadecimal digits. This means that (within reason) any\n * numbers generated by incrementing the returned number by 1 will also be\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\n * length when converted to a hexadecimal string, making reading logs containing\n * these IDs easier to follow. And since the return value is randomly selected\n * it will help to differentiate between logs from different executions.\n */\n/**\n * Generates and returns a unique ID as a hexadecimal string.\n *\n * The returned ID is intended to be used in debug logging messages to help\n * correlate log messages that may be spatially separated in the logs, but\n * logically related. For example, a network connection could include the same\n * \"debug ID\" string in all of its log messages to help trace a specific\n * connection over time.\n *\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\n */\nfunction __PRIVATE_generateUniqueDebugId() {\n    return null === N ? N = function __PRIVATE_generateInitialUniqueDebugId() {\n        return 268435456 + Math.round(2147483648 * Math.random());\n    }() : N++, \"0x\" + N.toString(16);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */ function __PRIVATE_isNullOrUndefined(t) {\n    return null == t;\n}\n\n/** Returns whether the value represents -0. */ function __PRIVATE_isNegativeZero(t) {\n    // Detect if the value is -0.0. Based on polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst O = {\n    BatchGetDocuments: \"batchGet\",\n    Commit: \"commit\",\n    RunQuery: \"runQuery\",\n    RunAggregationQuery: \"runAggregationQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar q, B;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction __PRIVATE_mapCodeFromHttpStatus(t) {\n    if (void 0 === t) return __PRIVATE_logError(\"RPC_ERROR\", \"HTTP error has no status\"), \n    A;\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    \n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n        switch (t) {\n      case 200:\n        // OK\n        return E;\n\n      case 400:\n        // Bad Request\n        return w;\n\n        // Other possibilities based on the forward mapping\n        // return Code.INVALID_ARGUMENT;\n        // return Code.OUT_OF_RANGE;\n              case 401:\n        // Unauthorized\n        return p;\n\n      case 403:\n        // Forbidden\n        return V;\n\n      case 404:\n        // Not Found\n        return P;\n\n      case 409:\n        // Conflict\n        return g;\n\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n              case 416:\n        // Range Not Satisfiable\n        return F;\n\n      case 429:\n        // Too Many Requests\n        return y;\n\n      case 499:\n        // Client Closed Request\n        return m;\n\n      case 500:\n        // Internal Server Error\n        return A;\n\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n              case 501:\n        // Unimplemented\n        return v;\n\n      case 503:\n        // Service Unavailable\n        return b;\n\n      case 504:\n        // Gateway Timeout\n        return R;\n\n      default:\n        return t >= 200 && t < 300 ? E : t >= 400 && t < 500 ? w : t >= 500 && t < 600 ? D : A;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */ (B = q || (q = {}))[B.OK = 0] = \"OK\", B[B.CANCELLED = 1] = \"CANCELLED\", B[B.UNKNOWN = 2] = \"UNKNOWN\", \nB[B.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", B[B.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", \nB[B.NOT_FOUND = 5] = \"NOT_FOUND\", B[B.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", B[B.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", \nB[B.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", B[B.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", \nB[B.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", B[B.ABORTED = 10] = \"ABORTED\", \nB[B.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", B[B.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", \nB[B.INTERNAL = 13] = \"INTERNAL\", B[B.UNAVAILABLE = 14] = \"UNAVAILABLE\", B[B.DATA_LOSS = 15] = \"DATA_LOSS\";\n\nclass __PRIVATE_FetchConnection extends \n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass __PRIVATE_RestConnection {\n    constructor(t) {\n        this.databaseInfo = t, this.databaseId = t.databaseId;\n        const e = t.ssl ? \"https\" : \"http\", r = encodeURIComponent(this.databaseId.projectId), n = encodeURIComponent(this.databaseId.database);\n        this.m = e + \"://\" + t.host, this.A = `projects/${r}/databases/${n}`, this.T = \"(default)\" === this.databaseId.database ? `project_id=${r}` : `project_id=${r}&database_id=${n}`;\n    }\n    get R() {\n        // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n        // where to run the query, and expect the `request` to NOT specify the \"path\".\n        return !1;\n    }\n    P(t, e, r, n, i) {\n        const s = __PRIVATE_generateUniqueDebugId(), o = this.I(t, e.toUriEncodedString());\n        __PRIVATE_logDebug(\"RestConnection\", `Sending RPC '${t}' ${s}:`, o, r);\n        const a = {\n            \"google-cloud-resource-prefix\": this.A,\n            \"x-goog-request-params\": this.T\n        };\n        return this.V(a, n, i), this.p(t, o, a, r).then((e => (__PRIVATE_logDebug(\"RestConnection\", `Received RPC '${t}' ${s}: `, e), \n        e)), (e => {\n            throw __PRIVATE_logWarn(\"RestConnection\", `RPC '${t}' ${s} failed with error: `, e, \"url: \", o, \"request:\", r), \n            e;\n        }));\n    }\n    g(t, e, r, n, i, s) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.P(t, e, r, n, i);\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */    V(t, e, r) {\n        t[\"X-Goog-Api-Client\"] = \n        // SDK_VERSION is updated to different value at runtime depending on the entry point,\n        // so we need to get its value when we need it in a function.\n        function __PRIVATE_getGoogApiClientValue() {\n            return \"gl-js/ fire/\" + d;\n        }(), \n        // Content-Type: text/plain will avoid preflight requests which might\n        // mess with CORS and redirects by proxies. If we add custom headers\n        // we will need to change this code to potentially use the $httpOverwrite\n        // parameter supported by ESF to avoid triggering preflight requests.\n        t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), \n        e && e.headers.forEach(((e, r) => t[r] = e)), r && r.headers.forEach(((e, r) => t[r] = e));\n    }\n    I(t, e) {\n        const r = O[t];\n        return `${this.m}/v1/${e}:${r}`;\n    }\n    /**\n     * Closes and cleans up any resources associated with the connection. This\n     * implementation is a no-op because there are no resources associated\n     * with the RestConnection that need to be cleaned up.\n     */    terminate() {\n        // No-op\n    }\n} {\n    /**\n     * @param databaseInfo - The connection info.\n     * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n     */\n    constructor(t, e) {\n        super(t), this.F = e;\n    }\n    v(t, e) {\n        throw new Error(\"Not supported by FetchConnection\");\n    }\n    async p(t, e, r, n) {\n        var i;\n        const s = JSON.stringify(n);\n        let o;\n        try {\n            o = await this.F(e, {\n                method: \"POST\",\n                headers: r,\n                body: s\n            });\n        } catch (t) {\n            const e = t;\n            throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(e.status), \"Request failed with error: \" + e.statusText);\n        }\n        if (!o.ok) {\n            let t = await o.json();\n            Array.isArray(t) && (t = t[0]);\n            const e = null === (i = null == t ? void 0 : t.error) || void 0 === i ? void 0 : i.message;\n            throw new FirestoreError(__PRIVATE_mapCodeFromHttpStatus(o.status), `Request failed with error: ${null != e ? e : o.statusText}`);\n        }\n        return o.json();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Concrete implementation of the Aggregate type.\n */\nclass __PRIVATE_AggregateImpl {\n    constructor(t, e, r) {\n        this.alias = t, this.aggregateType = e, this.fieldPath = r;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */ function __PRIVATE_randomBytes(t) {\n    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n    const e = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto), r = new Uint8Array(t);\n    if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(r); else \n    // Falls back to Math.random\n    for (let e = 0; e < t; e++) r[e] = Math.floor(256 * Math.random());\n    return r;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A utility class for generating unique alphanumeric IDs of a specified length.\n *\n * @internal\n * Exported internally for testing purposes.\n */ class __PRIVATE_AutoId {\n    static newId() {\n        // Alphanumeric characters\n        const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", e = Math.floor(256 / t.length) * t.length;\n        // The largest byte value that is a multiple of `char.length`.\n                let r = \"\";\n        for (;r.length < 20; ) {\n            const n = __PRIVATE_randomBytes(40);\n            for (let i = 0; i < n.length; ++i) \n            // Only accept values that are [0, maxMultiple), this ensures they can\n            // be evenly mapped to indices of `chars` via a modulo operation.\n            r.length < 20 && n[i] < e && (r += t.charAt(n[i] % t.length));\n        }\n        return r;\n    }\n}\n\nfunction __PRIVATE_primitiveComparator(t, e) {\n    return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */ function __PRIVATE_arrayEquals(t, e, r) {\n    return t.length === e.length && t.every(((t, n) => r(t, e[n])));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function __PRIVATE_objectSize(t) {\n    let e = 0;\n    for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e++;\n    return e;\n}\n\nfunction forEach(t, e) {\n    for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && e(r, t[r]);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error encountered while decoding base64 string.\n */\nclass __PRIVATE_Base64DecodeError extends Error {\n    constructor() {\n        super(...arguments), this.name = \"Base64DecodeError\";\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass ByteString {\n    constructor(t) {\n        this.binaryString = t;\n    }\n    static fromBase64String(t) {\n        const e = function __PRIVATE_decodeBase64(t) {\n            try {\n                return atob(t);\n            } catch (t) {\n                // Check that `DOMException` is defined before using it to avoid\n                // \"ReferenceError: Property 'DOMException' doesn't exist\" in react-native.\n                // (https://github.com/firebase/firebase-js-sdk/issues/7115)\n                throw \"undefined\" != typeof DOMException && t instanceof DOMException ? new __PRIVATE_Base64DecodeError(\"Invalid base64 string: \" + t) : t;\n            }\n        }\n        /** Converts a binary string to a Base64 encoded string. */ (t);\n        return new ByteString(e);\n    }\n    static fromUint8Array(t) {\n        // TODO(indexing); Remove the copy of the byte string here as this method\n        // is frequently called during indexing.\n        const e = \n        /**\n * Helper function to convert an Uint8array to a binary string.\n */\n        function __PRIVATE_binaryStringFromUint8Array(t) {\n            let e = \"\";\n            for (let r = 0; r < t.length; ++r) e += String.fromCharCode(t[r]);\n            return e;\n        }\n        /**\n * Helper function to convert a binary string to an Uint8Array.\n */ (t);\n        return new ByteString(e);\n    }\n    [Symbol.iterator]() {\n        let t = 0;\n        return {\n            next: () => t < this.binaryString.length ? {\n                value: this.binaryString.charCodeAt(t++),\n                done: !1\n            } : {\n                value: void 0,\n                done: !0\n            }\n        };\n    }\n    toBase64() {\n        return function __PRIVATE_encodeBase64(t) {\n            return btoa(t);\n        }(this.binaryString);\n    }\n    toUint8Array() {\n        return function __PRIVATE_uint8ArrayFromBinaryString(t) {\n            const e = new Uint8Array(t.length);\n            for (let r = 0; r < t.length; r++) e[r] = t.charCodeAt(r);\n            return e;\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n        (this.binaryString);\n    }\n    approximateByteSize() {\n        return 2 * this.binaryString.length;\n    }\n    compareTo(t) {\n        return __PRIVATE_primitiveComparator(this.binaryString, t.binaryString);\n    }\n    isEqual(t) {\n        return this.binaryString === t.binaryString;\n    }\n}\n\nByteString.EMPTY_BYTE_STRING = new ByteString(\"\");\n\nconst $ = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */ function __PRIVATE_normalizeTimestamp(t) {\n    // The json interface (for the browser) will return an iso timestamp string,\n    // while the proto js library (for node) will return a\n    // google.protobuf.Timestamp instance.\n    if (__PRIVATE_hardAssert(!!t), \"string\" == typeof t) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        let e = 0;\n        const r = $.exec(t);\n        if (__PRIVATE_hardAssert(!!r), r[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            let t = r[1];\n            t = (t + \"000000000\").substr(0, 9), e = Number(t);\n        }\n        // Parse the date to get the seconds.\n                const n = new Date(t);\n        return {\n            seconds: Math.floor(n.getTime() / 1e3),\n            nanos: e\n        };\n    }\n    return {\n        seconds: __PRIVATE_normalizeNumber(t.seconds),\n        nanos: __PRIVATE_normalizeNumber(t.nanos)\n    };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */ function __PRIVATE_normalizeNumber(t) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */ function __PRIVATE_normalizeByteString(t) {\n    return \"string\" == typeof t ? ByteString.fromBase64String(t) : ByteString.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass Timestamp {\n    /**\n     * Creates a new timestamp.\n     *\n     * @param seconds - The number of seconds of UTC time since Unix epoch\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     *     9999-12-31T23:59:59Z inclusive.\n     * @param nanoseconds - The non-negative fractions of a second at nanosecond\n     *     resolution. Negative second values with fractions must still have\n     *     non-negative nanoseconds values that count forward in time. Must be\n     *     from 0 to 999,999,999 inclusive.\n     */\n    constructor(\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     */\n    t, \n    /**\n     * The fractions of a second at nanosecond resolution.*\n     */\n    e) {\n        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new FirestoreError(T, \"Timestamp nanoseconds out of range: \" + e);\n        if (e >= 1e9) throw new FirestoreError(T, \"Timestamp nanoseconds out of range: \" + e);\n        if (t < -62135596800) throw new FirestoreError(T, \"Timestamp seconds out of range: \" + t);\n        // This will break in the year 10,000.\n                if (t >= 253402300800) throw new FirestoreError(T, \"Timestamp seconds out of range: \" + t);\n    }\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @returns a new timestamp representing the current date.\n     */    static now() {\n        return Timestamp.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date - The date to initialize the `Timestamp` from.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */    static fromDate(t) {\n        return Timestamp.fromMillis(t.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds - Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */    static fromMillis(t) {\n        const e = Math.floor(t / 1e3), r = Math.floor(1e6 * (t - 1e3 * e));\n        return new Timestamp(e, r);\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n     * causes a loss of precision since `Date` objects only support millisecond\n     * precision.\n     *\n     * @returns JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */    toDate() {\n        return new Date(this.toMillis());\n    }\n    /**\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n     * epoch). This operation causes a loss of precision.\n     *\n     * @returns The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */    toMillis() {\n        return 1e3 * this.seconds + this.nanoseconds / 1e6;\n    }\n    _compareTo(t) {\n        return this.seconds === t.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, t.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, t.seconds);\n    }\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other - The `Timestamp` to compare against.\n     * @returns true if this `Timestamp` is equal to the provided one.\n     */    isEqual(t) {\n        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n    }\n    /** Returns a textual representation of this `Timestamp`. */    toString() {\n        return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n    /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {\n        return {\n            seconds: this.seconds,\n            nanoseconds: this.nanoseconds\n        };\n    }\n    /**\n     * Converts this object to a primitive string, which allows `Timestamp` objects\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\n     */    valueOf() {\n        // This method returns a string of the form <seconds>.<nanoseconds> where\n        // <seconds> is translated to have a non-negative value and both <seconds>\n        // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n        // Strings with this format then have a lexiographical ordering that matches\n        // the expected ordering. The <seconds> translation is done to avoid having\n        // a leading negative sign (i.e. a leading '-' character) in its string\n        // representation, which would affect its lexiographical ordering.\n        const t = this.seconds - -62135596800;\n        // Note: Up to 12 decimal digits are required to represent all valid\n        // 'seconds' values.\n                return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */ function __PRIVATE_isServerTimestamp(t) {\n    var e, r;\n    return \"server_timestamp\" === (null === (r = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === r ? void 0 : r.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */ function __PRIVATE_getPreviousValue(t) {\n    const e = t.mapValue.fields.__previous_value__;\n    return __PRIVATE_isServerTimestamp(e) ? __PRIVATE_getPreviousValue(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */ function __PRIVATE_getLocalWriteTime(t) {\n    const e = __PRIVATE_normalizeTimestamp(t.mapValue.fields.__local_write_time__.timestampValue);\n    return new Timestamp(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Q = {\n    fields: {\n        __type__: {\n            stringValue: \"__max__\"\n        }\n    }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction __PRIVATE_typeOrder(t) {\n    return \"nullValue\" in t ? 0 /* TypeOrder.NullValue */ : \"booleanValue\" in t ? 1 /* TypeOrder.BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* TypeOrder.NumberValue */ : \"timestampValue\" in t ? 3 /* TypeOrder.TimestampValue */ : \"stringValue\" in t ? 5 /* TypeOrder.StringValue */ : \"bytesValue\" in t ? 6 /* TypeOrder.BlobValue */ : \"referenceValue\" in t ? 7 /* TypeOrder.RefValue */ : \"geoPointValue\" in t ? 8 /* TypeOrder.GeoPointValue */ : \"arrayValue\" in t ? 9 /* TypeOrder.ArrayValue */ : \"mapValue\" in t ? __PRIVATE_isServerTimestamp(t) ? 4 /* TypeOrder.ServerTimestampValue */ : \n    /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n    function __PRIVATE_isMaxValue(t) {\n        return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n    }\n    /**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */ (t) ? 9007199254740991 /* TypeOrder.MaxValue */ : 10 /* TypeOrder.ObjectValue */ : fail();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */ function __PRIVATE_valueEquals(t, e) {\n    if (t === e) return !0;\n    const r = __PRIVATE_typeOrder(t);\n    if (r !== __PRIVATE_typeOrder(e)) return !1;\n    switch (r) {\n      case 0 /* TypeOrder.NullValue */ :\n      case 9007199254740991 /* TypeOrder.MaxValue */ :\n        return !0;\n\n      case 1 /* TypeOrder.BooleanValue */ :\n        return t.booleanValue === e.booleanValue;\n\n      case 4 /* TypeOrder.ServerTimestampValue */ :\n        return __PRIVATE_getLocalWriteTime(t).isEqual(__PRIVATE_getLocalWriteTime(e));\n\n      case 3 /* TypeOrder.TimestampValue */ :\n        return function __PRIVATE_timestampEquals(t, e) {\n            if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) \n            // Use string equality for ISO 8601 timestamps\n            return t.timestampValue === e.timestampValue;\n            const r = __PRIVATE_normalizeTimestamp(t.timestampValue), n = __PRIVATE_normalizeTimestamp(e.timestampValue);\n            return r.seconds === n.seconds && r.nanos === n.nanos;\n        }(t, e);\n\n      case 5 /* TypeOrder.StringValue */ :\n        return t.stringValue === e.stringValue;\n\n      case 6 /* TypeOrder.BlobValue */ :\n        return function __PRIVATE_blobEquals(t, e) {\n            return __PRIVATE_normalizeByteString(t.bytesValue).isEqual(__PRIVATE_normalizeByteString(e.bytesValue));\n        }(t, e);\n\n      case 7 /* TypeOrder.RefValue */ :\n        return t.referenceValue === e.referenceValue;\n\n      case 8 /* TypeOrder.GeoPointValue */ :\n        return function __PRIVATE_geoPointEquals(t, e) {\n            return __PRIVATE_normalizeNumber(t.geoPointValue.latitude) === __PRIVATE_normalizeNumber(e.geoPointValue.latitude) && __PRIVATE_normalizeNumber(t.geoPointValue.longitude) === __PRIVATE_normalizeNumber(e.geoPointValue.longitude);\n        }(t, e);\n\n      case 2 /* TypeOrder.NumberValue */ :\n        return function __PRIVATE_numberEquals(t, e) {\n            if (\"integerValue\" in t && \"integerValue\" in e) return __PRIVATE_normalizeNumber(t.integerValue) === __PRIVATE_normalizeNumber(e.integerValue);\n            if (\"doubleValue\" in t && \"doubleValue\" in e) {\n                const r = __PRIVATE_normalizeNumber(t.doubleValue), n = __PRIVATE_normalizeNumber(e.doubleValue);\n                return r === n ? __PRIVATE_isNegativeZero(r) === __PRIVATE_isNegativeZero(n) : isNaN(r) && isNaN(n);\n            }\n            return !1;\n        }(t, e);\n\n      case 9 /* TypeOrder.ArrayValue */ :\n        return __PRIVATE_arrayEquals(t.arrayValue.values || [], e.arrayValue.values || [], __PRIVATE_valueEquals);\n\n      case 10 /* TypeOrder.ObjectValue */ :\n        return function __PRIVATE_objectEquals(t, e) {\n            const r = t.mapValue.fields || {}, n = e.mapValue.fields || {};\n            if (__PRIVATE_objectSize(r) !== __PRIVATE_objectSize(n)) return !1;\n            for (const t in r) if (r.hasOwnProperty(t) && (void 0 === n[t] || !__PRIVATE_valueEquals(r[t], n[t]))) return !1;\n            return !0;\n        }\n        /** Returns true if the ArrayValue contains the specified element. */ (t, e);\n\n      default:\n        return fail();\n    }\n}\n\nfunction __PRIVATE_arrayValueContains(t, e) {\n    return void 0 !== (t.values || []).find((t => __PRIVATE_valueEquals(t, e)));\n}\n\nfunction __PRIVATE_valueCompare(t, e) {\n    if (t === e) return 0;\n    const r = __PRIVATE_typeOrder(t), n = __PRIVATE_typeOrder(e);\n    if (r !== n) return __PRIVATE_primitiveComparator(r, n);\n    switch (r) {\n      case 0 /* TypeOrder.NullValue */ :\n      case 9007199254740991 /* TypeOrder.MaxValue */ :\n        return 0;\n\n      case 1 /* TypeOrder.BooleanValue */ :\n        return __PRIVATE_primitiveComparator(t.booleanValue, e.booleanValue);\n\n      case 2 /* TypeOrder.NumberValue */ :\n        return function __PRIVATE_compareNumbers(t, e) {\n            const r = __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue), n = __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);\n            return r < n ? -1 : r > n ? 1 : r === n ? 0 : \n            // one or both are NaN.\n            isNaN(r) ? isNaN(n) ? 0 : -1 : 1;\n        }(t, e);\n\n      case 3 /* TypeOrder.TimestampValue */ :\n        return __PRIVATE_compareTimestamps(t.timestampValue, e.timestampValue);\n\n      case 4 /* TypeOrder.ServerTimestampValue */ :\n        return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(t), __PRIVATE_getLocalWriteTime(e));\n\n      case 5 /* TypeOrder.StringValue */ :\n        return __PRIVATE_primitiveComparator(t.stringValue, e.stringValue);\n\n      case 6 /* TypeOrder.BlobValue */ :\n        return function __PRIVATE_compareBlobs(t, e) {\n            const r = __PRIVATE_normalizeByteString(t), n = __PRIVATE_normalizeByteString(e);\n            return r.compareTo(n);\n        }(t.bytesValue, e.bytesValue);\n\n      case 7 /* TypeOrder.RefValue */ :\n        return function __PRIVATE_compareReferences(t, e) {\n            const r = t.split(\"/\"), n = e.split(\"/\");\n            for (let t = 0; t < r.length && t < n.length; t++) {\n                const e = __PRIVATE_primitiveComparator(r[t], n[t]);\n                if (0 !== e) return e;\n            }\n            return __PRIVATE_primitiveComparator(r.length, n.length);\n        }(t.referenceValue, e.referenceValue);\n\n      case 8 /* TypeOrder.GeoPointValue */ :\n        return function __PRIVATE_compareGeoPoints(t, e) {\n            const r = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(e.latitude));\n            if (0 !== r) return r;\n            return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(t.longitude), __PRIVATE_normalizeNumber(e.longitude));\n        }(t.geoPointValue, e.geoPointValue);\n\n      case 9 /* TypeOrder.ArrayValue */ :\n        return function __PRIVATE_compareArrays(t, e) {\n            const r = t.values || [], n = e.values || [];\n            for (let t = 0; t < r.length && t < n.length; ++t) {\n                const e = __PRIVATE_valueCompare(r[t], n[t]);\n                if (e) return e;\n            }\n            return __PRIVATE_primitiveComparator(r.length, n.length);\n        }(t.arrayValue, e.arrayValue);\n\n      case 10 /* TypeOrder.ObjectValue */ :\n        return function __PRIVATE_compareMaps(t, e) {\n            if (t === Q && e === Q) return 0;\n            if (t === Q) return 1;\n            if (e === Q) return -1;\n            const r = t.fields || {}, n = Object.keys(r), i = e.fields || {}, s = Object.keys(i);\n            // Even though MapValues are likely sorted correctly based on their insertion\n            // order (e.g. when received from the backend), local modifications can bring\n            // elements out of order. We need to re-sort the elements to ensure that\n            // canonical IDs are independent of insertion order.\n            n.sort(), s.sort();\n            for (let t = 0; t < n.length && t < s.length; ++t) {\n                const e = __PRIVATE_primitiveComparator(n[t], s[t]);\n                if (0 !== e) return e;\n                const o = __PRIVATE_valueCompare(r[n[t]], i[s[t]]);\n                if (0 !== o) return o;\n            }\n            return __PRIVATE_primitiveComparator(n.length, s.length);\n        }\n        /** Returns a reference value for the provided database and key. */ (t.mapValue, e.mapValue);\n\n      default:\n        throw fail();\n    }\n}\n\nfunction __PRIVATE_compareTimestamps(t, e) {\n    if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return __PRIVATE_primitiveComparator(t, e);\n    const r = __PRIVATE_normalizeTimestamp(t), n = __PRIVATE_normalizeTimestamp(e), i = __PRIVATE_primitiveComparator(r.seconds, n.seconds);\n    return 0 !== i ? i : __PRIVATE_primitiveComparator(r.nanos, n.nanos);\n}\n\nfunction __PRIVATE_refValue(t, e) {\n    return {\n        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n    };\n}\n\n/** Returns true if `value` is an ArrayValue. */ function isArray(t) {\n    return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */ function __PRIVATE_isNullValue(t) {\n    return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */ function __PRIVATE_isNanValue(t) {\n    return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */ function __PRIVATE_isMapValue(t) {\n    return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */ function __PRIVATE_deepClone(t) {\n    if (t.geoPointValue) return {\n        geoPointValue: Object.assign({}, t.geoPointValue)\n    };\n    if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n        timestampValue: Object.assign({}, t.timestampValue)\n    };\n    if (t.mapValue) {\n        const e = {\n            mapValue: {\n                fields: {}\n            }\n        };\n        return forEach(t.mapValue.fields, ((t, r) => e.mapValue.fields[t] = __PRIVATE_deepClone(r))), \n        e;\n    }\n    if (t.arrayValue) {\n        const e = {\n            arrayValue: {\n                values: []\n            }\n        };\n        for (let r = 0; r < (t.arrayValue.values || []).length; ++r) e.arrayValue.values[r] = __PRIVATE_deepClone(t.arrayValue.values[r]);\n        return e;\n    }\n    return Object.assign({}, t);\n}\n\nclass Bound {\n    constructor(t, e) {\n        this.position = t, this.inclusive = e;\n    }\n}\n\nfunction __PRIVATE_boundEquals(t, e) {\n    if (null === t) return null === e;\n    if (null === e) return !1;\n    if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n    for (let r = 0; r < t.position.length; r++) {\n        if (!__PRIVATE_valueEquals(t.position[r], e.position[r])) return !1;\n    }\n    return !0;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class Filter {}\n\nclass FieldFilter extends Filter {\n    constructor(t, e, r) {\n        super(), this.field = t, this.op = e, this.value = r;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e, r) {\n        return t.isKeyField() ? \"in\" /* Operator.IN */ === e || \"not-in\" /* Operator.NOT_IN */ === e ? this.createKeyFieldInFilter(t, e, r) : new __PRIVATE_KeyFieldFilter(t, e, r) : \"array-contains\" /* Operator.ARRAY_CONTAINS */ === e ? new __PRIVATE_ArrayContainsFilter(t, r) : \"in\" /* Operator.IN */ === e ? new __PRIVATE_InFilter(t, r) : \"not-in\" /* Operator.NOT_IN */ === e ? new __PRIVATE_NotInFilter(t, r) : \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === e ? new __PRIVATE_ArrayContainsAnyFilter(t, r) : new FieldFilter(t, e, r);\n    }\n    static createKeyFieldInFilter(t, e, r) {\n        return \"in\" /* Operator.IN */ === e ? new __PRIVATE_KeyFieldInFilter(t, r) : new __PRIVATE_KeyFieldNotInFilter(t, r);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        // Types do not have to match in NOT_EQUAL filters.\n                return \"!=\" /* Operator.NOT_EQUAL */ === this.op ? null !== e && this.matchesComparison(__PRIVATE_valueCompare(e, this.value)) : null !== e && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(e) && this.matchesComparison(__PRIVATE_valueCompare(e, this.value));\n        // Only compare types with matching backend order (such as double and int).\n        }\n    matchesComparison(t) {\n        switch (this.op) {\n          case \"<\" /* Operator.LESS_THAN */ :\n            return t < 0;\n\n          case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */ :\n            return t <= 0;\n\n          case \"==\" /* Operator.EQUAL */ :\n            return 0 === t;\n\n          case \"!=\" /* Operator.NOT_EQUAL */ :\n            return 0 !== t;\n\n          case \">\" /* Operator.GREATER_THAN */ :\n            return t > 0;\n\n          case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */ :\n            return t >= 0;\n\n          default:\n            return fail();\n        }\n    }\n    isInequality() {\n        return [ \"<\" /* Operator.LESS_THAN */ , \"<=\" /* Operator.LESS_THAN_OR_EQUAL */ , \">\" /* Operator.GREATER_THAN */ , \">=\" /* Operator.GREATER_THAN_OR_EQUAL */ , \"!=\" /* Operator.NOT_EQUAL */ , \"not-in\" /* Operator.NOT_IN */ ].indexOf(this.op) >= 0;\n    }\n    getFlattenedFilters() {\n        return [ this ];\n    }\n    getFilters() {\n        return [ this ];\n    }\n}\n\nclass CompositeFilter extends Filter {\n    constructor(t, e) {\n        super(), this.filters = t, this.op = e, this.D = null;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e) {\n        return new CompositeFilter(t, e);\n    }\n    matches(t) {\n        return function __PRIVATE_compositeFilterIsConjunction(t) {\n            return \"and\" /* CompositeOperator.AND */ === t.op;\n        }(this) ? void 0 === this.filters.find((e => !e.matches(t))) : void 0 !== this.filters.find((e => e.matches(t)));\n    }\n    getFlattenedFilters() {\n        return null !== this.D || (this.D = this.filters.reduce(((t, e) => t.concat(e.getFlattenedFilters())), [])), \n        this.D;\n    }\n    // Returns a mutable copy of `this.filters`\n    getFilters() {\n        return Object.assign([], this.filters);\n    }\n}\n\nfunction __PRIVATE_filterEquals(t, e) {\n    return t instanceof FieldFilter ? function __PRIVATE_fieldFilterEquals(t, e) {\n        return e instanceof FieldFilter && t.op === e.op && t.field.isEqual(e.field) && __PRIVATE_valueEquals(t.value, e.value);\n    }(t, e) : t instanceof CompositeFilter ? function __PRIVATE_compositeFilterEquals(t, e) {\n        if (e instanceof CompositeFilter && t.op === e.op && t.filters.length === e.filters.length) {\n            return t.filters.reduce(((t, r, n) => t && __PRIVATE_filterEquals(r, e.filters[n])), !0);\n        }\n        return !1;\n    }\n    /** Filter that matches on key fields (i.e. '__name__'). */ (t, e) : void fail();\n}\n\nclass __PRIVATE_KeyFieldFilter extends FieldFilter {\n    constructor(t, e, r) {\n        super(t, e, r), this.key = DocumentKey.fromName(r.referenceValue);\n    }\n    matches(t) {\n        const e = DocumentKey.comparator(t.key, this.key);\n        return this.matchesComparison(e);\n    }\n}\n\n/** Filter that matches on key fields within an array. */ class __PRIVATE_KeyFieldInFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"in\" /* Operator.IN */ , e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"in\" /* Operator.IN */ , e);\n    }\n    matches(t) {\n        return this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\n/** Filter that matches on key fields not present within an array. */ class __PRIVATE_KeyFieldNotInFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"not-in\" /* Operator.NOT_IN */ , e), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue(\"not-in\" /* Operator.NOT_IN */ , e);\n    }\n    matches(t) {\n        return !this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\nfunction __PRIVATE_extractDocumentKeysFromArrayValue(t, e) {\n    var r;\n    return ((null === (r = e.arrayValue) || void 0 === r ? void 0 : r.values) || []).map((t => DocumentKey.fromName(t.referenceValue)));\n}\n\n/** A Filter that implements the array-contains operator. */ class __PRIVATE_ArrayContainsFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"array-contains\" /* Operator.ARRAY_CONTAINS */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return isArray(e) && __PRIVATE_arrayValueContains(e.arrayValue, this.value);\n    }\n}\n\n/** A Filter that implements the IN operator. */ class __PRIVATE_InFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"in\" /* Operator.IN */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return null !== e && __PRIVATE_arrayValueContains(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the not-in operator. */ class __PRIVATE_NotInFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"not-in\" /* Operator.NOT_IN */ , e);\n    }\n    matches(t) {\n        if (__PRIVATE_arrayValueContains(this.value.arrayValue, {\n            nullValue: \"NULL_VALUE\"\n        })) return !1;\n        const e = t.data.field(this.field);\n        return null !== e && !__PRIVATE_arrayValueContains(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the array-contains-any operator. */ class __PRIVATE_ArrayContainsAnyFilter extends FieldFilter {\n    constructor(t, e) {\n        super(t, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return !(!isArray(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => __PRIVATE_arrayValueContains(this.value.arrayValue, t)));\n    }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */ class OrderBy {\n    constructor(t, e = \"asc\" /* Direction.ASCENDING */) {\n        this.field = t, this.dir = e;\n    }\n}\n\nfunction __PRIVATE_orderByEquals(t, e) {\n    return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */ class SnapshotVersion {\n    constructor(t) {\n        this.timestamp = t;\n    }\n    static fromTimestamp(t) {\n        return new SnapshotVersion(t);\n    }\n    static min() {\n        return new SnapshotVersion(new Timestamp(0, 0));\n    }\n    static max() {\n        return new SnapshotVersion(new Timestamp(253402300799, 999999999));\n    }\n    compareTo(t) {\n        return this.timestamp._compareTo(t.timestamp);\n    }\n    isEqual(t) {\n        return this.timestamp.isEqual(t.timestamp);\n    }\n    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {\n        // Convert to microseconds.\n        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n    }\n    toString() {\n        return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n    }\n    toTimestamp() {\n        return this.timestamp;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass SortedMap {\n    constructor(t, e) {\n        this.comparator = t, this.root = e || LLRBNode.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    insert(t, e) {\n        return new SortedMap(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    // Returns a copy of the map, with the specified key removed.\n    remove(t) {\n        return new SortedMap(this.comparator, this.root.remove(t, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    // Returns the value of the node with the given key, or null.\n    get(t) {\n        let e = this.root;\n        for (;!e.isEmpty(); ) {\n            const r = this.comparator(t, e.key);\n            if (0 === r) return e.value;\n            r < 0 ? e = e.left : r > 0 && (e = e.right);\n        }\n        return null;\n    }\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    indexOf(t) {\n        // Number of nodes that were pruned when descending right\n        let e = 0, r = this.root;\n        for (;!r.isEmpty(); ) {\n            const n = this.comparator(t, r.key);\n            if (0 === n) return e + r.left.size;\n            n < 0 ? r = r.left : (\n            // Count all nodes left of the node plus the node itself\n            e += r.left.size + 1, r = r.right);\n        }\n        // Node not found\n                return -1;\n    }\n    isEmpty() {\n        return this.root.isEmpty();\n    }\n    // Returns the total number of nodes in the map.\n    get size() {\n        return this.root.size;\n    }\n    // Returns the minimum key in the map.\n    minKey() {\n        return this.root.minKey();\n    }\n    // Returns the maximum key in the map.\n    maxKey() {\n        return this.root.maxKey();\n    }\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.root.inorderTraversal(t);\n    }\n    forEach(t) {\n        this.inorderTraversal(((e, r) => (t(e, r), !1)));\n    }\n    toString() {\n        const t = [];\n        return this.inorderTraversal(((e, r) => (t.push(`${e}:${r}`), !1))), `{${t.join(\", \")}}`;\n    }\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.root.reverseTraversal(t);\n    }\n    // Returns an iterator over the SortedMap.\n    getIterator() {\n        return new SortedMapIterator(this.root, null, this.comparator, !1);\n    }\n    getIteratorFrom(t) {\n        return new SortedMapIterator(this.root, t, this.comparator, !1);\n    }\n    getReverseIterator() {\n        return new SortedMapIterator(this.root, null, this.comparator, !0);\n    }\n    getReverseIteratorFrom(t) {\n        return new SortedMapIterator(this.root, t, this.comparator, !0);\n    }\n}\n\n // end SortedMap\n// An iterator over an LLRBNode.\nclass SortedMapIterator {\n    constructor(t, e, r, n) {\n        this.isReverse = n, this.nodeStack = [];\n        let i = 1;\n        for (;!t.isEmpty(); ) if (i = e ? r(t.key, e) : 1, \n        // flip the comparison if we're going in reverse\n        e && n && (i *= -1), i < 0) \n        // This node is less than our start key. ignore it\n        t = this.isReverse ? t.left : t.right; else {\n            if (0 === i) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(t);\n                break;\n            }\n            // This node is greater than our start key, add it to the stack and move\n            // to the next one\n            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n        }\n    }\n    getNext() {\n        let t = this.nodeStack.pop();\n        const e = {\n            key: t.key,\n            value: t.value\n        };\n        if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), \n        t = t.left;\n        return e;\n    }\n    hasNext() {\n        return this.nodeStack.length > 0;\n    }\n    peek() {\n        if (0 === this.nodeStack.length) return null;\n        const t = this.nodeStack[this.nodeStack.length - 1];\n        return {\n            key: t.key,\n            value: t.value\n        };\n    }\n}\n\n // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass LLRBNode {\n    constructor(t, e, r, n, i) {\n        this.key = t, this.value = e, this.color = null != r ? r : LLRBNode.RED, this.left = null != n ? n : LLRBNode.EMPTY, \n        this.right = null != i ? i : LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    copy(t, e, r, n, i) {\n        return new LLRBNode(null != t ? t : this.key, null != e ? e : this.value, null != r ? r : this.color, null != n ? n : this.left, null != i ? i : this.right);\n    }\n    isEmpty() {\n        return !1;\n    }\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n    }\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n    }\n    // Returns the minimum node in the tree.\n    min() {\n        return this.left.isEmpty() ? this : this.left.min();\n    }\n    // Returns the maximum key in the tree.\n    minKey() {\n        return this.min().key;\n    }\n    // Returns the maximum key in the tree.\n    maxKey() {\n        return this.right.isEmpty() ? this.key : this.right.maxKey();\n    }\n    // Returns new tree, with the key/value added.\n    insert(t, e, r) {\n        let n = this;\n        const i = r(t, n.key);\n        return n = i < 0 ? n.copy(null, null, null, n.left.insert(t, e, r), null) : 0 === i ? n.copy(null, e, null, null, null) : n.copy(null, null, null, null, n.right.insert(t, e, r)), \n        n.fixUp();\n    }\n    removeMin() {\n        if (this.left.isEmpty()) return LLRBNode.EMPTY;\n        let t = this;\n        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), \n        t.fixUp();\n    }\n    // Returns new tree, with the specified item removed.\n    remove(t, e) {\n        let r, n = this;\n        if (e(t, n.key) < 0) n.left.isEmpty() || n.left.isRed() || n.left.left.isRed() || (n = n.moveRedLeft()), \n        n = n.copy(null, null, null, n.left.remove(t, e), null); else {\n            if (n.left.isRed() && (n = n.rotateRight()), n.right.isEmpty() || n.right.isRed() || n.right.left.isRed() || (n = n.moveRedRight()), \n            0 === e(t, n.key)) {\n                if (n.right.isEmpty()) return LLRBNode.EMPTY;\n                r = n.right.min(), n = n.copy(r.key, r.value, null, null, n.right.removeMin());\n            }\n            n = n.copy(null, null, null, null, n.right.remove(t, e));\n        }\n        return n.fixUp();\n    }\n    isRed() {\n        return this.color;\n    }\n    // Returns new tree after performing any needed rotations.\n    fixUp() {\n        let t = this;\n        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), \n        t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n    }\n    moveRedLeft() {\n        let t = this.colorFlip();\n        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), \n        t = t.rotateLeft(), t = t.colorFlip()), t;\n    }\n    moveRedRight() {\n        let t = this.colorFlip();\n        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n    }\n    rotateLeft() {\n        const t = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, t, null);\n    }\n    rotateRight() {\n        const t = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, t);\n    }\n    colorFlip() {\n        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, t, e);\n    }\n    // For testing.\n    checkMaxDepth() {\n        const t = this.check();\n        return Math.pow(2, t) <= this.size + 1;\n    }\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    check() {\n        if (this.isRed() && this.left.isRed()) throw fail();\n        if (this.right.isRed()) throw fail();\n        const t = this.left.check();\n        if (t !== this.right.check()) throw fail();\n        return t + (this.isRed() ? 0 : 1);\n    }\n}\n\n // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nLLRBNode.EMPTY = null, LLRBNode.RED = !0, LLRBNode.BLACK = !1;\n\n// end LLRBEmptyNode\nLLRBNode.EMPTY = new \n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass LLRBEmptyNode {\n    constructor() {\n        this.size = 0;\n    }\n    get key() {\n        throw fail();\n    }\n    get value() {\n        throw fail();\n    }\n    get color() {\n        throw fail();\n    }\n    get left() {\n        throw fail();\n    }\n    get right() {\n        throw fail();\n    }\n    // Returns a copy of the current node.\n    copy(t, e, r, n, i) {\n        return this;\n    }\n    // Returns a copy of the tree, with the specified key/value added.\n    insert(t, e, r) {\n        return new LLRBNode(t, e);\n    }\n    // Returns a copy of the tree, with the specified key removed.\n    remove(t, e) {\n        return this;\n    }\n    isEmpty() {\n        return !0;\n    }\n    inorderTraversal(t) {\n        return !1;\n    }\n    reverseTraversal(t) {\n        return !1;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    isRed() {\n        return !1;\n    }\n    // For testing.\n    checkMaxDepth() {\n        return !0;\n    }\n    check() {\n        return 0;\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass SortedSet {\n    constructor(t) {\n        this.comparator = t, this.data = new SortedMap(this.comparator);\n    }\n    has(t) {\n        return null !== this.data.get(t);\n    }\n    first() {\n        return this.data.minKey();\n    }\n    last() {\n        return this.data.maxKey();\n    }\n    get size() {\n        return this.data.size;\n    }\n    indexOf(t) {\n        return this.data.indexOf(t);\n    }\n    /** Iterates elements in order defined by \"comparator\" */    forEach(t) {\n        this.data.inorderTraversal(((e, r) => (t(e), !1)));\n    }\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {\n        const r = this.data.getIteratorFrom(t[0]);\n        for (;r.hasNext(); ) {\n            const n = r.getNext();\n            if (this.comparator(n.key, t[1]) >= 0) return;\n            e(n.key);\n        }\n    }\n    /**\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n     */    forEachWhile(t, e) {\n        let r;\n        for (r = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); r.hasNext(); ) {\n            if (!t(r.getNext().key)) return;\n        }\n    }\n    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {\n        const e = this.data.getIteratorFrom(t);\n        return e.hasNext() ? e.getNext().key : null;\n    }\n    getIterator() {\n        return new SortedSetIterator(this.data.getIterator());\n    }\n    getIteratorFrom(t) {\n        return new SortedSetIterator(this.data.getIteratorFrom(t));\n    }\n    /** Inserts or updates an element */    add(t) {\n        return this.copy(this.data.remove(t).insert(t, !0));\n    }\n    /** Deletes an element */    delete(t) {\n        return this.has(t) ? this.copy(this.data.remove(t)) : this;\n    }\n    isEmpty() {\n        return this.data.isEmpty();\n    }\n    unionWith(t) {\n        let e = this;\n        // Make sure `result` always refers to the larger one of the two sets.\n                return e.size < t.size && (e = t, t = this), t.forEach((t => {\n            e = e.add(t);\n        })), e;\n    }\n    isEqual(t) {\n        if (!(t instanceof SortedSet)) return !1;\n        if (this.size !== t.size) return !1;\n        const e = this.data.getIterator(), r = t.data.getIterator();\n        for (;e.hasNext(); ) {\n            const t = e.getNext().key, n = r.getNext().key;\n            if (0 !== this.comparator(t, n)) return !1;\n        }\n        return !0;\n    }\n    toArray() {\n        const t = [];\n        return this.forEach((e => {\n            t.push(e);\n        })), t;\n    }\n    toString() {\n        const t = [];\n        return this.forEach((e => t.push(e))), \"SortedSet(\" + t.toString() + \")\";\n    }\n    copy(t) {\n        const e = new SortedSet(this.comparator);\n        return e.data = t, e;\n    }\n}\n\nclass SortedSetIterator {\n    constructor(t) {\n        this.iter = t;\n    }\n    getNext() {\n        return this.iter.getNext().key;\n    }\n    hasNext() {\n        return this.iter.hasNext();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */ class FieldMask {\n    constructor(t) {\n        this.fields = t, \n        // TODO(dimond): validation of FieldMask\n        // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n        t.sort(FieldPath$1.comparator);\n    }\n    static empty() {\n        return new FieldMask([]);\n    }\n    /**\n     * Returns a new FieldMask object that is the result of adding all the given\n     * fields paths to this field mask.\n     */    unionWith(t) {\n        let e = new SortedSet(FieldPath$1.comparator);\n        for (const t of this.fields) e = e.add(t);\n        for (const r of t) e = e.add(r);\n        return new FieldMask(e.toArray());\n    }\n    /**\n     * Verifies that `fieldPath` is included by at least one field in this field\n     * mask.\n     *\n     * This is an O(n) operation, where `n` is the size of the field mask.\n     */    covers(t) {\n        for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n        return !1;\n    }\n    isEqual(t) {\n        return __PRIVATE_arrayEquals(this.fields, t.fields, ((t, e) => t.isEqual(e)));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */ class ObjectValue {\n    constructor(t) {\n        this.value = t;\n    }\n    static empty() {\n        return new ObjectValue({\n            mapValue: {}\n        });\n    }\n    /**\n     * Returns the value at the given path or null.\n     *\n     * @param path - the path to search\n     * @returns The value at the path or null if the path is not set.\n     */    field(t) {\n        if (t.isEmpty()) return this.value;\n        {\n            let e = this.value;\n            for (let r = 0; r < t.length - 1; ++r) if (e = (e.mapValue.fields || {})[t.get(r)], \n            !__PRIVATE_isMapValue(e)) return null;\n            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n        }\n    }\n    /**\n     * Sets the field to the provided value.\n     *\n     * @param path - The field path to set.\n     * @param value - The value to set.\n     */    set(t, e) {\n        this.getFieldsMap(t.popLast())[t.lastSegment()] = __PRIVATE_deepClone(e);\n    }\n    /**\n     * Sets the provided fields to the provided values.\n     *\n     * @param data - A map of fields to values (or null for deletes).\n     */    setAll(t) {\n        let e = FieldPath$1.emptyPath(), r = {}, n = [];\n        t.forEach(((t, i) => {\n            if (!e.isImmediateParentOf(i)) {\n                // Insert the accumulated changes at this parent location\n                const t = this.getFieldsMap(e);\n                this.applyChanges(t, r, n), r = {}, n = [], e = i.popLast();\n            }\n            t ? r[i.lastSegment()] = __PRIVATE_deepClone(t) : n.push(i.lastSegment());\n        }));\n        const i = this.getFieldsMap(e);\n        this.applyChanges(i, r, n);\n    }\n    /**\n     * Removes the field at the specified path. If there is no field at the\n     * specified path, nothing is changed.\n     *\n     * @param path - The field path to remove.\n     */    delete(t) {\n        const e = this.field(t.popLast());\n        __PRIVATE_isMapValue(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n    }\n    isEqual(t) {\n        return __PRIVATE_valueEquals(this.value, t.value);\n    }\n    /**\n     * Returns the map that contains the leaf element of `path`. If the parent\n     * entry does not yet exist, or if it is not a map, a new map will be created.\n     */    getFieldsMap(t) {\n        let e = this.value;\n        e.mapValue.fields || (e.mapValue = {\n            fields: {}\n        });\n        for (let r = 0; r < t.length; ++r) {\n            let n = e.mapValue.fields[t.get(r)];\n            __PRIVATE_isMapValue(n) && n.mapValue.fields || (n = {\n                mapValue: {\n                    fields: {}\n                }\n            }, e.mapValue.fields[t.get(r)] = n), e = n;\n        }\n        return e.mapValue.fields;\n    }\n    /**\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\n     * entries.\n     */    applyChanges(t, e, r) {\n        forEach(e, ((e, r) => t[e] = r));\n        for (const e of r) delete t[e];\n    }\n    clone() {\n        return new ObjectValue(__PRIVATE_deepClone(this.value));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */ class MutableDocument {\n    constructor(t, e, r, n, i, s, o) {\n        this.key = t, this.documentType = e, this.version = r, this.readTime = n, this.createTime = i, \n        this.data = s, this.documentState = o;\n    }\n    /**\n     * Creates a document with no known version or data, but which can serve as\n     * base document for mutations.\n     */    static newInvalidDocument(t) {\n        return new MutableDocument(t, 0 /* DocumentType.INVALID */ , \n        /* version */ SnapshotVersion.min(), \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist with the given data at the\n     * given version.\n     */    static newFoundDocument(t, e, r, n) {\n        return new MutableDocument(t, 1 /* DocumentType.FOUND_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ r, n, 0 /* DocumentState.SYNCED */);\n    }\n    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {\n        return new MutableDocument(t, 2 /* DocumentType.NO_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist at the given version but\n     * whose data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    static newUnknownDocument(t, e) {\n        return new MutableDocument(t, 3 /* DocumentType.UNKNOWN_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ SnapshotVersion.min(), \n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\n    }\n    /**\n     * Changes the document type to indicate that it exists and that its version\n     * and data are known.\n     */    convertToFoundDocument(t, e) {\n        // If a document is switching state from being an invalid or deleted\n        // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n        // update from Watch or due to applying a local set mutation on top\n        // of a deleted document, our best guess about its createTime would be the\n        // version at which the document transitioned to a FOUND_DOCUMENT.\n        return !this.createTime.isEqual(SnapshotVersion.min()) || 2 /* DocumentType.NO_DOCUMENT */ !== this.documentType && 0 /* DocumentType.INVALID */ !== this.documentType || (this.createTime = t), \n        this.version = t, this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */ , this.data = e, \n        this.documentState = 0 /* DocumentState.SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it doesn't exist at the given\n     * version.\n     */    convertToNoDocument(t) {\n        return this.version = t, this.documentType = 2 /* DocumentType.NO_DOCUMENT */ , \n        this.data = ObjectValue.empty(), this.documentState = 0 /* DocumentState.SYNCED */ , \n        this;\n    }\n    /**\n     * Changes the document type to indicate that it exists at a given version but\n     * that its data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    convertToUnknownDocument(t) {\n        return this.version = t, this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */ , \n        this.data = ObjectValue.empty(), this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , \n        this;\n    }\n    setHasCommittedMutations() {\n        return this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasLocalMutations() {\n        return this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ , this.version = SnapshotVersion.min(), \n        this;\n    }\n    setReadTime(t) {\n        return this.readTime = t, this;\n    }\n    get hasLocalMutations() {\n        return 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ === this.documentState;\n    }\n    get hasCommittedMutations() {\n        return 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ === this.documentState;\n    }\n    get hasPendingWrites() {\n        return this.hasLocalMutations || this.hasCommittedMutations;\n    }\n    isValidDocument() {\n        return 0 /* DocumentType.INVALID */ !== this.documentType;\n    }\n    isFoundDocument() {\n        return 1 /* DocumentType.FOUND_DOCUMENT */ === this.documentType;\n    }\n    isNoDocument() {\n        return 2 /* DocumentType.NO_DOCUMENT */ === this.documentType;\n    }\n    isUnknownDocument() {\n        return 3 /* DocumentType.UNKNOWN_DOCUMENT */ === this.documentType;\n    }\n    isEqual(t) {\n        return t instanceof MutableDocument && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n    }\n    mutableCopy() {\n        return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n    }\n    toString() {\n        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass __PRIVATE_TargetImpl {\n    constructor(t, e = null, r = [], n = [], i = null, s = null, o = null) {\n        this.path = t, this.collectionGroup = e, this.orderBy = r, this.filters = n, this.limit = i, \n        this.startAt = s, this.endAt = o, this.C = null;\n    }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */ function __PRIVATE_newTarget(t, e = null, r = [], n = [], i = null, s = null, o = null) {\n    return new __PRIVATE_TargetImpl(t, e, r, n, i, s, o);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nclass __PRIVATE_QueryImpl {\n    /**\n     * Initializes a Query with a path and optional additional query constraints.\n     * Path must currently be empty if this is a collection group query.\n     */\n    constructor(t, e = null, r = [], n = [], i = null, s = \"F\" /* LimitType.First */ , o = null, a = null) {\n        this.path = t, this.collectionGroup = e, this.explicitOrderBy = r, this.filters = n, \n        this.limit = i, this.limitType = s, this.startAt = o, this.endAt = a, this.S = null, \n        // The corresponding `Target` of this `Query` instance, for use with\n        // non-aggregate queries.\n        this.N = null, \n        // The corresponding `Target` of this `Query` instance, for use with\n        // aggregate queries. Unlike targets for non-aggregate queries,\n        // aggregate query targets do not contain normalized order-bys, they only\n        // contain explicit order-bys.\n        this.O = null, this.startAt, this.endAt;\n    }\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction __PRIVATE_isCollectionGroupQuery(t) {\n    return null !== t.collectionGroup;\n}\n\n/**\n * Returns the normalized order-by constraint that is used to execute the Query,\n * which can be different from the order-by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`). The normalized order-by\n * includes implicit order-bys in addition to the explicit user provided\n * order-bys.\n */ function __PRIVATE_queryNormalizedOrderBy(t) {\n    const e = __PRIVATE_debugCast(t);\n    if (null === e.S) {\n        e.S = [];\n        const t = new Set;\n        // Any explicit order by fields should be added as is.\n                for (const r of e.explicitOrderBy) e.S.push(r), t.add(r.field.canonicalString());\n        // The order of the implicit ordering always matches the last explicit order by.\n                const r = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* Direction.ASCENDING */ , n = \n        // Returns the sorted set of inequality filter fields used in this query.\n        function __PRIVATE_getInequalityFilterFields(t) {\n            let e = new SortedSet(FieldPath$1.comparator);\n            return t.filters.forEach((t => {\n                t.getFlattenedFilters().forEach((t => {\n                    t.isInequality() && (e = e.add(t.field));\n                }));\n            })), e;\n        }\n        /**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */ (e);\n        // Any inequality fields not explicitly ordered should be implicitly ordered in a lexicographical\n        // order. When there are multiple inequality filters on the same field, the field should be added\n        // only once.\n        // Note: `SortedSet<FieldPath>` sorts the key field before other fields. However, we want the key\n        // field to be sorted last.\n                n.forEach((n => {\n            t.has(n.canonicalString()) || n.isKeyField() || e.S.push(new OrderBy(n, r));\n        })), \n        // Add the document key field to the last if it is not explicitly ordered.\n        t.has(FieldPath$1.keyField().canonicalString()) || e.S.push(new OrderBy(FieldPath$1.keyField(), r));\n    }\n    return e.S;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation.\n */ function __PRIVATE_queryToTarget(t) {\n    const e = __PRIVATE_debugCast(t);\n    return e.N || (e.N = __PRIVATE__queryToTarget(e, __PRIVATE_queryNormalizedOrderBy(t))), \n    e.N;\n}\n\n/**\n * Converts this `Query` instance to its corresponding `Target` representation,\n * for use within an aggregate query. Unlike targets for non-aggregate queries,\n * aggregate query targets do not contain normalized order-bys, they only\n * contain explicit order-bys.\n */ function __PRIVATE__queryToTarget(t, e) {\n    if (\"F\" /* LimitType.First */ === t.limitType) return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, t.startAt, t.endAt);\n    {\n        // Flip the orderBy directions since we want the last results\n        e = e.map((t => {\n            const e = \"desc\" /* Direction.DESCENDING */ === t.dir ? \"asc\" /* Direction.ASCENDING */ : \"desc\" /* Direction.DESCENDING */;\n            return new OrderBy(t.field, e);\n        }));\n        // We need to swap the cursors to match the now-flipped query ordering.\n        const r = t.endAt ? new Bound(t.endAt.position, t.endAt.inclusive) : null, n = t.startAt ? new Bound(t.startAt.position, t.startAt.inclusive) : null;\n        // Now return as a LimitType.First query.\n        return __PRIVATE_newTarget(t.path, t.collectionGroup, e, t.filters, t.limit, r, n);\n    }\n}\n\nfunction __PRIVATE_queryWithAddedFilter(t, e) {\n    const r = t.filters.concat([ e ]);\n    return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), r, t.limit, t.limitType, t.startAt, t.endAt);\n}\n\nfunction __PRIVATE_queryEquals(t, e) {\n    return function __PRIVATE_targetEquals(t, e) {\n        if (t.limit !== e.limit) return !1;\n        if (t.orderBy.length !== e.orderBy.length) return !1;\n        for (let r = 0; r < t.orderBy.length; r++) if (!__PRIVATE_orderByEquals(t.orderBy[r], e.orderBy[r])) return !1;\n        if (t.filters.length !== e.filters.length) return !1;\n        for (let r = 0; r < t.filters.length; r++) if (!__PRIVATE_filterEquals(t.filters[r], e.filters[r])) return !1;\n        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!__PRIVATE_boundEquals(t.startAt, e.startAt) && __PRIVATE_boundEquals(t.endAt, e.endAt);\n    }(__PRIVATE_queryToTarget(t), __PRIVATE_queryToTarget(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction toNumber(t, e) {\n    return function isSafeInteger(t) {\n        return \"number\" == typeof t && Number.isInteger(t) && !__PRIVATE_isNegativeZero(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n    }(e) ? \n    /**\n * Returns an IntegerValue for `value`.\n */\n    function __PRIVATE_toInteger(t) {\n        return {\n            integerValue: \"\" + t\n        };\n    }(e) : function __PRIVATE_toDouble(t, e) {\n        if (t.useProto3Json) {\n            if (isNaN(e)) return {\n                doubleValue: \"NaN\"\n            };\n            if (e === 1 / 0) return {\n                doubleValue: \"Infinity\"\n            };\n            if (e === -1 / 0) return {\n                doubleValue: \"-Infinity\"\n            };\n        }\n        return {\n            doubleValue: __PRIVATE_isNegativeZero(e) ? \"-0\" : e\n        };\n    }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */ class TransformOperation {\n    constructor() {\n        // Make sure that the structural type of `TransformOperation` is unique.\n        // See https://github.com/microsoft/TypeScript/issues/5451\n        this._ = void 0;\n    }\n}\n\n/** Transforms a value into a server-generated timestamp. */ class __PRIVATE_ServerTimestampTransform extends TransformOperation {}\n\n/** Transforms an array value via a union operation. */ class __PRIVATE_ArrayUnionTransformOperation extends TransformOperation {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/** Transforms an array value via a remove operation. */ class __PRIVATE_ArrayRemoveTransformOperation extends TransformOperation {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */ class __PRIVATE_NumericIncrementTransformOperation extends TransformOperation {\n    constructor(t, e) {\n        super(), this.serializer = t, this.q = e;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */ class FieldTransform {\n    constructor(t, e) {\n        this.field = t, this.transform = e;\n    }\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */ class Precondition {\n    constructor(t, e) {\n        this.updateTime = t, this.exists = e;\n    }\n    /** Creates a new empty Precondition. */    static none() {\n        return new Precondition;\n    }\n    /** Creates a new Precondition with an exists flag. */    static exists(t) {\n        return new Precondition(void 0, t);\n    }\n    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {\n        return new Precondition(t);\n    }\n    /** Returns whether this Precondition is empty. */    get isNone() {\n        return void 0 === this.updateTime && void 0 === this.exists;\n    }\n    isEqual(t) {\n        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n    }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */ class Mutation {}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */ class __PRIVATE_SetMutation extends Mutation {\n    constructor(t, e, r, n = []) {\n        super(), this.key = t, this.value = e, this.precondition = r, this.fieldTransforms = n, \n        this.type = 0 /* MutationType.Set */;\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */ class __PRIVATE_PatchMutation extends Mutation {\n    constructor(t, e, r, n, i = []) {\n        super(), this.key = t, this.data = e, this.fieldMask = r, this.precondition = n, \n        this.fieldTransforms = i, this.type = 1 /* MutationType.Patch */;\n    }\n    getFieldMask() {\n        return this.fieldMask;\n    }\n}\n\n/** A mutation that deletes the document at the given key. */ class __PRIVATE_DeleteMutation extends Mutation {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 2 /* MutationType.Delete */ , \n        this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */ class __PRIVATE_VerifyMutation extends Mutation {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 3 /* MutationType.Verify */ , \n        this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const L = (() => {\n    const t = {\n        asc: \"ASCENDING\",\n        desc: \"DESCENDING\"\n    };\n    return t;\n})(), M = (() => {\n    const t = {\n        \"<\": \"LESS_THAN\",\n        \"<=\": \"LESS_THAN_OR_EQUAL\",\n        \">\": \"GREATER_THAN\",\n        \">=\": \"GREATER_THAN_OR_EQUAL\",\n        \"==\": \"EQUAL\",\n        \"!=\": \"NOT_EQUAL\",\n        \"array-contains\": \"ARRAY_CONTAINS\",\n        in: \"IN\",\n        \"not-in\": \"NOT_IN\",\n        \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n})(), x = (() => {\n    const t = {\n        and: \"AND\",\n        or: \"OR\"\n    };\n    return t;\n})();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass JsonProtoSerializer {\n    constructor(t, e) {\n        this.databaseId = t, this.useProto3Json = e;\n    }\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction toTimestamp(t, e) {\n    if (t.useProto3Json) {\n        return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n    }\n    return {\n        seconds: \"\" + e.seconds,\n        nanos: e.nanoseconds\n    };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction __PRIVATE_toBytes(t, e) {\n    return t.useProto3Json ? e.toBase64() : e.toUint8Array();\n}\n\nfunction __PRIVATE_toVersion(t, e) {\n    return toTimestamp(t, e.toTimestamp());\n}\n\nfunction __PRIVATE_fromVersion(t) {\n    return __PRIVATE_hardAssert(!!t), SnapshotVersion.fromTimestamp(function fromTimestamp(t) {\n        const e = __PRIVATE_normalizeTimestamp(t);\n        return new Timestamp(e.seconds, e.nanos);\n    }(t));\n}\n\nfunction __PRIVATE_toResourceName(t, e) {\n    return __PRIVATE_toResourcePath(t, e).canonicalString();\n}\n\nfunction __PRIVATE_toResourcePath(t, e) {\n    const r = function __PRIVATE_fullyQualifiedPrefixPath(t) {\n        return new ResourcePath([ \"projects\", t.projectId, \"databases\", t.database ]);\n    }(t).child(\"documents\");\n    return void 0 === e ? r : r.child(e);\n}\n\nfunction __PRIVATE_toName(t, e) {\n    return __PRIVATE_toResourceName(t.databaseId, e.path);\n}\n\nfunction fromName(t, e) {\n    const r = function __PRIVATE_fromResourceName(t) {\n        const e = ResourcePath.fromString(t);\n        return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(e)), e;\n    }(e);\n    if (r.get(1) !== t.databaseId.projectId) throw new FirestoreError(T, \"Tried to deserialize key from different project: \" + r.get(1) + \" vs \" + t.databaseId.projectId);\n    if (r.get(3) !== t.databaseId.database) throw new FirestoreError(T, \"Tried to deserialize key from different database: \" + r.get(3) + \" vs \" + t.databaseId.database);\n    return new DocumentKey(function __PRIVATE_extractLocalPathFromResourceName(t) {\n        return __PRIVATE_hardAssert(t.length > 4 && \"documents\" === t.get(4)), t.popFirst(5);\n    }\n    /** Creates a Document proto from key and fields (but no create/update time) */ (r));\n}\n\nfunction __PRIVATE_toMutationDocument(t, e, r) {\n    return {\n        name: __PRIVATE_toName(t, e),\n        fields: r.value.mapValue.fields\n    };\n}\n\nfunction __PRIVATE_fromBatchGetDocumentsResponse(t, e) {\n    return \"found\" in e ? function __PRIVATE_fromFound(t, e) {\n        __PRIVATE_hardAssert(!!e.found), e.found.name, e.found.updateTime;\n        const r = fromName(t, e.found.name), n = __PRIVATE_fromVersion(e.found.updateTime), i = e.found.createTime ? __PRIVATE_fromVersion(e.found.createTime) : SnapshotVersion.min(), s = new ObjectValue({\n            mapValue: {\n                fields: e.found.fields\n            }\n        });\n        return MutableDocument.newFoundDocument(r, n, i, s);\n    }(t, e) : \"missing\" in e ? function __PRIVATE_fromMissing(t, e) {\n        __PRIVATE_hardAssert(!!e.missing), __PRIVATE_hardAssert(!!e.readTime);\n        const r = fromName(t, e.missing), n = __PRIVATE_fromVersion(e.readTime);\n        return MutableDocument.newNoDocument(r, n);\n    }(t, e) : fail();\n}\n\nfunction toMutation(t, e) {\n    let r;\n    if (e instanceof __PRIVATE_SetMutation) r = {\n        update: __PRIVATE_toMutationDocument(t, e.key, e.value)\n    }; else if (e instanceof __PRIVATE_DeleteMutation) r = {\n        delete: __PRIVATE_toName(t, e.key)\n    }; else if (e instanceof __PRIVATE_PatchMutation) r = {\n        update: __PRIVATE_toMutationDocument(t, e.key, e.data),\n        updateMask: __PRIVATE_toDocumentMask(e.fieldMask)\n    }; else {\n        if (!(e instanceof __PRIVATE_VerifyMutation)) return fail();\n        r = {\n            verify: __PRIVATE_toName(t, e.key)\n        };\n    }\n    return e.fieldTransforms.length > 0 && (r.updateTransforms = e.fieldTransforms.map((t => function __PRIVATE_toFieldTransform(t, e) {\n        const r = e.transform;\n        if (r instanceof __PRIVATE_ServerTimestampTransform) return {\n            fieldPath: e.field.canonicalString(),\n            setToServerValue: \"REQUEST_TIME\"\n        };\n        if (r instanceof __PRIVATE_ArrayUnionTransformOperation) return {\n            fieldPath: e.field.canonicalString(),\n            appendMissingElements: {\n                values: r.elements\n            }\n        };\n        if (r instanceof __PRIVATE_ArrayRemoveTransformOperation) return {\n            fieldPath: e.field.canonicalString(),\n            removeAllFromArray: {\n                values: r.elements\n            }\n        };\n        if (r instanceof __PRIVATE_NumericIncrementTransformOperation) return {\n            fieldPath: e.field.canonicalString(),\n            increment: r.q\n        };\n        throw fail();\n    }(0, t)))), e.precondition.isNone || (r.currentDocument = function __PRIVATE_toPrecondition(t, e) {\n        return void 0 !== e.updateTime ? {\n            updateTime: __PRIVATE_toVersion(t, e.updateTime)\n        } : void 0 !== e.exists ? {\n            exists: e.exists\n        } : fail();\n    }(t, e.precondition)), r;\n}\n\nfunction __PRIVATE_toQueryTarget(t, e) {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const r = {\n        structuredQuery: {}\n    }, n = e.path;\n    let i;\n    null !== e.collectionGroup ? (i = n, r.structuredQuery.from = [ {\n        collectionId: e.collectionGroup,\n        allDescendants: !0\n    } ]) : (i = n.popLast(), r.structuredQuery.from = [ {\n        collectionId: n.lastSegment()\n    } ]), r.parent = function __PRIVATE_toQueryPath(t, e) {\n        return __PRIVATE_toResourceName(t.databaseId, e);\n    }(t, i);\n    const s = function __PRIVATE_toFilters(t) {\n        if (0 === t.length) return;\n        return __PRIVATE_toFilter(CompositeFilter.create(t, \"and\" /* CompositeOperator.AND */));\n    }(e.filters);\n    s && (r.structuredQuery.where = s);\n    const o = function __PRIVATE_toOrder(t) {\n        if (0 === t.length) return;\n        return t.map((t => \n        // visible for testing\n        function __PRIVATE_toPropertyOrder(t) {\n            return {\n                field: __PRIVATE_toFieldPathReference(t.field),\n                direction: __PRIVATE_toDirection(t.dir)\n            };\n        }\n        // visible for testing\n        (t)));\n    }(e.orderBy);\n    o && (r.structuredQuery.orderBy = o);\n    const a = function __PRIVATE_toInt32Proto(t, e) {\n        return t.useProto3Json || __PRIVATE_isNullOrUndefined(e) ? e : {\n            value: e\n        };\n    }(t, e.limit);\n    return null !== a && (r.structuredQuery.limit = a), e.startAt && (r.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(t) {\n        return {\n            before: t.inclusive,\n            values: t.position\n        };\n    }(e.startAt)), e.endAt && (r.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(t) {\n        return {\n            before: !t.inclusive,\n            values: t.position\n        };\n    }\n    // visible for testing\n    (e.endAt)), {\n        B: r,\n        parent: i\n    };\n}\n\nfunction __PRIVATE_toDirection(t) {\n    return L[t];\n}\n\n// visible for testing\nfunction __PRIVATE_toOperatorName(t) {\n    return M[t];\n}\n\nfunction __PRIVATE_toCompositeOperatorName(t) {\n    return x[t];\n}\n\nfunction __PRIVATE_toFieldPathReference(t) {\n    return {\n        fieldPath: t.canonicalString()\n    };\n}\n\nfunction __PRIVATE_toFilter(t) {\n    return t instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(t) {\n        if (\"==\" /* Operator.EQUAL */ === t.op) {\n            if (__PRIVATE_isNanValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NAN\"\n                }\n            };\n            if (__PRIVATE_isNullValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NULL\"\n                }\n            };\n        } else if (\"!=\" /* Operator.NOT_EQUAL */ === t.op) {\n            if (__PRIVATE_isNanValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NOT_NAN\"\n                }\n            };\n            if (__PRIVATE_isNullValue(t.value)) return {\n                unaryFilter: {\n                    field: __PRIVATE_toFieldPathReference(t.field),\n                    op: \"IS_NOT_NULL\"\n                }\n            };\n        }\n        return {\n            fieldFilter: {\n                field: __PRIVATE_toFieldPathReference(t.field),\n                op: __PRIVATE_toOperatorName(t.op),\n                value: t.value\n            }\n        };\n    }(t) : t instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(t) {\n        const e = t.getFilters().map((t => __PRIVATE_toFilter(t)));\n        if (1 === e.length) return e[0];\n        return {\n            compositeFilter: {\n                op: __PRIVATE_toCompositeOperatorName(t.op),\n                filters: e\n            }\n        };\n    }(t) : fail();\n}\n\nfunction __PRIVATE_toDocumentMask(t) {\n    const e = [];\n    return t.fields.forEach((t => e.push(t.canonicalString()))), {\n        fieldPaths: e\n    };\n}\n\nfunction __PRIVATE_isValidResourceName(t) {\n    // Resource names have at least 4 components (project ID, database ID)\n    return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function __PRIVATE_newSerializer(t) {\n    return new JsonProtoSerializer(t, /* useProto3Json= */ !0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass __PRIVATE_ExponentialBackoff {\n    constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    t, \n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    e, \n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    r = 1e3\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */ , n = 1.5\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */ , i = 6e4) {\n        this.$ = t, this.timerId = e, this.L = r, this.M = n, this.k = i, this.U = 0, this.j = null, \n        /** The last backoff attempt, as epoch milliseconds. */\n        this.W = Date.now(), this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */    reset() {\n        this.U = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */    K() {\n        this.U = this.k;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */    G(t) {\n        // Cancel any pending backoff operation.\n        this.cancel();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const e = Math.floor(this.U + this.H()), r = Math.max(0, Date.now() - this.W), n = Math.max(0, e - r);\n        // Guard against lastAttemptTime being in the future due to a clock change.\n                n > 0 && __PRIVATE_logDebug(\"ExponentialBackoff\", `Backing off for ${n} ms (base delay: ${this.U} ms, delay with jitter: ${e} ms, last attempt: ${r} ms ago)`), \n        this.j = this.$.enqueueAfterDelay(this.timerId, n, (() => (this.W = Date.now(), \n        t()))), \n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.U *= this.M, this.U < this.L && (this.U = this.L), this.U > this.k && (this.U = this.k);\n    }\n    J() {\n        null !== this.j && (this.j.skipDelay(), this.j = null);\n    }\n    cancel() {\n        null !== this.j && (this.j.cancel(), this.j = null);\n    }\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    H() {\n        return (Math.random() - .5) * this.U;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass __PRIVATE_DatastoreImpl extends class Datastore {} {\n    constructor(t, e, r, n) {\n        super(), this.authCredentials = t, this.appCheckCredentials = e, this.connection = r, \n        this.serializer = n, this.Y = !1;\n    }\n    Z() {\n        if (this.Y) throw new FirestoreError(w, \"The client has already been terminated.\");\n    }\n    /** Invokes the provided RPC with auth and AppCheck tokens. */    P(t, e, r, n) {\n        return this.Z(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([i, s]) => this.connection.P(t, __PRIVATE_toResourcePath(e, r), n, i, s))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());\n        }));\n    }\n    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    g(t, e, r, n, i) {\n        return this.Z(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, o]) => this.connection.g(t, __PRIVATE_toResourcePath(e, r), n, s, o, i))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === p && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new FirestoreError(A, t.toString());\n        }));\n    }\n    terminate() {\n        this.Y = !0, this.connection.terminate();\n    }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nasync function __PRIVATE_invokeCommitRpc(t, e) {\n    const r = __PRIVATE_debugCast(t), n = {\n        writes: e.map((t => toMutation(r.serializer, t)))\n    };\n    await r.P(\"Commit\", r.serializer.databaseId, ResourcePath.emptyPath(), n);\n}\n\nasync function __PRIVATE_invokeBatchGetDocumentsRpc(t, e) {\n    const r = __PRIVATE_debugCast(t), n = {\n        documents: e.map((t => __PRIVATE_toName(r.serializer, t)))\n    }, i = await r.g(\"BatchGetDocuments\", r.serializer.databaseId, ResourcePath.emptyPath(), n, e.length), s = new Map;\n    i.forEach((t => {\n        const e = __PRIVATE_fromBatchGetDocumentsResponse(r.serializer, t);\n        s.set(e.key.toString(), e);\n    }));\n    const o = [];\n    return e.forEach((t => {\n        const e = s.get(t.toString());\n        __PRIVATE_hardAssert(!!e), o.push(e);\n    })), o;\n}\n\nasync function __PRIVATE_invokeRunQueryRpc(t, e) {\n    const r = __PRIVATE_debugCast(t), {B: n, parent: i} = __PRIVATE_toQueryTarget(r.serializer, __PRIVATE_queryToTarget(e));\n    return (await r.g(\"RunQuery\", r.serializer.databaseId, i, {\n        structuredQuery: n.structuredQuery\n    })).filter((t => !!t.document)).map((t => function __PRIVATE_fromDocument(t, e, r) {\n        const n = fromName(t, e.name), i = __PRIVATE_fromVersion(e.updateTime), s = e.createTime ? __PRIVATE_fromVersion(e.createTime) : SnapshotVersion.min(), o = new ObjectValue({\n            mapValue: {\n                fields: e.fields\n            }\n        }), a = MutableDocument.newFoundDocument(n, i, s, o);\n        return r && a.setHasCommittedMutations(), r ? a.setHasCommittedMutations() : a;\n    }(r.serializer, t.document, void 0)));\n}\n\nasync function __PRIVATE_invokeRunAggregationQueryRpc(t, e, r) {\n    var n;\n    const i = __PRIVATE_debugCast(t), {request: s, X: o, parent: a} = function __PRIVATE_toRunAggregationQueryRequest(t, e, r, n) {\n        const {B: i, parent: s} = __PRIVATE_toQueryTarget(t, e), o = {}, a = [];\n        let u = 0;\n        return r.forEach((t => {\n            // Map all client-side aliases to a unique short-form\n            // alias. This avoids issues with client-side aliases that\n            // exceed the 1500-byte string size limit.\n            const e = n ? t.alias : \"aggregate_\" + u++;\n            o[e] = t.alias, \"count\" === t.aggregateType ? a.push({\n                alias: e,\n                count: {}\n            }) : \"avg\" === t.aggregateType ? a.push({\n                alias: e,\n                avg: {\n                    field: __PRIVATE_toFieldPathReference(t.fieldPath)\n                }\n            }) : \"sum\" === t.aggregateType && a.push({\n                alias: e,\n                sum: {\n                    field: __PRIVATE_toFieldPathReference(t.fieldPath)\n                }\n            });\n        })), {\n            request: {\n                structuredAggregationQuery: {\n                    aggregations: a,\n                    structuredQuery: i.structuredQuery\n                },\n                parent: i.parent\n            },\n            X: o,\n            parent: s\n        };\n    }(i.serializer, function __PRIVATE_queryToAggregateTarget(t) {\n        const e = __PRIVATE_debugCast(t);\n        return e.O || (\n        // Do not include implicit order-bys for aggregate queries.\n        e.O = __PRIVATE__queryToTarget(e, t.explicitOrderBy)), e.O;\n    }(e), r);\n    i.connection.R || delete s.parent;\n    const u = (await i.g(\"RunAggregationQuery\", i.serializer.databaseId, a, s, \n    /*expectedResponseCount=*/ 1)).filter((t => !!t.result));\n    // Omit RunAggregationQueryResponse that only contain readTimes.\n        __PRIVATE_hardAssert(1 === u.length);\n    // Remap the short-form aliases that were sent to the server\n    // to the client-side aliases. Users will access the results\n    // using the client-side alias.\n    const _ = null === (n = u[0].result) || void 0 === n ? void 0 : n.aggregateFields;\n    return Object.keys(_).reduce(((t, e) => (t[o[e]] = _[e], t)), {});\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const k = new Map;\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction __PRIVATE_getDatastore(t) {\n    if (t._terminated) throw new FirestoreError(w, \"The client has already been terminated.\");\n    if (!k.has(t)) {\n        __PRIVATE_logDebug(\"ComponentProvider\", \"Initializing Datastore\");\n        const e = function __PRIVATE_newConnection(t) {\n            return new __PRIVATE_FetchConnection(t, fetch.bind(null));\n        }(function __PRIVATE_makeDatabaseInfo(t, e, r, n) {\n            return new DatabaseInfo(t, e, r, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(n.experimentalLongPollingOptions), n.useFetchStreams);\n        }\n        /**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t._databaseId, t.app.options.appId || \"\", t._persistenceKey, t._freezeSettings())), r = __PRIVATE_newSerializer(t._databaseId), n = function __PRIVATE_newDatastore(t, e, r, n) {\n            return new __PRIVATE_DatastoreImpl(t, e, r, n);\n        }(t._authCredentials, t._appCheckCredentials, e, r);\n        k.set(t, n);\n    }\n    return k.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass FirestoreSettingsImpl {\n    constructor(t) {\n        var e, r;\n        if (void 0 === t.host) {\n            if (void 0 !== t.ssl) throw new FirestoreError(T, \"Can't provide ssl option if host option is not set\");\n            this.host = \"firestore.googleapis.com\", this.ssl = true;\n        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, \n        this.localCache = t.localCache, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {\n            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new FirestoreError(T, \"cacheSizeBytes must be at least 1048576\");\n            this.cacheSizeBytes = t.cacheSizeBytes;\n        }\n        !function __PRIVATE_validateIsNotUsedTogether(t, e, r, n) {\n            if (!0 === e && !0 === n) throw new FirestoreError(T, `${t} and ${r} cannot be used together.`);\n        }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling), \n        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : void 0 === t.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : \n        // For backwards compatibility, coerce the value to boolean even though\n        // the TypeScript compiler has narrowed the type to boolean already.\n        // noinspection PointlessBooleanExpressionJS\n        this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, \n        this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (r = t.experimentalLongPollingOptions) && void 0 !== r ? r : {}), \n        function __PRIVATE_validateLongPollingOptions(t) {\n            if (void 0 !== t.timeoutSeconds) {\n                if (isNaN(t.timeoutSeconds)) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (must not be NaN)`);\n                if (t.timeoutSeconds < 5) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (minimum allowed value is 5)`);\n                if (t.timeoutSeconds > 30) throw new FirestoreError(T, `invalid long polling timeout: ${t.timeoutSeconds} (maximum allowed value is 30)`);\n            }\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        /**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n */ (this.experimentalLongPollingOptions), this.useFetchStreams = !!t.useFetchStreams;\n    }\n    isEqual(t) {\n        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(t, e) {\n            return t.timeoutSeconds === e.timeoutSeconds;\n        }(this.experimentalLongPollingOptions, t.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n    }\n}\n\nclass Firestore {\n    /** @hideconstructor */\n    constructor(t, e, r, n) {\n        this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = r, \n        this._app = n, \n        /**\n         * Whether it's a Firestore or Firestore Lite instance.\n         */\n        this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new FirestoreSettingsImpl({}), \n        this._settingsFrozen = !1;\n    }\n    /**\n     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n     * instance.\n     */    get app() {\n        if (!this._app) throw new FirestoreError(w, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n        return this._app;\n    }\n    get _initialized() {\n        return this._settingsFrozen;\n    }\n    get _terminated() {\n        return void 0 !== this._terminateTask;\n    }\n    _setSettings(t) {\n        if (this._settingsFrozen) throw new FirestoreError(w, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n        this._settings = new FirestoreSettingsImpl(t), void 0 !== t.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(t) {\n            if (!t) return new __PRIVATE_EmptyAuthCredentialsProvider;\n            switch (t.type) {\n              case \"firstParty\":\n                return new __PRIVATE_FirstPartyAuthCredentialsProvider(t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n\n              case \"provider\":\n                return t.client;\n\n              default:\n                throw new FirestoreError(T, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n            }\n        }(t.credentials));\n    }\n    _getSettings() {\n        return this._settings;\n    }\n    _freezeSettings() {\n        return this._settingsFrozen = !0, this._settings;\n    }\n    _delete() {\n        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n    }\n    /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {\n        return {\n            app: this._app,\n            databaseId: this._databaseId,\n            settings: this._settings\n        };\n    }\n    /**\n     * Terminates all components used by this client. Subclasses can override\n     * this method to clean up their own dependencies, but must also call this\n     * method.\n     *\n     * Only ever called once.\n     */    _terminate() {\n        return function __PRIVATE_removeComponents(t) {\n            const e = k.get(t);\n            e && (__PRIVATE_logDebug(\"ComponentProvider\", \"Removing Datastore\"), k.delete(t), \n            e.terminate());\n        }(this), Promise.resolve();\n    }\n}\n\nfunction initializeFirestore(t, e, r) {\n    r || (r = \"(default)\");\n    const n = _getProvider(t, \"firestore/lite\");\n    if (n.isInitialized(r)) throw new FirestoreError(w, \"Firestore can only be initialized once per app.\");\n    return n.initialize({\n        options: e,\n        instanceIdentifier: r\n    });\n}\n\nfunction getFirestore(e, r) {\n    const n = \"object\" == typeof e ? e : getApp(), i = \"string\" == typeof e ? e : r || \"(default)\", s = _getProvider(n, \"firestore/lite\").getImmediate({\n        identifier: i\n    });\n    if (!s._initialized) {\n        const t = getDefaultEmulatorHostnameAndPort(\"firestore\");\n        t && connectFirestoreEmulator(s, ...t);\n    }\n    return s;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */ function connectFirestoreEmulator(t, e, r, n = {}) {\n    var i;\n    const s = (t = __PRIVATE_cast(t, Firestore))._getSettings(), o = `${e}:${r}`;\n    if (\"firestore.googleapis.com\" !== s.host && s.host !== o && __PRIVATE_logWarn(\"Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.\"), \n    t._setSettings(Object.assign(Object.assign({}, s), {\n        host: o,\n        ssl: !1\n    })), n.mockUserToken) {\n        let e, r;\n        if (\"string\" == typeof n.mockUserToken) e = n.mockUserToken, r = User.MOCK_USER; else {\n            // Let createMockUserToken validate first (catches common mistakes like\n            // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n            e = createMockUserToken(n.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);\n            const s = n.mockUserToken.sub || n.mockUserToken.user_id;\n            if (!s) throw new FirestoreError(T, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n            r = new User(s);\n        }\n        t._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(e, r));\n    }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */ function terminate(t) {\n    return t = __PRIVATE_cast(t, Firestore), _removeServiceInstance(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass AggregateField {\n    /**\n     * Create a new AggregateField<T>\n     * @param aggregateType Specifies the type of aggregation operation to perform.\n     * @param _internalFieldPath Optionally specifies the field that is aggregated.\n     * @internal\n     */\n    constructor(t = \"count\", e) {\n        this._internalFieldPath = e, \n        /** A type string to uniquely identify instances of this class. */\n        this.type = \"AggregateField\", this.aggregateType = t;\n    }\n}\n\n/**\n * The results of executing an aggregation query.\n */ class AggregateQuerySnapshot {\n    /** @hideconstructor */\n    constructor(t, e, r) {\n        this._userDataWriter = e, this._data = r, \n        /** A type string to uniquely identify instances of this class. */\n        this.type = \"AggregateQuerySnapshot\", this.query = t;\n    }\n    /**\n     * Returns the results of the aggregations performed over the underlying\n     * query.\n     *\n     * The keys of the returned object will be the same as those of the\n     * `AggregateSpec` object specified to the aggregation method, and the values\n     * will be the corresponding aggregation result.\n     *\n     * @returns The results of the aggregations performed over the underlying\n     * query.\n     */    data() {\n        return this._userDataWriter.convertObjectMap(this._data);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */ class Query {\n    // This is the lite version of the Query class in the main SDK.\n    /** @hideconstructor protected */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, r) {\n        this.converter = e, this._query = r, \n        /** The type of this Firestore reference. */\n        this.type = \"query\", this.firestore = t;\n    }\n    withConverter(t) {\n        return new Query(this.firestore, t, this._query);\n    }\n}\n\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */ class DocumentReference {\n    /** @hideconstructor */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, r) {\n        this.converter = e, this._key = r, \n        /** The type of this Firestore reference. */\n        this.type = \"document\", this.firestore = t;\n    }\n    get _path() {\n        return this._key.path;\n    }\n    /**\n     * The document's identifier within its collection.\n     */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */    get path() {\n        return this._key.path.canonicalString();\n    }\n    /**\n     * The collection this `DocumentReference` belongs to.\n     */    get parent() {\n        return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());\n    }\n    withConverter(t) {\n        return new DocumentReference(this.firestore, t, this._key);\n    }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link (query:1)}).\n */ class CollectionReference extends Query {\n    /** @hideconstructor */\n    constructor(t, e, r) {\n        super(t, e, function __PRIVATE_newQueryForPath(t) {\n            return new __PRIVATE_QueryImpl(t);\n        }(r)), this._path = r, \n        /** The type of this Firestore reference. */\n        this.type = \"collection\";\n    }\n    /** The collection's identifier. */    get id() {\n        return this._query.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */    get path() {\n        return this._query.path.canonicalString();\n    }\n    /**\n     * A reference to the containing `DocumentReference` if this is a\n     * subcollection. If this isn't a subcollection, the reference is null.\n     */    get parent() {\n        const t = this._path.popLast();\n        return t.isEmpty() ? null : new DocumentReference(this.firestore, \n        /* converter= */ null, new DocumentKey(t));\n    }\n    withConverter(t) {\n        return new CollectionReference(this.firestore, t, this._path);\n    }\n}\n\nfunction collection(t, e, ...r) {\n    if (t = getModularInstance(t), __PRIVATE_validateNonEmptyArgument(\"collection\", \"path\", e), t instanceof Firestore) {\n        const n = ResourcePath.fromString(e, ...r);\n        return __PRIVATE_validateCollectionPath(n), new CollectionReference(t, /* converter= */ null, n);\n    }\n    {\n        if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const n = t._path.child(ResourcePath.fromString(e, ...r));\n        return __PRIVATE_validateCollectionPath(n), new CollectionReference(t.firestore, \n        /* converter= */ null, n);\n    }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */ function collectionGroup(t, e) {\n    if (t = __PRIVATE_cast(t, Firestore), __PRIVATE_validateNonEmptyArgument(\"collectionGroup\", \"collection id\", e), \n    e.indexOf(\"/\") >= 0) throw new FirestoreError(T, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n    return new Query(t, \n    /* converter= */ null, function __PRIVATE_newQueryForCollectionGroup(t) {\n        return new __PRIVATE_QueryImpl(ResourcePath.emptyPath(), t);\n    }(e));\n}\n\nfunction doc(t, e, ...r) {\n    if (t = getModularInstance(t), \n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    1 === arguments.length && (e = __PRIVATE_AutoId.newId()), __PRIVATE_validateNonEmptyArgument(\"doc\", \"path\", e), \n    t instanceof Firestore) {\n        const n = ResourcePath.fromString(e, ...r);\n        return __PRIVATE_validateDocumentPath(n), new DocumentReference(t, \n        /* converter= */ null, new DocumentKey(n));\n    }\n    {\n        if (!(t instanceof DocumentReference || t instanceof CollectionReference)) throw new FirestoreError(T, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const n = t._path.child(ResourcePath.fromString(e, ...r));\n        return __PRIVATE_validateDocumentPath(n), new DocumentReference(t.firestore, t instanceof CollectionReference ? t.converter : null, new DocumentKey(n));\n    }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function refEqual(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), (t instanceof DocumentReference || t instanceof CollectionReference) && (e instanceof DocumentReference || e instanceof CollectionReference) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function queryEqual(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), t instanceof Query && e instanceof Query && (t.firestore === e.firestore && __PRIVATE_queryEquals(t._query, e._query) && t.converter === e.converter);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */ class Bytes {\n    /** @hideconstructor */\n    constructor(t) {\n        this._byteString = t;\n    }\n    /**\n     * Creates a new `Bytes` object from the given Base64 string, converting it to\n     * bytes.\n     *\n     * @param base64 - The Base64 string used to create the `Bytes` object.\n     */    static fromBase64String(t) {\n        try {\n            return new Bytes(ByteString.fromBase64String(t));\n        } catch (t) {\n            throw new FirestoreError(T, \"Failed to construct data from Base64 string: \" + t);\n        }\n    }\n    /**\n     * Creates a new `Bytes` object from the given Uint8Array.\n     *\n     * @param array - The Uint8Array used to create the `Bytes` object.\n     */    static fromUint8Array(t) {\n        return new Bytes(ByteString.fromUint8Array(t));\n    }\n    /**\n     * Returns the underlying bytes as a Base64-encoded string.\n     *\n     * @returns The Base64-encoded string created from the `Bytes` object.\n     */    toBase64() {\n        return this._byteString.toBase64();\n    }\n    /**\n     * Returns the underlying bytes in a new `Uint8Array`.\n     *\n     * @returns The Uint8Array created from the `Bytes` object.\n     */    toUint8Array() {\n        return this._byteString.toUint8Array();\n    }\n    /**\n     * Returns a string representation of the `Bytes` object.\n     *\n     * @returns A string representation of the `Bytes` object.\n     */    toString() {\n        return \"Bytes(base64: \" + this.toBase64() + \")\";\n    }\n    /**\n     * Returns true if this `Bytes` object is equal to the provided one.\n     *\n     * @param other - The `Bytes` object to compare against.\n     * @returns true if this `Bytes` object is equal to the provided one.\n     */    isEqual(t) {\n        return this._byteString.isEqual(t._byteString);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */ class FieldPath {\n    /**\n     * Creates a `FieldPath` from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames - A list of field names.\n     */\n    constructor(...t) {\n        for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new FirestoreError(T, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n        this._internalPath = new FieldPath$1(t);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided one.\n     *\n     * @param other - The `FieldPath` to compare against.\n     * @returns true if this `FieldPath` is equal to the provided one.\n     */    isEqual(t) {\n        return this._internalPath.isEqual(t._internalPath);\n    }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */ function documentId() {\n    return new FieldPath(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */ class FieldValue {\n    /**\n     * @param _methodName - The public API endpoint that returns this class.\n     * @hideconstructor\n     */\n    constructor(t) {\n        this._methodName = t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */ class GeoPoint {\n    /**\n     * Creates a new immutable `GeoPoint` object with the provided latitude and\n     * longitude values.\n     * @param latitude - The latitude as number between -90 and 90.\n     * @param longitude - The longitude as number between -180 and 180.\n     */\n    constructor(t, e) {\n        if (!isFinite(t) || t < -90 || t > 90) throw new FirestoreError(T, \"Latitude must be a number between -90 and 90, but was: \" + t);\n        if (!isFinite(e) || e < -180 || e > 180) throw new FirestoreError(T, \"Longitude must be a number between -180 and 180, but was: \" + e);\n        this._lat = t, this._long = e;\n    }\n    /**\n     * The latitude of this `GeoPoint` instance.\n     */    get latitude() {\n        return this._lat;\n    }\n    /**\n     * The longitude of this `GeoPoint` instance.\n     */    get longitude() {\n        return this._long;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other - The `GeoPoint` to compare against.\n     * @returns true if this `GeoPoint` is equal to the provided one.\n     */    isEqual(t) {\n        return this._lat === t._lat && this._long === t._long;\n    }\n    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {\n        return {\n            latitude: this._lat,\n            longitude: this._long\n        };\n    }\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */    _compareTo(t) {\n        return __PRIVATE_primitiveComparator(this._lat, t._lat) || __PRIVATE_primitiveComparator(this._long, t._long);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const U = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */ class ParsedSetData {\n    constructor(t, e, r) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = r;\n    }\n    toMutation(t, e) {\n        return null !== this.fieldMask ? new __PRIVATE_PatchMutation(t, this.data, this.fieldMask, e, this.fieldTransforms) : new __PRIVATE_SetMutation(t, this.data, e, this.fieldTransforms);\n    }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */ class ParsedUpdateData {\n    constructor(t, \n    // The fieldMask does not include document transforms.\n    e, r) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = r;\n    }\n    toMutation(t, e) {\n        return new __PRIVATE_PatchMutation(t, this.data, this.fieldMask, e, this.fieldTransforms);\n    }\n}\n\nfunction __PRIVATE_isWrite(t) {\n    switch (t) {\n      case 0 /* UserDataSource.Set */ :\n // fall through\n              case 2 /* UserDataSource.MergeSet */ :\n // fall through\n              case 1 /* UserDataSource.Update */ :\n        return !0;\n\n      case 3 /* UserDataSource.Argument */ :\n      case 4 /* UserDataSource.ArrayArgument */ :\n        return !1;\n\n      default:\n        throw fail();\n    }\n}\n\n/** A \"context\" object passed around while parsing user data. */ class __PRIVATE_ParseContextImpl {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param settings - The settings for the parser.\n     * @param databaseId - The database ID of the Firestore instance.\n     * @param serializer - The serializer to use to generate the Value proto.\n     * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n     * rather than throw.\n     * @param fieldTransforms - A mutable list of field transforms encountered\n     * while parsing the data.\n     * @param fieldMask - A mutable list of field paths encountered while parsing\n     * the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    constructor(t, e, r, n, i, s) {\n        this.settings = t, this.databaseId = e, this.serializer = r, this.ignoreUndefinedProperties = n, \n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        void 0 === i && this.tt(), this.fieldTransforms = i || [], this.fieldMask = s || [];\n    }\n    get path() {\n        return this.settings.path;\n    }\n    get et() {\n        return this.settings.et;\n    }\n    /** Returns a new context with the specified settings overwritten. */    rt(t) {\n        return new __PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n    }\n    nt(t) {\n        var e;\n        const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), n = this.rt({\n            path: r,\n            it: !1\n        });\n        return n.st(t), n;\n    }\n    ot(t) {\n        var e;\n        const r = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), n = this.rt({\n            path: r,\n            it: !1\n        });\n        return n.tt(), n;\n    }\n    ut(t) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // undefined.\n        return this.rt({\n            path: void 0,\n            it: !0\n        });\n    }\n    _t(t) {\n        return __PRIVATE_createError(t, this.settings.methodName, this.settings.ct || !1, this.path, this.settings.lt);\n    }\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {\n        return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));\n    }\n    tt() {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path) for (let t = 0; t < this.path.length; t++) this.st(this.path.get(t));\n    }\n    st(t) {\n        if (0 === t.length) throw this._t(\"Document fields must not be empty\");\n        if (__PRIVATE_isWrite(this.et) && U.test(t)) throw this._t('Document fields cannot begin and end with \"__\"');\n    }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */ class __PRIVATE_UserDataReader {\n    constructor(t, e, r) {\n        this.databaseId = t, this.ignoreUndefinedProperties = e, this.serializer = r || __PRIVATE_newSerializer(t);\n    }\n    /** Creates a new top-level parse context. */    ht(t, e, r, n = !1) {\n        return new __PRIVATE_ParseContextImpl({\n            et: t,\n            methodName: e,\n            lt: r,\n            path: FieldPath$1.emptyPath(),\n            it: !1,\n            ct: n\n        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n    }\n}\n\nfunction __PRIVATE_newUserDataReader(t) {\n    const e = t._freezeSettings(), r = __PRIVATE_newSerializer(t._databaseId);\n    return new __PRIVATE_UserDataReader(t._databaseId, !!e.ignoreUndefinedProperties, r);\n}\n\n/** Parse document data from a set() call. */ function __PRIVATE_parseSetData(t, e, r, n, i, s = {}) {\n    const o = t.ht(s.merge || s.mergeFields ? 2 /* UserDataSource.MergeSet */ : 0 /* UserDataSource.Set */ , e, r, i);\n    __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", o, n);\n    const a = __PRIVATE_parseObject(n, o);\n    let u, _;\n    if (s.merge) u = new FieldMask(o.fieldMask), _ = o.fieldTransforms; else if (s.mergeFields) {\n        const t = [];\n        for (const n of s.mergeFields) {\n            const i = __PRIVATE_fieldPathFromArgument$1(e, n, r);\n            if (!o.contains(i)) throw new FirestoreError(T, `Field '${i}' is specified in your field mask but missing from your input data.`);\n            __PRIVATE_fieldMaskContains(t, i) || t.push(i);\n        }\n        u = new FieldMask(t), _ = o.fieldTransforms.filter((t => u.covers(t.field)));\n    } else u = null, _ = o.fieldTransforms;\n    return new ParsedSetData(new ObjectValue(a), u, _);\n}\n\nclass __PRIVATE_DeleteFieldValueImpl extends FieldValue {\n    _toFieldTransform(t) {\n        if (2 /* UserDataSource.MergeSet */ !== t.et) throw 1 /* UserDataSource.Update */ === t.et ? t._t(`${this._methodName}() can only appear at the top level of your update data`) : t._t(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        return t.fieldMask.push(t.path), null;\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_DeleteFieldValueImpl;\n    }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */ function __PRIVATE_createSentinelChildContext(t, e, r) {\n    return new __PRIVATE_ParseContextImpl({\n        et: 3 /* UserDataSource.Argument */ ,\n        lt: e.settings.lt,\n        methodName: t._methodName,\n        it: r\n    }, e.databaseId, e.serializer, e.ignoreUndefinedProperties);\n}\n\nclass __PRIVATE_ServerTimestampFieldValueImpl extends FieldValue {\n    _toFieldTransform(t) {\n        return new FieldTransform(t.path, new __PRIVATE_ServerTimestampTransform);\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_ServerTimestampFieldValueImpl;\n    }\n}\n\nclass __PRIVATE_ArrayUnionFieldValueImpl extends FieldValue {\n    constructor(t, e) {\n        super(t), this.dt = e;\n    }\n    _toFieldTransform(t) {\n        const e = __PRIVATE_createSentinelChildContext(this, t, \n        /*array=*/ !0), r = this.dt.map((t => __PRIVATE_parseData(t, e))), n = new __PRIVATE_ArrayUnionTransformOperation(r);\n        return new FieldTransform(t.path, n);\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_ArrayUnionFieldValueImpl && deepEqual(this.dt, t.dt);\n    }\n}\n\nclass __PRIVATE_ArrayRemoveFieldValueImpl extends FieldValue {\n    constructor(t, e) {\n        super(t), this.dt = e;\n    }\n    _toFieldTransform(t) {\n        const e = __PRIVATE_createSentinelChildContext(this, t, \n        /*array=*/ !0), r = this.dt.map((t => __PRIVATE_parseData(t, e))), n = new __PRIVATE_ArrayRemoveTransformOperation(r);\n        return new FieldTransform(t.path, n);\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_ArrayRemoveFieldValueImpl && deepEqual(this.dt, t.dt);\n    }\n}\n\nclass __PRIVATE_NumericIncrementFieldValueImpl extends FieldValue {\n    constructor(t, e) {\n        super(t), this.ft = e;\n    }\n    _toFieldTransform(t) {\n        const e = new __PRIVATE_NumericIncrementTransformOperation(t.serializer, toNumber(t.serializer, this.ft));\n        return new FieldTransform(t.path, e);\n    }\n    isEqual(t) {\n        return t instanceof __PRIVATE_NumericIncrementFieldValueImpl && this.ft === t.ft;\n    }\n}\n\n/** Parse update data from an update() call. */ function __PRIVATE_parseUpdateData(t, e, r, n) {\n    const i = t.ht(1 /* UserDataSource.Update */ , e, r);\n    __PRIVATE_validatePlainObject(\"Data must be an object, but it was:\", i, n);\n    const s = [], o = ObjectValue.empty();\n    forEach(n, ((t, n) => {\n        const a = __PRIVATE_fieldPathFromDotSeparatedString(e, t, r);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                n = getModularInstance(n);\n        const u = i.ot(a);\n        if (n instanceof __PRIVATE_DeleteFieldValueImpl) \n        // Add it to the field mask, but don't add anything to updateData.\n        s.push(a); else {\n            const t = __PRIVATE_parseData(n, u);\n            null != t && (s.push(a), o.set(a, t));\n        }\n    }));\n    const a = new FieldMask(s);\n    return new ParsedUpdateData(o, a, i.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */ function __PRIVATE_parseUpdateVarargs(t, e, r, n, i, s) {\n    const o = t.ht(1 /* UserDataSource.Update */ , e, r), a = [ __PRIVATE_fieldPathFromArgument$1(e, n, r) ], u = [ i ];\n    if (s.length % 2 != 0) throw new FirestoreError(T, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n    for (let t = 0; t < s.length; t += 2) a.push(__PRIVATE_fieldPathFromArgument$1(e, s[t])), \n    u.push(s[t + 1]);\n    const _ = [], c = ObjectValue.empty();\n    // We iterate in reverse order to pick the last value for a field if the\n    // user specified the field multiple times.\n    for (let t = a.length - 1; t >= 0; --t) if (!__PRIVATE_fieldMaskContains(_, a[t])) {\n        const e = a[t];\n        let r = u[t];\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                r = getModularInstance(r);\n        const n = o.ot(e);\n        if (r instanceof __PRIVATE_DeleteFieldValueImpl) \n        // Add it to the field mask, but don't add anything to updateData.\n        _.push(e); else {\n            const t = __PRIVATE_parseData(r, n);\n            null != t && (_.push(e), c.set(e, t));\n        }\n    }\n    const h = new FieldMask(_);\n    return new ParsedUpdateData(c, h, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */ function __PRIVATE_parseQueryValue(t, e, r, n = !1) {\n    return __PRIVATE_parseData(r, t.ht(n ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */ , e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */ function __PRIVATE_parseData(t, e) {\n    if (__PRIVATE_looksLikeJsonObject(\n    // Unwrap the API type from the Compat SDK. This will return the API type\n    // from firestore-exp.\n    t = getModularInstance(t))) return __PRIVATE_validatePlainObject(\"Unsupported field value:\", e, t), \n    __PRIVATE_parseObject(t, e);\n    if (t instanceof FieldValue) \n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\n    return function __PRIVATE_parseSentinelFieldValue(t, e) {\n        // Sentinels are only supported with writes, and not within arrays.\n        if (!__PRIVATE_isWrite(e.et)) throw e._t(`${t._methodName}() can only be used with update() and set()`);\n        if (!e.path) throw e._t(`${t._methodName}() is not currently supported inside arrays`);\n        const r = t._toFieldTransform(e);\n        r && e.fieldTransforms.push(r);\n    }\n    /**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @returns The parsed value\n */ (t, e), null;\n    if (void 0 === t && e.ignoreUndefinedProperties) \n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n    if (\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    e.path && e.fieldMask.push(e.path), t instanceof Array) {\n        // TODO(b/34871131): Include the path containing the array in the error\n        // message.\n        // In the case of IN queries, the parsed data is an array (representing\n        // the set of values to be included for the IN query) that may directly\n        // contain additional arrays (each representing an individual field\n        // value), so we disable this validation.\n        if (e.settings.it && 4 /* UserDataSource.ArrayArgument */ !== e.et) throw e._t(\"Nested arrays are not supported\");\n        return function __PRIVATE_parseArray(t, e) {\n            const r = [];\n            let n = 0;\n            for (const i of t) {\n                let t = __PRIVATE_parseData(i, e.ut(n));\n                null == t && (\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                t = {\n                    nullValue: \"NULL_VALUE\"\n                }), r.push(t), n++;\n            }\n            return {\n                arrayValue: {\n                    values: r\n                }\n            };\n        }(t, e);\n    }\n    return function __PRIVATE_parseScalarValue(t, e) {\n        if (null === (t = getModularInstance(t))) return {\n            nullValue: \"NULL_VALUE\"\n        };\n        if (\"number\" == typeof t) return toNumber(e.serializer, t);\n        if (\"boolean\" == typeof t) return {\n            booleanValue: t\n        };\n        if (\"string\" == typeof t) return {\n            stringValue: t\n        };\n        if (t instanceof Date) {\n            const r = Timestamp.fromDate(t);\n            return {\n                timestampValue: toTimestamp(e.serializer, r)\n            };\n        }\n        if (t instanceof Timestamp) {\n            // Firestore backend truncates precision down to microseconds. To ensure\n            // offline mode works the same with regards to truncation, perform the\n            // truncation immediately without waiting for the backend to do that.\n            const r = new Timestamp(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n            return {\n                timestampValue: toTimestamp(e.serializer, r)\n            };\n        }\n        if (t instanceof GeoPoint) return {\n            geoPointValue: {\n                latitude: t.latitude,\n                longitude: t.longitude\n            }\n        };\n        if (t instanceof Bytes) return {\n            bytesValue: __PRIVATE_toBytes(e.serializer, t._byteString)\n        };\n        if (t instanceof DocumentReference) {\n            const r = e.databaseId, n = t.firestore._databaseId;\n            if (!n.isEqual(r)) throw e._t(`Document reference is for database ${n.projectId}/${n.database} but should be for database ${r.projectId}/${r.database}`);\n            return {\n                referenceValue: __PRIVATE_toResourceName(t.firestore._databaseId || e.databaseId, t._key.path)\n            };\n        }\n        throw e._t(`Unsupported field value: ${__PRIVATE_valueDescription(t)}`);\n    }\n    /**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */ (t, e);\n}\n\nfunction __PRIVATE_parseObject(t, e) {\n    const r = {};\n    return !function isEmpty(t) {\n        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n        return !0;\n    }(t) ? forEach(t, ((t, n) => {\n        const i = __PRIVATE_parseData(n, e.nt(t));\n        null != i && (r[t] = i);\n    })) : \n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n        mapValue: {\n            fields: r\n        }\n    };\n}\n\nfunction __PRIVATE_looksLikeJsonObject(t) {\n    return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof Timestamp || t instanceof GeoPoint || t instanceof Bytes || t instanceof DocumentReference || t instanceof FieldValue);\n}\n\nfunction __PRIVATE_validatePlainObject(t, e, r) {\n    if (!__PRIVATE_looksLikeJsonObject(r) || !function __PRIVATE_isPlainObject(t) {\n        return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n    }(r)) {\n        const n = __PRIVATE_valueDescription(r);\n        throw \"an object\" === n ? e._t(t + \" a custom object\") : e._t(t + \" \" + n);\n    }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */ function __PRIVATE_fieldPathFromArgument$1(t, e, r) {\n    if ((\n    // If required, replace the FieldPath Compat class with with the firestore-exp\n    // FieldPath.\n    e = getModularInstance(e)) instanceof FieldPath) return e._internalPath;\n    if (\"string\" == typeof e) return __PRIVATE_fieldPathFromDotSeparatedString(t, e);\n    throw __PRIVATE_createError(\"Field path arguments must be of type string or \", t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, r);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */ const j = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */ function __PRIVATE_fieldPathFromDotSeparatedString(t, e, r) {\n    if (e.search(j) >= 0) throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, r);\n    try {\n        return new FieldPath(...e.split(\".\"))._internalPath;\n    } catch (n) {\n        throw __PRIVATE_createError(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, \n        /* hasConverter= */ !1, \n        /* path= */ void 0, r);\n    }\n}\n\nfunction __PRIVATE_createError(t, e, r, n, i) {\n    const s = n && !n.isEmpty(), o = void 0 !== i;\n    let a = `Function ${e}() called with invalid data`;\n    r && (a += \" (via `toFirestore()`)\"), a += \". \";\n    let u = \"\";\n    return (s || o) && (u += \" (found\", s && (u += ` in field ${n}`), o && (u += ` in document ${i}`), \n    u += \")\"), new FirestoreError(T, a + t + u);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function __PRIVATE_fieldMaskContains(t, e) {\n    return t.some((t => t.isEqual(e)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */ class DocumentSnapshot {\n    // Note: This class is stripped down version of the DocumentSnapshot in\n    // the legacy SDK. The changes are:\n    // - No support for SnapshotMetadata.\n    // - No support for SnapshotOptions.\n    /** @hideconstructor protected */\n    constructor(t, e, r, n, i) {\n        this._firestore = t, this._userDataWriter = e, this._key = r, this._document = n, \n        this._converter = i;\n    }\n    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */    get ref() {\n        return new DocumentReference(this._firestore, this._converter, this._key);\n    }\n    /**\n     * Signals whether or not the document at the snapshot's location exists.\n     *\n     * @returns true if the document exists.\n     */    exists() {\n        return null !== this._document;\n    }\n    /**\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n     * the document doesn't exist.\n     *\n     * @returns An `Object` containing all fields in the document or `undefined`\n     * if the document doesn't exist.\n     */    data() {\n        if (this._document) {\n            if (this._converter) {\n                // We only want to use the converter and create a new DocumentSnapshot\n                // if a converter has been provided.\n                const t = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, \n                /* converter= */ null);\n                return this._converter.fromFirestore(t);\n            }\n            return this._userDataWriter.convertValue(this._document.data.value);\n        }\n    }\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n     * field.\n     * @returns The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get(t) {\n        if (this._document) {\n            const e = this._document.data.field(__PRIVATE_fieldPathFromArgument(\"DocumentSnapshot.get\", t));\n            if (null !== e) return this._userDataWriter.convertValue(e);\n        }\n    }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */ class QueryDocumentSnapshot extends DocumentSnapshot {\n    /**\n     * Retrieves all fields in the document as an `Object`.\n     *\n     * @override\n     * @returns An `Object` containing all fields in the document.\n     */\n    data() {\n        return super.data();\n    }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */ class QuerySnapshot {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._docs = e, this.query = t;\n    }\n    /** An array of all the documents in the `QuerySnapshot`. */    get docs() {\n        return [ ...this._docs ];\n    }\n    /** The number of documents in the `QuerySnapshot`. */    get size() {\n        return this.docs.length;\n    }\n    /** True if there are no documents in the `QuerySnapshot`. */    get empty() {\n        return 0 === this.docs.length;\n    }\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg - The `this` binding for the callback.\n     */    forEach(t, e) {\n        this._docs.forEach(t, e);\n    }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */ function snapshotEqual(t, e) {\n    return t = getModularInstance(t), e = getModularInstance(e), t instanceof DocumentSnapshot && e instanceof DocumentSnapshot ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof QuerySnapshot && e instanceof QuerySnapshot && (queryEqual(t.query, e.query) && __PRIVATE_arrayEquals(t.docs, e.docs, snapshotEqual));\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */ function __PRIVATE_fieldPathFromArgument(t, e) {\n    return \"string\" == typeof e ? __PRIVATE_fieldPathFromDotSeparatedString(t, e) : e instanceof FieldPath ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\nclass AppliableConstraint {}\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link (query:1)} to create a new query instance that\n * also contains this `QueryConstraint`.\n */ class QueryConstraint extends AppliableConstraint {}\n\nfunction query(t, e, ...r) {\n    let n = [];\n    e instanceof AppliableConstraint && n.push(e), n = n.concat(r), function __PRIVATE_validateQueryConstraintArray(t) {\n        const e = t.filter((t => t instanceof QueryCompositeFilterConstraint)).length, r = t.filter((t => t instanceof QueryFieldFilterConstraint)).length;\n        if (e > 1 || e > 0 && r > 0) throw new FirestoreError(T, \"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.\");\n    }\n    /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */ (n);\n    for (const e of n) t = e._apply(t);\n    return t;\n}\n\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link (query:1)} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */ class QueryFieldFilterConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(t, e, r) {\n        super(), this._field = t, this._op = e, this._value = r, \n        /** The type of this query constraint */\n        this.type = \"where\";\n    }\n    static _create(t, e, r) {\n        return new QueryFieldFilterConstraint(t, e, r);\n    }\n    _apply(t) {\n        const e = this._parse(t);\n        return __PRIVATE_validateNewFieldFilter(t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e));\n    }\n    _parse(t) {\n        const e = __PRIVATE_newUserDataReader(t.firestore), r = function __PRIVATE_newQueryFilter(t, e, r, n, i, s, o) {\n            let a;\n            if (i.isKeyField()) {\n                if (\"array-contains\" /* Operator.ARRAY_CONTAINS */ === s || \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === s) throw new FirestoreError(T, `Invalid Query. You can't perform '${s}' queries on documentId().`);\n                if (\"in\" /* Operator.IN */ === s || \"not-in\" /* Operator.NOT_IN */ === s) {\n                    __PRIVATE_validateDisjunctiveFilterElements(o, s);\n                    const e = [];\n                    for (const r of o) e.push(__PRIVATE_parseDocumentIdValue(n, t, r));\n                    a = {\n                        arrayValue: {\n                            values: e\n                        }\n                    };\n                } else a = __PRIVATE_parseDocumentIdValue(n, t, o);\n            } else \"in\" /* Operator.IN */ !== s && \"not-in\" /* Operator.NOT_IN */ !== s && \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ !== s || __PRIVATE_validateDisjunctiveFilterElements(o, s), \n            a = __PRIVATE_parseQueryValue(r, e, o, \n            /* allowArrays= */ \"in\" /* Operator.IN */ === s || \"not-in\" /* Operator.NOT_IN */ === s);\n            return FieldFilter.create(i, s, a);\n        }(t._query, \"where\", e, t.firestore._databaseId, this._field, this._op, this._value);\n        return r;\n    }\n}\n\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */ function where(t, e, r) {\n    const n = e, i = __PRIVATE_fieldPathFromArgument(\"where\", t);\n    return QueryFieldFilterConstraint._create(i, n, r);\n}\n\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n */ class QueryCompositeFilterConstraint extends AppliableConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e) {\n        super(), this.type = t, this._queryConstraints = e;\n    }\n    static _create(t, e) {\n        return new QueryCompositeFilterConstraint(t, e);\n    }\n    _parse(t) {\n        const e = this._queryConstraints.map((e => e._parse(t))).filter((t => t.getFilters().length > 0));\n        return 1 === e.length ? e[0] : CompositeFilter.create(e, this._getOperator());\n    }\n    _apply(t) {\n        const e = this._parse(t);\n        return 0 === e.getFilters().length ? t : (function __PRIVATE_validateNewFilter(t, e) {\n            let r = t;\n            const n = e.getFlattenedFilters();\n            for (const t of n) __PRIVATE_validateNewFieldFilter(r, t), r = __PRIVATE_queryWithAddedFilter(r, t);\n        }\n        // Checks if any of the provided filter operators are included in the given list of filters and\n        // returns the first one that is, or null if none are.\n        (t._query, e), new Query(t.firestore, t.converter, __PRIVATE_queryWithAddedFilter(t._query, e)));\n    }\n    _getQueryConstraints() {\n        return this._queryConstraints;\n    }\n    _getOperator() {\n        return \"and\" === this.type ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\n    }\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */ function or(...t) {\n    // Only support QueryFilterConstraints\n    return t.forEach((t => __PRIVATE_validateQueryFilterConstraint(\"or\", t))), QueryCompositeFilterConstraint._create(\"or\" /* CompositeOperator.OR */ , t);\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */ function and(...t) {\n    // Only support QueryFilterConstraints\n    return t.forEach((t => __PRIVATE_validateQueryFilterConstraint(\"and\", t))), QueryCompositeFilterConstraint._create(\"and\" /* CompositeOperator.AND */ , t);\n}\n\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */ class QueryOrderByConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(t, e) {\n        super(), this._field = t, this._direction = e, \n        /** The type of this query constraint */\n        this.type = \"orderBy\";\n    }\n    static _create(t, e) {\n        return new QueryOrderByConstraint(t, e);\n    }\n    _apply(t) {\n        const e = function __PRIVATE_newQueryOrderBy(t, e, r) {\n            if (null !== t.startAt) throw new FirestoreError(T, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n            if (null !== t.endAt) throw new FirestoreError(T, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n            return new OrderBy(e, r);\n        }\n        /**\n * Create a `Bound` from a query and a document.\n *\n * Note that the `Bound` will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */ (t._query, this._field, this._direction);\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithAddedOrderBy(t, e) {\n            // TODO(dimond): validate that orderBy does not list the same key twice.\n            const r = t.explicitOrderBy.concat([ e ]);\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, r, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, e));\n    }\n}\n\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */ function orderBy(t, e = \"asc\") {\n    const r = e, n = __PRIVATE_fieldPathFromArgument(\"orderBy\", t);\n    return QueryOrderByConstraint._create(n, r);\n}\n\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */ class QueryLimitConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, r) {\n        super(), this.type = t, this._limit = e, this._limitType = r;\n    }\n    static _create(t, e, r) {\n        return new QueryLimitConstraint(t, e, r);\n    }\n    _apply(t) {\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithLimit(t, e, r) {\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, r, t.startAt, t.endAt);\n        }(t._query, this._limit, this._limitType));\n    }\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */ function limit(t) {\n    return __PRIVATE_validatePositiveNumber(\"limit\", t), QueryLimitConstraint._create(\"limit\", t, \"F\" /* LimitType.First */);\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */ function limitToLast(t) {\n    return __PRIVATE_validatePositiveNumber(\"limitToLast\", t), QueryLimitConstraint._create(\"limitToLast\", t, \"L\" /* LimitType.Last */);\n}\n\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */ class QueryStartAtConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, r) {\n        super(), this.type = t, this._docOrFields = e, this._inclusive = r;\n    }\n    static _create(t, e, r) {\n        return new QueryStartAtConstraint(t, e, r);\n    }\n    _apply(t) {\n        const e = __PRIVATE_newQueryBoundFromDocOrFields(t, this.type, this._docOrFields, this._inclusive);\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithStartAt(t, e) {\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n        }(t._query, e));\n    }\n}\n\nfunction startAt(...t) {\n    return QueryStartAtConstraint._create(\"startAt\", t, \n    /*inclusive=*/ !0);\n}\n\nfunction startAfter(...t) {\n    return QueryStartAtConstraint._create(\"startAfter\", t, \n    /*inclusive=*/ !1);\n}\n\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */ class QueryEndAtConstraint extends QueryConstraint {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, r) {\n        super(), this.type = t, this._docOrFields = e, this._inclusive = r;\n    }\n    static _create(t, e, r) {\n        return new QueryEndAtConstraint(t, e, r);\n    }\n    _apply(t) {\n        const e = __PRIVATE_newQueryBoundFromDocOrFields(t, this.type, this._docOrFields, this._inclusive);\n        return new Query(t.firestore, t.converter, function __PRIVATE_queryWithEndAt(t, e) {\n            return new __PRIVATE_QueryImpl(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n        }(t._query, e));\n    }\n}\n\nfunction endBefore(...t) {\n    return QueryEndAtConstraint._create(\"endBefore\", t, \n    /*inclusive=*/ !1);\n}\n\nfunction endAt(...t) {\n    return QueryEndAtConstraint._create(\"endAt\", t, \n    /*inclusive=*/ !0);\n}\n\n/** Helper function to create a bound from a document or fields */ function __PRIVATE_newQueryBoundFromDocOrFields(t, e, r, n) {\n    if (r[0] = getModularInstance(r[0]), r[0] instanceof DocumentSnapshot) return function __PRIVATE_newQueryBoundFromDocument(t, e, r, n, i) {\n        if (!n) throw new FirestoreError(P, `Can't use a DocumentSnapshot that doesn't exist for ${r}().`);\n        const s = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n                for (const r of __PRIVATE_queryNormalizedOrderBy(t)) if (r.field.isKeyField()) s.push(__PRIVATE_refValue(e, n.key)); else {\n            const t = n.data.field(r.field);\n            if (__PRIVATE_isServerTimestamp(t)) throw new FirestoreError(T, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + r.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n            if (null === t) {\n                const t = r.field.canonicalString();\n                throw new FirestoreError(T, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n            }\n            s.push(t);\n        }\n        return new Bound(s, i);\n    }\n    /**\n * Converts a list of field values to a `Bound` for the given query.\n */ (t._query, t.firestore._databaseId, e, r[0]._document, n);\n    {\n        const i = __PRIVATE_newUserDataReader(t.firestore);\n        return function __PRIVATE_newQueryBoundFromFields(t, e, r, n, i, s) {\n            // Use explicit order by's because it has to match the query the user made\n            const o = t.explicitOrderBy;\n            if (i.length > o.length) throw new FirestoreError(T, `Too many arguments provided to ${n}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n            const a = [];\n            for (let s = 0; s < i.length; s++) {\n                const u = i[s];\n                if (o[s].field.isKeyField()) {\n                    if (\"string\" != typeof u) throw new FirestoreError(T, `Invalid query. Expected a string for document ID in ${n}(), but got a ${typeof u}`);\n                    if (!__PRIVATE_isCollectionGroupQuery(t) && -1 !== u.indexOf(\"/\")) throw new FirestoreError(T, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${n}() must be a plain document ID, but '${u}' contains a slash.`);\n                    const r = t.path.child(ResourcePath.fromString(u));\n                    if (!DocumentKey.isDocumentKey(r)) throw new FirestoreError(T, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${n}() must result in a valid document path, but '${r}' is not because it contains an odd number of segments.`);\n                    const i = new DocumentKey(r);\n                    a.push(__PRIVATE_refValue(e, i));\n                } else {\n                    const t = __PRIVATE_parseQueryValue(r, n, u);\n                    a.push(t);\n                }\n            }\n            return new Bound(a, s);\n        }\n        /**\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n * appropriate errors if the value is anything other than a `DocumentReference`\n * or `string`, or if the string is malformed.\n */ (t._query, t.firestore._databaseId, i, e, r, n);\n    }\n}\n\nfunction __PRIVATE_parseDocumentIdValue(t, e, r) {\n    if (\"string\" == typeof (r = getModularInstance(r))) {\n        if (\"\" === r) throw new FirestoreError(T, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n        if (!__PRIVATE_isCollectionGroupQuery(e) && -1 !== r.indexOf(\"/\")) throw new FirestoreError(T, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${r}' contains a '/' character.`);\n        const n = e.path.child(ResourcePath.fromString(r));\n        if (!DocumentKey.isDocumentKey(n)) throw new FirestoreError(T, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${n}' is not because it has an odd number of segments (${n.length}).`);\n        return __PRIVATE_refValue(t, new DocumentKey(n));\n    }\n    if (r instanceof DocumentReference) return __PRIVATE_refValue(t, r._key);\n    throw new FirestoreError(T, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${__PRIVATE_valueDescription(r)}.`);\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */ function __PRIVATE_validateDisjunctiveFilterElements(t, e) {\n    if (!Array.isArray(t) || 0 === t.length) throw new FirestoreError(T, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */ function __PRIVATE_validateNewFieldFilter(t, e) {\n    const r = function __PRIVATE_findOpInsideFilters(t, e) {\n        for (const r of t) for (const t of r.getFlattenedFilters()) if (e.indexOf(t.op) >= 0) return t.op;\n        return null;\n    }(t.filters, function __PRIVATE_conflictingOps(t) {\n        switch (t) {\n          case \"!=\" /* Operator.NOT_EQUAL */ :\n            return [ \"!=\" /* Operator.NOT_EQUAL */ , \"not-in\" /* Operator.NOT_IN */ ];\n\n          case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ :\n          case \"in\" /* Operator.IN */ :\n            return [ \"not-in\" /* Operator.NOT_IN */ ];\n\n          case \"not-in\" /* Operator.NOT_IN */ :\n            return [ \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ , \"in\" /* Operator.IN */ , \"not-in\" /* Operator.NOT_IN */ , \"!=\" /* Operator.NOT_EQUAL */ ];\n\n          default:\n            return [];\n        }\n    }(e.op));\n    if (null !== r) \n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    throw r === e.op ? new FirestoreError(T, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new FirestoreError(T, `Invalid query. You cannot use '${e.op.toString()}' filters with '${r.toString()}' filters.`);\n}\n\nfunction __PRIVATE_validateQueryFilterConstraint(t, e) {\n    if (!(e instanceof QueryFieldFilterConstraint || e instanceof QueryCompositeFilterConstraint)) throw new FirestoreError(T, `Function ${t}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction __PRIVATE_applyFirestoreDataConverter(t, e, r) {\n    let n;\n    // Cast to `any` in order to satisfy the union type constraint on\n    // toFirestore().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return n = t ? r && (r.merge || r.mergeFields) ? t.toFirestore(e, r) : t.toFirestore(e) : e, \n    n;\n}\n\nclass __PRIVATE_LiteUserDataWriter extends class AbstractUserDataWriter {\n    convertValue(t, e = \"none\") {\n        switch (__PRIVATE_typeOrder(t)) {\n          case 0 /* TypeOrder.NullValue */ :\n            return null;\n\n          case 1 /* TypeOrder.BooleanValue */ :\n            return t.booleanValue;\n\n          case 2 /* TypeOrder.NumberValue */ :\n            return __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue);\n\n          case 3 /* TypeOrder.TimestampValue */ :\n            return this.convertTimestamp(t.timestampValue);\n\n          case 4 /* TypeOrder.ServerTimestampValue */ :\n            return this.convertServerTimestamp(t, e);\n\n          case 5 /* TypeOrder.StringValue */ :\n            return t.stringValue;\n\n          case 6 /* TypeOrder.BlobValue */ :\n            return this.convertBytes(__PRIVATE_normalizeByteString(t.bytesValue));\n\n          case 7 /* TypeOrder.RefValue */ :\n            return this.convertReference(t.referenceValue);\n\n          case 8 /* TypeOrder.GeoPointValue */ :\n            return this.convertGeoPoint(t.geoPointValue);\n\n          case 9 /* TypeOrder.ArrayValue */ :\n            return this.convertArray(t.arrayValue, e);\n\n          case 10 /* TypeOrder.ObjectValue */ :\n            return this.convertObject(t.mapValue, e);\n\n          default:\n            throw fail();\n        }\n    }\n    convertObject(t, e) {\n        return this.convertObjectMap(t.fields, e);\n    }\n    /**\n     * @internal\n     */    convertObjectMap(t, e = \"none\") {\n        const r = {};\n        return forEach(t, ((t, n) => {\n            r[t] = this.convertValue(n, e);\n        })), r;\n    }\n    convertGeoPoint(t) {\n        return new GeoPoint(__PRIVATE_normalizeNumber(t.latitude), __PRIVATE_normalizeNumber(t.longitude));\n    }\n    convertArray(t, e) {\n        return (t.values || []).map((t => this.convertValue(t, e)));\n    }\n    convertServerTimestamp(t, e) {\n        switch (e) {\n          case \"previous\":\n            const r = __PRIVATE_getPreviousValue(t);\n            return null == r ? null : this.convertValue(r, e);\n\n          case \"estimate\":\n            return this.convertTimestamp(__PRIVATE_getLocalWriteTime(t));\n\n          default:\n            return null;\n        }\n    }\n    convertTimestamp(t) {\n        const e = __PRIVATE_normalizeTimestamp(t);\n        return new Timestamp(e.seconds, e.nanos);\n    }\n    convertDocumentKey(t, e) {\n        const r = ResourcePath.fromString(t);\n        __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(r));\n        const n = new DatabaseId(r.get(1), r.get(3)), i = new DocumentKey(r.popFirst(5));\n        return n.isEqual(e) || \n        // TODO(b/64130202): Somehow support foreign references.\n        __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${n.projectId}/${n.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), \n        i;\n    }\n} {\n    constructor(t) {\n        super(), this.firestore = t;\n    }\n    convertBytes(t) {\n        return new Bytes(t);\n    }\n    convertReference(t) {\n        const e = this.convertDocumentKey(t, this.firestore._databaseId);\n        return new DocumentReference(this.firestore, /* converter= */ null, e);\n    }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */ function getDoc(t) {\n    const e = __PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore), r = new __PRIVATE_LiteUserDataWriter(t.firestore);\n    return __PRIVATE_invokeBatchGetDocumentsRpc(e, [ t._key ]).then((e => {\n        __PRIVATE_hardAssert(1 === e.length);\n        const n = e[0];\n        return new DocumentSnapshot(t.firestore, r, t._key, n.isFoundDocument() ? n : null, t.converter);\n    }));\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */ function getDocs(t) {\n    (function __PRIVATE_validateHasExplicitOrderByForLimitToLast(t) {\n        if (\"L\" /* LimitType.Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new FirestoreError(v, \"limitToLast() queries require specifying at least one orderBy() clause\");\n    })((t = __PRIVATE_cast(t, Query))._query);\n    const e = __PRIVATE_getDatastore(t.firestore), r = new __PRIVATE_LiteUserDataWriter(t.firestore);\n    return __PRIVATE_invokeRunQueryRpc(e, t._query).then((e => {\n        const n = e.map((e => new QueryDocumentSnapshot(t.firestore, r, e.key, e, t.converter)));\n        return \"L\" /* LimitType.Last */ === t._query.limitType && \n        // Limit to last queries reverse the orderBy constraint that was\n        // specified by the user. As such, we need to reverse the order of the\n        // results to return the documents in the expected order.\n        n.reverse(), new QuerySnapshot(t, n);\n    }));\n}\n\nfunction setDoc(t, e, r) {\n    const n = __PRIVATE_applyFirestoreDataConverter((t = __PRIVATE_cast(t, DocumentReference)).converter, e, r), i = __PRIVATE_parseSetData(__PRIVATE_newUserDataReader(t.firestore), \"setDoc\", t._key, n, null !== t.converter, r);\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [ i.toMutation(t._key, Precondition.none()) ]);\n}\n\nfunction updateDoc(t, e, r, ...n) {\n    const i = __PRIVATE_newUserDataReader((t = __PRIVATE_cast(t, DocumentReference)).firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n        let s;\n    s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(i, \"updateDoc\", t._key, e, r, n) : __PRIVATE_parseUpdateData(i, \"updateDoc\", t._key, e);\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [ s.toMutation(t._key, Precondition.exists(!0)) ]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */ function deleteDoc(t) {\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore((t = __PRIVATE_cast(t, DocumentReference)).firestore), [ new __PRIVATE_DeleteMutation(t._key, Precondition.none()) ]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */ function addDoc(t, e) {\n    const r = doc(t = __PRIVATE_cast(t, CollectionReference)), n = __PRIVATE_applyFirestoreDataConverter(t.converter, e), i = __PRIVATE_parseSetData(__PRIVATE_newUserDataReader(t.firestore), \"addDoc\", r._key, n, null !== r.converter, {});\n    return __PRIVATE_invokeCommitRpc(__PRIVATE_getDatastore(t.firestore), [ i.toMutation(r._key, Precondition.exists(!1)) ]).then((() => r));\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Calculates the number of documents in the result set of the given query\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can\n * count the documents in cases where the result set is prohibitively large to\n * download entirely (thousands of documents).\n *\n * @param query The query whose result set size is calculated.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */ function getCount(t) {\n    return getAggregate(t, {\n        count: count()\n    });\n}\n\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, are downloaded. This\n * function can perform aggregations of the documents in cases where the result\n * set is prohibitively large to download entirely (thousands of documents).\n *\n * @param query The query whose result set is aggregated over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregate(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n */ function getAggregate(t, e) {\n    const r = __PRIVATE_cast(t.firestore, Firestore), n = __PRIVATE_getDatastore(r), i = function __PRIVATE_mapToArray(t, e) {\n        const r = [];\n        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && r.push(e(t[n], n, t));\n        return r;\n    }(e, ((t, e) => new __PRIVATE_AggregateImpl(e, t.aggregateType, t._internalFieldPath)));\n    // Run the aggregation and convert the results\n    return __PRIVATE_invokeRunAggregationQueryRpc(n, t._query, i).then((e => function __PRIVATE_convertToAggregateQuerySnapshot(t, e, r) {\n        const n = new __PRIVATE_LiteUserDataWriter(t);\n        return new AggregateQuerySnapshot(e, n, r);\n    }\n    /**\n * Create an AggregateField object that can be used to compute the sum of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to sum across the result set.\n */ (r, t, e)));\n}\n\nfunction sum(t) {\n    return new AggregateField(\"sum\", __PRIVATE_fieldPathFromArgument$1(\"sum\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n */ function average(t) {\n    return new AggregateField(\"avg\", __PRIVATE_fieldPathFromArgument$1(\"average\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n */ function count() {\n    return new AggregateField(\"count\");\n}\n\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n */ function aggregateFieldEqual(t, e) {\n    var r, n;\n    return t instanceof AggregateField && e instanceof AggregateField && t.aggregateType === e.aggregateType && (null === (r = t._internalFieldPath) || void 0 === r ? void 0 : r.canonicalString()) === (null === (n = e._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString());\n}\n\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */ function aggregateQuerySnapshotEqual(t, e) {\n    return queryEqual(t.query, e.query) && deepEqual(t.data(), e.data());\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */ function deleteField() {\n    return new __PRIVATE_DeleteFieldValueImpl(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */ function serverTimestamp() {\n    return new __PRIVATE_ServerTimestampFieldValueImpl(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */ function arrayUnion(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new __PRIVATE_ArrayUnionFieldValueImpl(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function arrayRemove(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new __PRIVATE_ArrayRemoveFieldValueImpl(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function increment(t) {\n    return new __PRIVATE_NumericIncrementFieldValueImpl(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */ class WriteBatch {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, \n        this._dataReader = __PRIVATE_newUserDataReader(t);\n    }\n    set(t, e, r) {\n        this._verifyNotCommitted();\n        const n = __PRIVATE_validateReference(t, this._firestore), i = __PRIVATE_applyFirestoreDataConverter(n.converter, e, r), s = __PRIVATE_parseSetData(this._dataReader, \"WriteBatch.set\", n._key, i, null !== n.converter, r);\n        return this._mutations.push(s.toMutation(n._key, Precondition.none())), this;\n    }\n    update(t, e, r, ...n) {\n        this._verifyNotCommitted();\n        const i = __PRIVATE_validateReference(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let s;\n        return s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"WriteBatch.update\", i._key, e, r, n) : __PRIVATE_parseUpdateData(this._dataReader, \"WriteBatch.update\", i._key, e), \n        this._mutations.push(s.toMutation(i._key, Precondition.exists(!0))), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\n     */    delete(t) {\n        this._verifyNotCommitted();\n        const e = __PRIVATE_validateReference(t, this._firestore);\n        return this._mutations = this._mutations.concat(new __PRIVATE_DeleteMutation(e._key, Precondition.none())), \n        this;\n    }\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * The result of these writes will only be reflected in document reads that\n     * occur after the returned promise resolves. If the client is offline, the\n     * write fails. If you would like to see local modifications or buffer writes\n     * until the client is online, use the full Firestore SDK.\n     *\n     * @returns A `Promise` resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit (note that it won't\n     * resolve while you're offline).\n     */    commit() {\n        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n    }\n    _verifyNotCommitted() {\n        if (this._committed) throw new FirestoreError(w, \"A write batch can no longer be used after commit() has been called.\");\n    }\n}\n\nfunction __PRIVATE_validateReference(t, e) {\n    if ((t = getModularInstance(t)).firestore !== e) throw new FirestoreError(T, \"Provided document reference is from a different Firestore instance.\");\n    return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */ function writeBatch(t) {\n    const e = __PRIVATE_getDatastore(t = __PRIVATE_cast(t, Firestore));\n    return new WriteBatch(t, (t => __PRIVATE_invokeCommitRpc(e, t)));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */ class Transaction$1 {\n    constructor(t) {\n        this.datastore = t, \n        // The version of each document that was read during this transaction.\n        this.readVersions = new Map, this.mutations = [], this.committed = !1, \n        /**\n         * A deferred usage error that occurred previously in this transaction that\n         * will cause the transaction to fail once it actually commits.\n         */\n        this.lastTransactionError = null, \n        /**\n         * Set of documents that have been written in the transaction.\n         *\n         * When there's more than one write to the same key in a transaction, any\n         * writes after the first are handled differently.\n         */\n        this.writtenDocs = new Set;\n    }\n    async lookup(t) {\n        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw this.lastTransactionError = new FirestoreError(T, \"Firestore transactions require all reads to be executed before all writes.\"), \n        this.lastTransactionError;\n        const e = await __PRIVATE_invokeBatchGetDocumentsRpc(this.datastore, t);\n        return e.forEach((t => this.recordVersion(t))), e;\n    }\n    set(t, e) {\n        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    update(t, e) {\n        try {\n            this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n        } catch (t) {\n            this.lastTransactionError = t;\n        }\n        this.writtenDocs.add(t.toString());\n    }\n    delete(t) {\n        this.write(new __PRIVATE_DeleteMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    async commit() {\n        if (this.ensureCommitNotCalled(), this.lastTransactionError) throw this.lastTransactionError;\n        const t = this.readVersions;\n        // For each mutation, note that the doc was written.\n                this.mutations.forEach((e => {\n            t.delete(e.key.toString());\n        })), \n        // For each document that was read but not written to, we want to perform\n        // a `verify` operation.\n        t.forEach(((t, e) => {\n            const r = DocumentKey.fromPath(e);\n            this.mutations.push(new __PRIVATE_VerifyMutation(r, this.precondition(r)));\n        })), await __PRIVATE_invokeCommitRpc(this.datastore, this.mutations), this.committed = !0;\n    }\n    recordVersion(t) {\n        let e;\n        if (t.isFoundDocument()) e = t.version; else {\n            if (!t.isNoDocument()) throw fail();\n            // Represent a deleted doc using SnapshotVersion.min().\n            e = SnapshotVersion.min();\n        }\n        const r = this.readVersions.get(t.key.toString());\n        if (r) {\n            if (!e.isEqual(r)) \n            // This transaction will fail no matter what.\n            throw new FirestoreError(g, \"Document version changed between two reads.\");\n        } else this.readVersions.set(t.key.toString(), e);\n    }\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */    precondition(t) {\n        const e = this.readVersions.get(t.toString());\n        return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(SnapshotVersion.min()) ? Precondition.exists(!1) : Precondition.updateTime(e) : Precondition.none();\n    }\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */    preconditionForUpdate(t) {\n        const e = this.readVersions.get(t.toString());\n        // The first time a document is written, we want to take into account the\n        // read time and existence\n                if (!this.writtenDocs.has(t.toString()) && e) {\n            if (e.isEqual(SnapshotVersion.min())) \n            // The document doesn't exist, so fail the transaction.\n            // This has to be validated locally because you can't send a\n            // precondition that a document does not exist without changing the\n            // semantics of the backend write to be an insert. This is the reverse\n            // of what we want, since we want to assert that the document doesn't\n            // exist but then send the update and have it fail. Since we can't\n            // express that to the backend, we have to validate locally.\n            // Note: this can change once we can send separate verify writes in the\n            // transaction.\n            throw new FirestoreError(T, \"Can't update a document that doesn't exist.\");\n            // Document exists, base precondition on document update time.\n                        return Precondition.updateTime(e);\n        }\n        // Document was not read, so we just use the preconditions for a blind\n        // update.\n        return Precondition.exists(!0);\n    }\n    write(t) {\n        this.ensureCommitNotCalled(), this.mutations.push(t);\n    }\n    ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const z = {\n    maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass __PRIVATE_TransactionRunner {\n    constructor(t, e, r, n, i) {\n        this.asyncQueue = t, this.datastore = e, this.options = r, this.updateFunction = n, \n        this.deferred = i, this.Et = r.maxAttempts, this.At = new __PRIVATE_ExponentialBackoff(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\n    }\n    /** Runs the transaction and sets the result on deferred. */    Tt() {\n        this.Et -= 1, this.Rt();\n    }\n    Rt() {\n        this.At.G((async () => {\n            const t = new Transaction$1(this.datastore), e = this.Pt(t);\n            e && e.then((e => {\n                this.asyncQueue.enqueueAndForget((() => t.commit().then((() => {\n                    this.deferred.resolve(e);\n                })).catch((t => {\n                    this.It(t);\n                }))));\n            })).catch((t => {\n                this.It(t);\n            }));\n        }));\n    }\n    Pt(t) {\n        try {\n            const e = this.updateFunction(t);\n            return !__PRIVATE_isNullOrUndefined(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), \n            null);\n        } catch (t) {\n            // Do not retry errors thrown by user provided updateFunction.\n            return this.deferred.reject(t), null;\n        }\n    }\n    It(t) {\n        this.Et > 0 && this.Vt(t) ? (this.Et -= 1, this.asyncQueue.enqueueAndForget((() => (this.Rt(), \n        Promise.resolve())))) : this.deferred.reject(t);\n    }\n    Vt(t) {\n        if (\"FirebaseError\" === t.name) {\n            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n            // non-matching document versions with ABORTED. These errors should be retried.\n            const e = t.code;\n            return \"aborted\" === e || \"failed-precondition\" === e || \"already-exists\" === e || !\n            /**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\n            function __PRIVATE_isPermanentError(t) {\n                switch (t) {\n                  default:\n                    return fail();\n\n                  case m:\n                  case A:\n                  case R:\n                  case y:\n                  case D:\n                  case b:\n // Unauthenticated means something went wrong with our token and we need\n                    // to retry with new credentials which will happen automatically.\n                                      case p:\n                    return !1;\n\n                  case T:\n                  case P:\n                  case I:\n                  case V:\n                  case w:\n // Aborted might be retried in some scenarios, but that is dependant on\n                    // the context and should handled individually by the calling code.\n                    // See https://cloud.google.com/apis/design/errors.\n                                      case g:\n                  case F:\n                  case v:\n                  case C:\n                    return !0;\n                }\n            }(e);\n        }\n        return !1;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */ function getDocument() {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */ class DelayedOperation {\n    constructor(t, e, r, n, i) {\n        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = r, this.op = n, this.removalCallback = i, \n        this.deferred = new __PRIVATE_Deferred, this.then = this.deferred.promise.then.bind(this.deferred.promise), \n        // It's normal for the deferred promise to be canceled (due to cancellation)\n        // and so we attach a dummy catch callback to avoid\n        // 'UnhandledPromiseRejectionWarning' log spam.\n        this.deferred.promise.catch((t => {}));\n    }\n    get promise() {\n        return this.deferred.promise;\n    }\n    /**\n     * Creates and returns a DelayedOperation that has been scheduled to be\n     * executed on the provided asyncQueue after the provided delayMs.\n     *\n     * @param asyncQueue - The queue to schedule the operation on.\n     * @param id - A Timer ID identifying the type of operation this is.\n     * @param delayMs - The delay (ms) before the operation should be scheduled.\n     * @param op - The operation to run.\n     * @param removalCallback - A callback to be called synchronously once the\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\n     *   from its delayedOperations list.\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n     *   the DelayedOperation class public.\n     */    static createAndSchedule(t, e, r, n, i) {\n        const s = Date.now() + r, o = new DelayedOperation(t, e, s, n, i);\n        return o.start(r), o;\n    }\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */    start(t) {\n        this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);\n    }\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */    skipDelay() {\n        return this.handleDelayElapsed();\n    }\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */    cancel(t) {\n        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(m, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n    }\n    handleDelayElapsed() {\n        this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), \n        this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));\n    }\n    clearTimeout() {\n        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), \n        this.timerHandle = null);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class __PRIVATE_AsyncQueueImpl {\n    constructor() {\n        // The last promise in the queue.\n        this.yt = Promise.resolve(), \n        // A list of retryable operations. Retryable operations are run in order and\n        // retried with backoff.\n        this.wt = [], \n        // Is this AsyncQueue being shut down? Once it is set to true, it will not\n        // be changed again.\n        this.gt = !1, \n        // Operations scheduled to be queued in the future. Operations are\n        // automatically removed after they are run or canceled.\n        this.Ft = [], \n        // visible for testing\n        this.vt = null, \n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.Dt = !1, \n        // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n        this.bt = !1, \n        // List of TimerIds to fast-forward delays for.\n        this.Ct = [], \n        // Backoff timer used to schedule retries for retryable operations\n        this.At = new __PRIVATE_ExponentialBackoff(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */), \n        // Visibility handler that triggers an immediate retry of all retryable\n        // operations. Meant to speed up recovery when we regain file system access\n        // after page comes into foreground.\n        this.St = () => {\n            const t = getDocument();\n            t && __PRIVATE_logDebug(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), \n            this.At.J();\n        };\n        const t = getDocument();\n        t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.St);\n    }\n    get isShuttingDown() {\n        return this.gt;\n    }\n    /**\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\n     * we ignore the Promise result).\n     */    enqueueAndForget(t) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.enqueue(t);\n    }\n    enqueueAndForgetEvenWhileRestricted(t) {\n        this.Nt(), \n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.Ot(t);\n    }\n    enterRestrictedMode(t) {\n        if (!this.gt) {\n            this.gt = !0, this.bt = t || !1;\n            const e = getDocument();\n            e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.St);\n        }\n    }\n    enqueue(t) {\n        if (this.Nt(), this.gt) \n        // Return a Promise which never resolves.\n        return new Promise((() => {}));\n        // Create a deferred Promise that we can return to the callee. This\n        // allows us to return a \"hanging Promise\" only to the callee and still\n        // advance the queue even when the operation is not run.\n                const e = new __PRIVATE_Deferred;\n        return this.Ot((() => this.gt && this.bt ? Promise.resolve() : (t().then(e.resolve, e.reject), \n        e.promise))).then((() => e.promise));\n    }\n    enqueueRetryable(t) {\n        this.enqueueAndForget((() => (this.wt.push(t), this.qt())));\n    }\n    /**\n     * Runs the next operation from the retryable queue. If the operation fails,\n     * reschedules with backoff.\n     */    async qt() {\n        if (0 !== this.wt.length) {\n            try {\n                await this.wt[0](), this.wt.shift(), this.At.reset();\n            } catch (t) {\n                if (!\n                /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n                /** Verifies whether `e` is an IndexedDbTransactionError. */\n                function __PRIVATE_isIndexedDbTransactionError(t) {\n                    // Use name equality, as instanceof checks on errors don't work with errors\n                    // that wrap other errors.\n                    return \"IndexedDbTransactionError\" === t.name;\n                }\n                /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t)) throw t;\n // Failure will be handled by AsyncQueue\n                                __PRIVATE_logDebug(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n            }\n            this.wt.length > 0 && \n            // If there are additional operations, we re-schedule `retryNextOp()`.\n            // This is necessary to run retryable operations that failed during\n            // their initial attempt since we don't know whether they are already\n            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n            // call scheduled here.\n            // Since `backoffAndRun()` cancels an existing backoff and schedules a\n            // new backoff on every call, there is only ever a single additional\n            // operation in the queue.\n            this.At.G((() => this.qt()));\n        }\n    }\n    Ot(t) {\n        const e = this.yt.then((() => (this.Dt = !0, t().catch((t => {\n            this.vt = t, this.Dt = !1;\n            const e = \n            /**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error - Error or FirestoreError\n */\n            function __PRIVATE_getMessageOrStack(t) {\n                let e = t.message || \"\";\n                t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n                return e;\n            }\n            /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n            // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n            // legacy SDK.\n            /**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */ (t);\n            // Re-throw the error so that this.tail becomes a rejected Promise and\n            // all further attempts to chain (via .then) will just short-circuit\n            // and return the rejected Promise.\n            throw __PRIVATE_logError(\"INTERNAL UNHANDLED ERROR: \", e), t;\n        })).then((t => (this.Dt = !1, t))))));\n        return this.yt = e, e;\n    }\n    enqueueAfterDelay(t, e, r) {\n        this.Nt(), \n        // Fast-forward delays for timerIds that have been overriden.\n        this.Ct.indexOf(t) > -1 && (e = 0);\n        const n = DelayedOperation.createAndSchedule(this, t, e, r, (t => this.Bt(t)));\n        return this.Ft.push(n), n;\n    }\n    Nt() {\n        this.vt && fail();\n    }\n    verifyOperationInProgress() {}\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */    async $t() {\n        // Operations in the queue prior to draining may have enqueued additional\n        // operations. Keep draining the queue until the tail is no longer advanced,\n        // which indicates that no more new operations were enqueued and that all\n        // operations were executed.\n        let t;\n        do {\n            t = this.yt, await t;\n        } while (t !== this.yt);\n    }\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */    Qt(t) {\n        for (const e of this.Ft) if (e.timerId === t) return !0;\n        return !1;\n    }\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId - Delayed operations up to and including this TimerId\n     * will be drained. Pass TimerId.All to run all delayed operations.\n     * @returns a Promise that resolves once all operations have been run.\n     */    Lt(t) {\n        // Note that draining may generate more delayed ops, so we do that first.\n        return this.$t().then((() => {\n            // Run ops in the same order they'd run if they ran naturally.\n            this.Ft.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));\n            for (const e of this.Ft) if (e.skipDelay(), \"all\" /* TimerId.All */ !== t && e.timerId === t) break;\n            return this.$t();\n        }));\n    }\n    /**\n     * For Tests: Skip all subsequent delays for a timer id.\n     */    Mt(t) {\n        this.Ct.push(t);\n    }\n    /** Called once a DelayedOperation is run or canceled. */    Bt(t) {\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n        const e = this.Ft.indexOf(t);\n        this.Ft.splice(e, 1);\n    }\n}\n\nclass Transaction {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._transaction = e, this._dataReader = __PRIVATE_newUserDataReader(t);\n    }\n    /**\n     * Reads the document referenced by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be read.\n     * @returns A `DocumentSnapshot` with the read data.\n     */    get(t) {\n        const e = __PRIVATE_validateReference(t, this._firestore), r = new __PRIVATE_LiteUserDataWriter(this._firestore);\n        return this._transaction.lookup([ e._key ]).then((t => {\n            if (!t || 1 !== t.length) return fail();\n            const n = t[0];\n            if (n.isFoundDocument()) return new DocumentSnapshot(this._firestore, r, n.key, n, e.converter);\n            if (n.isNoDocument()) return new DocumentSnapshot(this._firestore, r, e._key, null, e.converter);\n            throw fail();\n        }));\n    }\n    set(t, e, r) {\n        const n = __PRIVATE_validateReference(t, this._firestore), i = __PRIVATE_applyFirestoreDataConverter(n.converter, e, r), s = __PRIVATE_parseSetData(this._dataReader, \"Transaction.set\", n._key, i, null !== n.converter, r);\n        return this._transaction.set(n._key, s), this;\n    }\n    update(t, e, r, ...n) {\n        const i = __PRIVATE_validateReference(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let s;\n        return s = \"string\" == typeof (e = getModularInstance(e)) || e instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(this._dataReader, \"Transaction.update\", i._key, e, r, n) : __PRIVATE_parseUpdateData(this._dataReader, \"Transaction.update\", i._key, e), \n        this._transaction.update(i._key, s), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `Transaction` instance. Used for chaining method calls.\n     */    delete(t) {\n        const e = __PRIVATE_validateReference(t, this._firestore);\n        return this._transaction.delete(e._key), this;\n    }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */ function runTransaction(t, e, r) {\n    const n = __PRIVATE_getDatastore(t = __PRIVATE_cast(t, Firestore)), i = Object.assign(Object.assign({}, z), r);\n    !function __PRIVATE_validateTransactionOptions(t) {\n        if (t.maxAttempts < 1) throw new FirestoreError(T, \"Max attempts must be at least 1\");\n    }(i);\n    const s = new __PRIVATE_Deferred;\n    return new __PRIVATE_TransactionRunner(function __PRIVATE_newAsyncQueue() {\n        return new __PRIVATE_AsyncQueueImpl;\n    }(), n, i, (r => e(new Transaction(t, r))), s).Tt(), s.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */ !function __PRIVATE_registerFirestore() {\n    !function __PRIVATE_setSDKVersion(t) {\n        d = t;\n    }(`${SDK_VERSION}_lite`), _registerComponent(new Component(\"firestore/lite\", ((t, {instanceIdentifier: e, options: r}) => {\n        const n = t.getProvider(\"app\").getImmediate(), i = new Firestore(new __PRIVATE_LiteAuthCredentialsProvider(t.getProvider(\"auth-internal\")), new __PRIVATE_LiteAppCheckTokenProvider(t.getProvider(\"app-check-internal\")), function __PRIVATE_databaseIdFromApp(t, e) {\n            if (!Object.prototype.hasOwnProperty.apply(t.options, [ \"projectId\" ])) throw new FirestoreError(T, '\"projectId\" not provided in firebase.initializeApp.');\n            return new DatabaseId(t.options.projectId, e);\n        }\n        /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (n, e), n);\n        return r && i._setSettings(r), i;\n    }), \"PUBLIC\").setMultipleInstances(!0)), \n    // RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\n    registerVersion(\"firestore-lite\", \"4.6.3\", \"\"), registerVersion(\"firestore-lite\", \"4.6.3\", \"esm2017\");\n}();\n\nexport { AggregateField, AggregateQuerySnapshot, Bytes, CollectionReference, DocumentReference, DocumentSnapshot, FieldPath, FieldValue, Firestore, FirestoreError, GeoPoint, Query, QueryCompositeFilterConstraint, QueryConstraint, QueryDocumentSnapshot, QueryEndAtConstraint, QueryFieldFilterConstraint, QueryLimitConstraint, QueryOrderByConstraint, QuerySnapshot, QueryStartAtConstraint, Timestamp, Transaction, WriteBatch, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, average, collection, collectionGroup, connectFirestoreEmulator, count, deleteDoc, deleteField, doc, documentId, endAt, endBefore, getAggregate, getCount, getDoc, getDocs, getFirestore, increment, initializeFirestore, limit, limitToLast, or, orderBy, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setLogLevel, snapshotEqual, startAfter, startAt, sum, terminate, updateDoc, where, writeBatch };\n//# sourceMappingURL=index.browser.esm2017.js.map\n"],"mappings":"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,EAAE,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAI,SAAS8H,2BAA2BA,CAACnL,CAAC,EAAE;EACxC,OAAO,IAAI,IAAIA,CAAC;AACpB;;AAEA;AAAgD,SAASoL,wBAAwBA,CAACpL,CAAC,EAAE;EACjF;EACA;EACA,OAAO,CAAC,KAAKA,CAAC,IAAI,CAAC,GAAGA,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqL,CAAC,GAAG;EACNC,iBAAiB,EAAE,UAAU;EAC7BC,MAAM,EAAE,QAAQ;EAChBC,QAAQ,EAAE,UAAU;EACpBC,mBAAmB,EAAE;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,CAAC,EAAEC,CAAC;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,+BAA+BA,CAAC5L,CAAC,EAAE;EACxC,IAAI,KAAK,CAAC,KAAKA,CAAC,EAAE,OAAOoB,kBAAkB,CAAC,WAAW,EAAE,0BAA0B,CAAC,EACpFe,CAAC;EACD;EACA;EACA;;EAEA;EACA;EACI,QAAQnC,CAAC;IACX,KAAK,GAAG;MACN;MACA,OAAOiC,CAAC;IAEV,KAAK,GAAG;MACN;MACA,OAAOU,CAAC;;IAER;IACA;IACA;IACM,KAAK,GAAG;MACd;MACA,OAAOF,CAAC;IAEV,KAAK,GAAG;MACN;MACA,OAAOD,CAAC;IAEV,KAAK,GAAG;MACN;MACA,OAAOF,CAAC;IAEV,KAAK,GAAG;MACN;MACA,OAAOM,CAAC;;IAER;IACA;IACM,KAAK,GAAG;MACd;MACA,OAAOC,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}